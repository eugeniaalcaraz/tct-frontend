import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module) {
    var __extends6;
    var __assign10;
    var __rest3;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter10;
    var __generator10;
    var __exportStar;
    var __values5;
    var __read10;
    var __spread8;
    var __spreadArrays;
    var __await4;
    var __asyncGenerator4;
    var __asyncDelegator;
    var __asyncValues2;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics4 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends6 = function(d, b) {
        extendStatics4(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign10 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest3 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter10 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator10 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar = function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !exports2.hasOwnProperty(p))
            exports2[p] = m[p];
      };
      __values5 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read10 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread8 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read10(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await4 = function(v) {
        return this instanceof __await4 ? (this.v = v, this) : new __await4(v);
      };
      __asyncGenerator4 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await4 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await4(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values5 === "function" ? __values5(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (Object.hasOwnProperty.call(mod, k))
              result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends6);
      exporter("__assign", __assign10);
      exporter("__rest", __rest3);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter10);
      exporter("__generator", __generator10);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values5);
      exporter("__read", __read10);
      exporter("__spread", __spread8);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await4);
      exporter("__asyncGenerator", __asyncGenerator4);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-crypto/sha256-js/build/constants.js
var require_constants = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BLOCK_SIZE = 64;
    exports.DIGEST_LENGTH = 32;
    exports.KEY = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    exports.INIT = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  }
});

// node_modules/@aws-crypto/sha256-js/build/RawSha256.js
var require_RawSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/RawSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants();
    var RawSha256 = function() {
      function RawSha2562() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
      }
      RawSha2562.prototype.update = function(data) {
        if (this.finished) {
          throw new Error("Attempted to update an already finished hash.");
        }
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
          throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        while (byteLength > 0) {
          this.buffer[this.bufferLength++] = data[position++];
          byteLength--;
          if (this.bufferLength === constants_1.BLOCK_SIZE) {
            this.hashBuffer();
            this.bufferLength = 0;
          }
        }
      };
      RawSha2562.prototype.digest = function() {
        if (!this.finished) {
          var bitsHashed = this.bytesHashed * 8;
          var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
          var undecoratedLength = this.bufferLength;
          bufferView.setUint8(this.bufferLength++, 128);
          if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
            for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {
              bufferView.setUint8(i, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
          }
          for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {
            bufferView.setUint8(i, 0);
          }
          bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
          bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
          this.hashBuffer();
          this.finished = true;
        }
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for (var i = 0; i < 8; i++) {
          out[i * 4] = this.state[i] >>> 24 & 255;
          out[i * 4 + 1] = this.state[i] >>> 16 & 255;
          out[i * 4 + 2] = this.state[i] >>> 8 & 255;
          out[i * 4 + 3] = this.state[i] >>> 0 & 255;
        }
        return out;
      };
      RawSha2562.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
          if (i < 16) {
            this.temp[i] = (buffer[i * 4] & 255) << 24 | (buffer[i * 4 + 1] & 255) << 16 | (buffer[i * 4 + 2] & 255) << 8 | buffer[i * 4 + 3] & 255;
          } else {
            var u = this.temp[i - 2];
            var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
            u = this.temp[i - 15];
            var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
            this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
          }
          var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;
          var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
          state7 = state6;
          state6 = state5;
          state5 = state4;
          state4 = state3 + t1 | 0;
          state3 = state2;
          state2 = state1;
          state1 = state0;
          state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
      };
      return RawSha2562;
    }();
    exports.RawSha256 = RawSha256;
  }
});

// node_modules/@aws-crypto/sha256-js/node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js
var fromUtf8, toUtf8;
var init_pureJs = __esm({
  "node_modules/@aws-crypto/sha256-js/node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js"() {
    fromUtf8 = function(input) {
      var bytes = [];
      for (var i = 0, len = input.length; i < len; i++) {
        var value = input.charCodeAt(i);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i + 1) & 64512) === 56320) {
          var surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    toUtf8 = function(input) {
      var decoded = "";
      for (var i = 0, len = input.length; i < len; i++) {
        var byte = input[i];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          var nextByte = input[++i];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          var surrogatePair = [byte, input[++i], input[++i], input[++i]];
          var encoded = "%" + surrogatePair.map(function(byteValue) {
            return byteValue.toString(16);
          }).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
        }
      }
      return decoded;
    };
  }
});

// node_modules/@aws-crypto/sha256-js/node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js
function fromUtf82(input) {
  return new TextEncoder().encode(input);
}
function toUtf82(input) {
  return new TextDecoder("utf-8").decode(input);
}
var init_whatwgEncodingApi = __esm({
  "node_modules/@aws-crypto/sha256-js/node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js"() {
  }
});

// node_modules/@aws-crypto/sha256-js/node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js
var es_exports = {};
__export(es_exports, {
  fromUtf8: () => fromUtf83,
  toUtf8: () => toUtf83
});
var fromUtf83, toUtf83;
var init_es = __esm({
  "node_modules/@aws-crypto/sha256-js/node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js"() {
    init_pureJs();
    init_whatwgEncodingApi();
    fromUtf83 = function(input) {
      return typeof TextEncoder === "function" ? fromUtf82(input) : fromUtf8(input);
    };
    toUtf83 = function(input) {
      return typeof TextDecoder === "function" ? toUtf82(input) : toUtf8(input);
    };
  }
});

// node_modules/@aws-crypto/sha256-js/build/jsSha256.js
var require_jsSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/jsSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    var constants_1 = require_constants();
    var RawSha256_1 = require_RawSha256();
    var util_utf8_browser_1 = (init_es(), __toCommonJS(es_exports));
    var Sha2563 = function() {
      function Sha2564(secret) {
        this.hash = new RawSha256_1.RawSha256();
        if (secret) {
          this.outer = new RawSha256_1.RawSha256();
          var inner = bufferFromSecret(secret);
          var outer = new Uint8Array(constants_1.BLOCK_SIZE);
          outer.set(inner);
          for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
            inner[i] ^= 54;
            outer[i] ^= 92;
          }
          this.hash.update(inner);
          this.outer.update(outer);
          for (var i = 0; i < inner.byteLength; i++) {
            inner[i] = 0;
          }
        }
      }
      Sha2564.prototype.update = function(toHash) {
        if (isEmptyData(toHash) || this.error) {
          return;
        }
        try {
          this.hash.update(convertToBuffer(toHash));
        } catch (e) {
          this.error = e;
        }
      };
      Sha2564.prototype.digestSync = function() {
        if (this.error) {
          throw this.error;
        }
        if (this.outer) {
          if (!this.outer.finished) {
            this.outer.update(this.hash.digest());
          }
          return this.outer.digest();
        }
        return this.hash.digest();
      };
      Sha2564.prototype.digest = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          return tslib_1.__generator(this, function(_a) {
            return [2, this.digestSync()];
          });
        });
      };
      return Sha2564;
    }();
    exports.Sha256 = Sha2563;
    function bufferFromSecret(secret) {
      var input = convertToBuffer(secret);
      if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
      }
      var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
      buffer.set(input);
      return buffer;
    }
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    function convertToBuffer(data) {
      if (typeof data === "string") {
        return util_utf8_browser_1.fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
  }
});

// node_modules/@aws-crypto/sha256-js/build/index.js
var require_build = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_jsSha256(), exports);
  }
});

// node_modules/url/node_modules/punycode/punycode.js
var require_punycode = __commonJS({
  "node_modules/url/node_modules/punycode/punycode.js"(exports, module) {
    (function(root) {
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = typeof module == "object" && module && !module.nodeType && module;
      var freeGlobal = typeof globalThis == "object" && globalThis;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
        root = freeGlobal;
      }
      var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
      function error(type) {
        throw new RangeError(errors[type]);
      }
      function map(array, fn) {
        var length = array.length;
        var result = [];
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string = parts[1];
        }
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        return map(array, function(value) {
          var output = "";
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output += stringFromCharCode(value);
          return output;
        }).join("");
      }
      function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      }
      function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      }
      function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      }
      function decode(input) {
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error("not-basic");
          }
          output.push(input.charCodeAt(j));
        }
        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          for (oldi = i, w = 1, k = base; ; k += base) {
            if (index >= inputLength) {
              error("invalid-input");
            }
            digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i) / w)) {
              error("overflow");
            }
            i += digit * w;
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            baseMinusT = base - t;
            if (w > floor(maxInt / baseMinusT)) {
              error("overflow");
            }
            w *= baseMinusT;
          }
          out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error("overflow");
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return ucs2encode(output);
      }
      function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
        input = ucs2decode(input);
        inputLength = input.length;
        n = initialN;
        delta = 0;
        bias = initialBias;
        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue < 128) {
            output.push(stringFromCharCode(currentValue));
          }
        }
        handledCPCount = basicLength = output.length;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          for (m = maxInt, j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error("overflow");
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < n && ++delta > maxInt) {
              error("overflow");
            }
            if (currentValue == n) {
              for (q = delta, k = base; ; k += base) {
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) {
                  break;
                }
                qMinusT = q - t;
                baseMinusT = base - t;
                output.push(
                  stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                );
                q = floor(qMinusT / baseMinusT);
              }
              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
          ++delta;
          ++n;
        }
        return output.join("");
      }
      function toUnicode(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      }
      function toASCII(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
      }
      punycode = {
        "version": "1.4.1",
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define("punycode", function() {
          return punycode;
        });
      } else if (freeExports && freeModule) {
        if (module.exports == freeExports) {
          freeModule.exports = punycode;
        } else {
          for (key in punycode) {
            punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
          }
        }
      } else {
        root.punycode = punycode;
      }
    })(exports);
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports, module) {
    "use strict";
    module.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports, module) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/has-proto/index.js
var require_has_proto = __commonJS({
  "node_modules/has-proto/index.js"(exports, module) {
    "use strict";
    var test = {
      foo: {}
    };
    var $Object = Object;
    module.exports = function hasProto() {
      return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports, module) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var slice = Array.prototype.slice;
    var toStr = Object.prototype.toString;
    var funcType = "[object Function]";
    module.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice.call(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            args.concat(slice.call(arguments))
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        } else {
          return target.apply(
            that,
            args.concat(slice.call(arguments))
          );
        }
      };
      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs.push("$" + i);
      }
      bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports, module) {
    "use strict";
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/has/src/index.js
var require_src = __commonJS({
  "node_modules/has/src/index.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports, module) {
    "use strict";
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
      return x.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_src();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = null;
      }
    }
    module.exports = function callBind(originalFunction) {
      var func = $reflectApply(bind, $call, arguments);
      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) {
          $defineProperty(
            func,
            "length",
            { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
          );
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module.exports, "apply", { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// (disabled):node_modules/object-inspect/util.inspect
var require_util = __commonJS({
  "(disabled):node_modules/object-inspect/util.inspect"() {
  }
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/object-inspect/index.js"(exports, module) {
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
      return O.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
    module.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
          s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent) + "]";
        }
        return "[ " + $join.call(xs, ", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys, indent) + "}";
        }
        return tag + "{ " + $join.call(ys, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, "&quot;");
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f) {
      if (f.name) {
        return f.name;
      }
      var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) {
        return m[1];
      }
      return null;
    }
    function indexOf(xs, x) {
      if (xs.indexOf) {
        return xs.indexOf(x);
      }
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) {
          return i;
        }
      }
      return -1;
    }
    function isMap(x) {
      if (!mapSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        mapSize.call(x);
        try {
          setSize.call(x);
        } catch (s) {
          return true;
        }
        return x instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x, weakMapHas);
        try {
          weakSetHas.call(x, weakSetHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x) {
      if (!setSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        setSize.call(x);
        try {
          mapSize.call(x);
        } catch (m) {
          return true;
        }
        return x instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x, weakSetHas);
        try {
          weakMapHas.call(x, weakMapHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
        return true;
      }
      return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x) {
        return "\\" + x;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
          xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap["$" + syms[k]] = syms[k];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        } else {
          xs.push(key + ": " + inspect(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/side-channel/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var inspect = require_object_inspect();
    var $TypeError = GetIntrinsic("%TypeError%");
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key) {
      for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          curr.next = list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = {
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      return !!listGetNode(objects, key);
    };
    module.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        get: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key);
            }
          } else {
            if ($o) {
              return listGet($o, key);
            }
          }
        },
        has: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key);
            }
          } else {
            if ($o) {
              return listHas($o, key);
            }
          }
          return false;
        },
        set: function(key, value) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key, value);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key, value);
          } else {
            if (!$o) {
              $o = { key: {}, next: null };
            }
            listSet($o, key, value);
          }
        }
      };
      return channel;
    };
  }
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/qs/lib/formats.js"(exports, module) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/qs/lib/utils.js
var require_utils = __commonJS({
  "node_modules/qs/lib/utils.js"(exports, module) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i = 0; i < 256; ++i) {
        array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== "undefined") {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== "undefined") {
          obj[i] = source[i];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i) {
          if (has.call(target, i)) {
            var targetItem = target[i];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var encode = function encode2(str, defaultEncoder, charset, kind, format2) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);
        if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format2 === formats.RFC1738 && (c === 40 || c === 41)) {
          out += string.charAt(i);
          continue;
        }
        if (c < 128) {
          out = out + hexTable[c];
          continue;
        }
        if (c < 2048) {
          out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
          continue;
        }
        if (c < 55296 || c >= 57344) {
          out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
          continue;
        }
        i += 1;
        c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
        out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
          var key = keys[j];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
          mapped.push(fn(val[i]));
        }
        return mapped;
      }
      return fn(val);
    };
    module.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/qs/lib/stringify.js"(exports, module) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
      return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format2, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format2) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format2);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format2))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + "[]" : prefix;
      for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          strictNullHandling,
          skipNulls,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format2,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format2 = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format2 = opts.format;
      }
      var formatter = formats.formatters[format2];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format: format2,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if (opts && "indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = "indices";
      }
      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys, stringify(
          obj[key],
          key,
          generateArrayPrefix,
          commaRoundTrip,
          options.strictNullHandling,
          options.skipNulls,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/qs/lib/parse.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
          if (parts[i].indexOf("utf8=") === 0) {
            if (parts[i] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i;
            i = parts.length;
          }
        }
      }
      for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
          continue;
        }
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        if (has.call(obj, key)) {
          obj[key] = utils.combine(obj[key], val);
        } else {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];
        if (root === "[]" && options.parseArrays) {
          obj = [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var index = parseInt(cleanRoot, 10);
          if (!options.parseArrays && cleanRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (cleanRoot !== "__proto__") {
            obj[cleanRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      return {
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/qs/lib/index.js
var require_lib = __commonJS({
  "node_modules/qs/lib/index.js"(exports, module) {
    "use strict";
    var stringify = require_stringify();
    var parse4 = require_parse();
    var formats = require_formats();
    module.exports = {
      formats,
      parse: parse4,
      stringify
    };
  }
});

// node_modules/url/url.js
var require_url = __commonJS({
  "node_modules/url/url.js"(exports) {
    "use strict";
    var punycode = require_punycode();
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }
    var protocolPattern = /^([a-z0-9.+-]+:)/i;
    var portPattern = /:[0-9]*$/;
    var simplePathPattern = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/;
    var delims = [
      "<",
      ">",
      '"',
      "`",
      " ",
      "\r",
      "\n",
      "	"
    ];
    var unwise = [
      "{",
      "}",
      "|",
      "\\",
      "^",
      "`"
    ].concat(delims);
    var autoEscape = ["'"].concat(unwise);
    var nonHostChars = [
      "%",
      "/",
      "?",
      ";",
      "#"
    ].concat(autoEscape);
    var hostEndingChars = [
      "/",
      "?",
      "#"
    ];
    var hostnameMaxLen = 255;
    var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    var unsafeProtocol = {
      javascript: true,
      "javascript:": true
    };
    var hostlessProtocol = {
      javascript: true,
      "javascript:": true
    };
    var slashedProtocol = {
      http: true,
      https: true,
      ftp: true,
      gopher: true,
      file: true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    var querystring = require_lib();
    function urlParse(url, parseQueryString2, slashesDenoteHost) {
      if (url && typeof url === "object" && url instanceof Url) {
        return url;
      }
      var u = new Url();
      u.parse(url, parseQueryString2, slashesDenoteHost);
      return u;
    }
    Url.prototype.parse = function(url, parseQueryString2, slashesDenoteHost) {
      if (typeof url !== "string") {
        throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
      }
      var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, "/");
      url = uSplit.join(splitter);
      var rest = url;
      rest = rest.trim();
      if (!slashesDenoteHost && url.split("#").length === 1) {
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.path = rest;
          this.href = rest;
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
            if (parseQueryString2) {
              this.query = querystring.parse(this.search.substr(1));
            } else {
              this.query = this.search.substr(1);
            }
          } else if (parseQueryString2) {
            this.search = "";
            this.query = {};
          }
          return this;
        }
      }
      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@/]+@[^@/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }
      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        var hostEnd = -1;
        for (var i = 0; i < hostEndingChars.length; i++) {
          var hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        var auth, atSign;
        if (hostEnd === -1) {
          atSign = rest.lastIndexOf("@");
        } else {
          atSign = rest.lastIndexOf("@", hostEnd);
        }
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        }
        hostEnd = -1;
        for (var i = 0; i < nonHostChars.length; i++) {
          var hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        if (hostEnd === -1) {
          hostEnd = rest.length;
        }
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        this.parseHost();
        this.hostname = this.hostname || "";
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (var i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) {
              continue;
            }
            if (!part.match(hostnamePartPattern)) {
              var newpart = "";
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  newpart += "x";
                } else {
                  newpart += part[j];
                }
              }
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = "/" + notHost.join(".") + rest;
                }
                this.hostname = validParts.join(".");
                break;
              }
            }
          }
        }
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = "";
        } else {
          this.hostname = this.hostname.toLowerCase();
        }
        if (!ipv6Hostname) {
          this.hostname = punycode.toASCII(this.hostname);
        }
        var p = this.port ? ":" + this.port : "";
        var h = this.hostname || "";
        this.host = h + p;
        this.href += this.host;
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
          if (rest[0] !== "/") {
            rest = "/" + rest;
          }
        }
      }
      if (!unsafeProtocol[lowerProto]) {
        for (var i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1) {
            continue;
          }
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }
      var hash2 = rest.indexOf("#");
      if (hash2 !== -1) {
        this.hash = rest.substr(hash2);
        rest = rest.slice(0, hash2);
      }
      var qm = rest.indexOf("?");
      if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString2) {
          this.query = querystring.parse(this.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString2) {
        this.search = "";
        this.query = {};
      }
      if (rest) {
        this.pathname = rest;
      }
      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = "/";
      }
      if (this.pathname || this.search) {
        var p = this.pathname || "";
        var s = this.search || "";
        this.path = p + s;
      }
      this.href = this.format();
      return this;
    };
    function urlFormat(obj) {
      if (typeof obj === "string") {
        obj = urlParse(obj);
      }
      if (!(obj instanceof Url)) {
        return Url.prototype.format.call(obj);
      }
      return obj.format();
    }
    Url.prototype.format = function() {
      var auth = this.auth || "";
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
      }
      var protocol = this.protocol || "", pathname = this.pathname || "", hash2 = this.hash || "", host = false, query = "";
      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) {
          host += ":" + this.port;
        }
      }
      if (this.query && typeof this.query === "object" && Object.keys(this.query).length) {
        query = querystring.stringify(this.query);
      }
      var search = this.search || query && "?" + query || "";
      if (protocol && protocol.substr(-1) !== ":") {
        protocol += ":";
      }
      if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/") {
          pathname = "/" + pathname;
        }
      } else if (!host) {
        host = "";
      }
      if (hash2 && hash2.charAt(0) !== "#") {
        hash2 = "#" + hash2;
      }
      if (search && search.charAt(0) !== "?") {
        search = "?" + search;
      }
      pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
      });
      search = search.replace("#", "%23");
      return protocol + host + pathname + search + hash2;
    };
    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }
    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };
    function urlResolveObject(source, relative) {
      if (!source) {
        return relative;
      }
      return urlParse(source, false, true).resolveObject(relative);
    }
    Url.prototype.resolveObject = function(relative) {
      if (typeof relative === "string") {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }
      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }
      result.hash = relative.hash;
      if (relative.href === "") {
        result.href = result.format();
        return result;
      }
      if (relative.slashes && !relative.protocol) {
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== "protocol") {
            result[rkey] = relative[rkey];
          }
        }
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
          result.pathname = "/";
          result.path = result.pathname;
        }
        result.href = result.format();
        return result;
      }
      if (relative.protocol && relative.protocol !== result.protocol) {
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || "").split("/");
          while (relPath.length && !(relative.host = relPath.shift())) {
          }
          if (!relative.host) {
            relative.host = "";
          }
          if (!relative.hostname) {
            relative.hostname = "";
          }
          if (relPath[0] !== "") {
            relPath.unshift("");
          }
          if (relPath.length < 2) {
            relPath.unshift("");
          }
          result.pathname = relPath.join("/");
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        if (result.pathname || result.search) {
          var p = result.pathname || "";
          var s = result.search || "";
          result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }
      var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
      if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
          if (srcPath[0] === "") {
            srcPath[0] = result.host;
          } else {
            srcPath.unshift(result.host);
          }
        }
        result.host = "";
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === "") {
              relPath[0] = relative.host;
            } else {
              relPath.unshift(relative.host);
            }
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
      }
      if (isRelAbs) {
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
      } else if (relPath.length) {
        if (!srcPath) {
          srcPath = [];
        }
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (relative.search != null) {
        if (psychotic) {
          result.host = srcPath.shift();
          result.hostname = result.host;
          var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.hostname = authInHost.shift();
            result.host = result.hostname;
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        if (result.pathname !== null || result.search !== null) {
          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        }
        result.href = result.format();
        return result;
      }
      if (!srcPath.length) {
        result.pathname = null;
        if (result.search) {
          result.path = "/" + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === ".") {
          srcPath.splice(i, 1);
        } else if (last === "..") {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift("..");
        }
      }
      if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
        srcPath.unshift("");
      }
      if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
        srcPath.push("");
      }
      var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
      if (psychotic) {
        result.hostname = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        result.host = result.hostname;
        var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.hostname = authInHost.shift();
          result.host = result.hostname;
        }
      }
      mustEndAbs = mustEndAbs || result.host && srcPath.length;
      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift("");
      }
      if (srcPath.length > 0) {
        result.pathname = srcPath.join("/");
      } else {
        result.pathname = null;
        result.path = null;
      }
      if (result.pathname !== null || result.search !== null) {
        result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };
    Url.prototype.parseHost = function() {
      var host = this.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ":") {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) {
        this.hostname = host;
      }
    };
    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;
    exports.Url = Url;
  }
});

// node_modules/zen-observable/lib/Observable.js
var require_Observable = __commonJS({
  "node_modules/zen-observable/lib/Observable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Observable = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var hasSymbols = function() {
      return typeof Symbol === "function";
    };
    var hasSymbol2 = function(name) {
      return hasSymbols() && Boolean(Symbol[name]);
    };
    var getSymbol = function(name) {
      return hasSymbol2(name) ? Symbol[name] : "@@" + name;
    };
    if (hasSymbols() && !hasSymbol2("observable")) {
      Symbol.observable = Symbol("observable");
    }
    var SymbolIterator = getSymbol("iterator");
    var SymbolObservable = getSymbol("observable");
    var SymbolSpecies = getSymbol("species");
    function getMethod(obj, key) {
      var value = obj[key];
      if (value == null)
        return void 0;
      if (typeof value !== "function")
        throw new TypeError(value + " is not a function");
      return value;
    }
    function getSpecies(obj) {
      var ctor = obj.constructor;
      if (ctor !== void 0) {
        ctor = ctor[SymbolSpecies];
        if (ctor === null) {
          ctor = void 0;
        }
      }
      return ctor !== void 0 ? ctor : Observable2;
    }
    function isObservable(x) {
      return x instanceof Observable2;
    }
    function hostReportError(e) {
      if (hostReportError.log) {
        hostReportError.log(e);
      } else {
        setTimeout(function() {
          throw e;
        });
      }
    }
    function enqueue(fn) {
      Promise.resolve().then(function() {
        try {
          fn();
        } catch (e) {
          hostReportError(e);
        }
      });
    }
    function cleanupSubscription(subscription) {
      var cleanup = subscription._cleanup;
      if (cleanup === void 0)
        return;
      subscription._cleanup = void 0;
      if (!cleanup) {
        return;
      }
      try {
        if (typeof cleanup === "function") {
          cleanup();
        } else {
          var unsubscribe = getMethod(cleanup, "unsubscribe");
          if (unsubscribe) {
            unsubscribe.call(cleanup);
          }
        }
      } catch (e) {
        hostReportError(e);
      }
    }
    function closeSubscription(subscription) {
      subscription._observer = void 0;
      subscription._queue = void 0;
      subscription._state = "closed";
    }
    function flushSubscription(subscription) {
      var queue = subscription._queue;
      if (!queue) {
        return;
      }
      subscription._queue = void 0;
      subscription._state = "ready";
      for (var i = 0; i < queue.length; ++i) {
        notifySubscription(subscription, queue[i].type, queue[i].value);
        if (subscription._state === "closed")
          break;
      }
    }
    function notifySubscription(subscription, type, value) {
      subscription._state = "running";
      var observer = subscription._observer;
      try {
        var m = getMethod(observer, type);
        switch (type) {
          case "next":
            if (m)
              m.call(observer, value);
            break;
          case "error":
            closeSubscription(subscription);
            if (m)
              m.call(observer, value);
            else
              throw value;
            break;
          case "complete":
            closeSubscription(subscription);
            if (m)
              m.call(observer);
            break;
        }
      } catch (e) {
        hostReportError(e);
      }
      if (subscription._state === "closed")
        cleanupSubscription(subscription);
      else if (subscription._state === "running")
        subscription._state = "ready";
    }
    function onNotify(subscription, type, value) {
      if (subscription._state === "closed")
        return;
      if (subscription._state === "buffering") {
        subscription._queue.push({
          type,
          value
        });
        return;
      }
      if (subscription._state !== "ready") {
        subscription._state = "buffering";
        subscription._queue = [{
          type,
          value
        }];
        enqueue(function() {
          return flushSubscription(subscription);
        });
        return;
      }
      notifySubscription(subscription, type, value);
    }
    var Subscription = function() {
      function Subscription2(observer, subscriber) {
        _classCallCheck(this, Subscription2);
        this._cleanup = void 0;
        this._observer = observer;
        this._queue = void 0;
        this._state = "initializing";
        var subscriptionObserver = new SubscriptionObserver(this);
        try {
          this._cleanup = subscriber.call(void 0, subscriptionObserver);
        } catch (e) {
          subscriptionObserver.error(e);
        }
        if (this._state === "initializing")
          this._state = "ready";
      }
      _createClass(Subscription2, [{
        key: "unsubscribe",
        value: function unsubscribe() {
          if (this._state !== "closed") {
            closeSubscription(this);
            cleanupSubscription(this);
          }
        }
      }, {
        key: "closed",
        get: function() {
          return this._state === "closed";
        }
      }]);
      return Subscription2;
    }();
    var SubscriptionObserver = function() {
      function SubscriptionObserver2(subscription) {
        _classCallCheck(this, SubscriptionObserver2);
        this._subscription = subscription;
      }
      _createClass(SubscriptionObserver2, [{
        key: "next",
        value: function next(value) {
          onNotify(this._subscription, "next", value);
        }
      }, {
        key: "error",
        value: function error(value) {
          onNotify(this._subscription, "error", value);
        }
      }, {
        key: "complete",
        value: function complete() {
          onNotify(this._subscription, "complete");
        }
      }, {
        key: "closed",
        get: function() {
          return this._subscription._state === "closed";
        }
      }]);
      return SubscriptionObserver2;
    }();
    var Observable2 = function() {
      function Observable3(subscriber) {
        _classCallCheck(this, Observable3);
        if (!(this instanceof Observable3))
          throw new TypeError("Observable cannot be called as a function");
        if (typeof subscriber !== "function")
          throw new TypeError("Observable initializer must be a function");
        this._subscriber = subscriber;
      }
      _createClass(Observable3, [{
        key: "subscribe",
        value: function subscribe(observer) {
          if (typeof observer !== "object" || observer === null) {
            observer = {
              next: observer,
              error: arguments[1],
              complete: arguments[2]
            };
          }
          return new Subscription(observer, this._subscriber);
        }
      }, {
        key: "forEach",
        value: function forEach(fn) {
          var _this = this;
          return new Promise(function(resolve, reject) {
            if (typeof fn !== "function") {
              reject(new TypeError(fn + " is not a function"));
              return;
            }
            function done() {
              subscription.unsubscribe();
              resolve();
            }
            var subscription = _this.subscribe({
              next: function(value) {
                try {
                  fn(value, done);
                } catch (e) {
                  reject(e);
                  subscription.unsubscribe();
                }
              },
              error: reject,
              complete: resolve
            });
          });
        }
      }, {
        key: "map",
        value: function map(fn) {
          var _this2 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return _this2.subscribe({
              next: function(value) {
                try {
                  value = fn(value);
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "filter",
        value: function filter(fn) {
          var _this3 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return _this3.subscribe({
              next: function(value) {
                try {
                  if (!fn(value))
                    return;
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "reduce",
        value: function reduce(fn) {
          var _this4 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          var hasSeed = arguments.length > 1;
          var hasValue = false;
          var seed = arguments[1];
          var acc = seed;
          return new C(function(observer) {
            return _this4.subscribe({
              next: function(value) {
                var first = !hasValue;
                hasValue = true;
                if (!first || hasSeed) {
                  try {
                    acc = fn(acc, value);
                  } catch (e) {
                    return observer.error(e);
                  }
                } else {
                  acc = value;
                }
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                if (!hasValue && !hasSeed)
                  return observer.error(new TypeError("Cannot reduce an empty sequence"));
                observer.next(acc);
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "concat",
        value: function concat() {
          var _this5 = this;
          for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
            sources[_key] = arguments[_key];
          }
          var C = getSpecies(this);
          return new C(function(observer) {
            var subscription;
            var index = 0;
            function startNext(next) {
              subscription = next.subscribe({
                next: function(v) {
                  observer.next(v);
                },
                error: function(e) {
                  observer.error(e);
                },
                complete: function() {
                  if (index === sources.length) {
                    subscription = void 0;
                    observer.complete();
                  } else {
                    startNext(C.from(sources[index++]));
                  }
                }
              });
            }
            startNext(_this5);
            return function() {
              if (subscription) {
                subscription.unsubscribe();
                subscription = void 0;
              }
            };
          });
        }
      }, {
        key: "flatMap",
        value: function flatMap(fn) {
          var _this6 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            var subscriptions = [];
            var outer = _this6.subscribe({
              next: function(value) {
                if (fn) {
                  try {
                    value = fn(value);
                  } catch (e) {
                    return observer.error(e);
                  }
                }
                var inner = C.from(value).subscribe({
                  next: function(value2) {
                    observer.next(value2);
                  },
                  error: function(e) {
                    observer.error(e);
                  },
                  complete: function() {
                    var i = subscriptions.indexOf(inner);
                    if (i >= 0)
                      subscriptions.splice(i, 1);
                    completeIfDone();
                  }
                });
                subscriptions.push(inner);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                completeIfDone();
              }
            });
            function completeIfDone() {
              if (outer.closed && subscriptions.length === 0)
                observer.complete();
            }
            return function() {
              subscriptions.forEach(function(s) {
                return s.unsubscribe();
              });
              outer.unsubscribe();
            };
          });
        }
      }, {
        key: SymbolObservable,
        value: function() {
          return this;
        }
      }], [{
        key: "from",
        value: function from(x) {
          var C = typeof this === "function" ? this : Observable3;
          if (x == null)
            throw new TypeError(x + " is not an object");
          var method = getMethod(x, SymbolObservable);
          if (method) {
            var observable = method.call(x);
            if (Object(observable) !== observable)
              throw new TypeError(observable + " is not an object");
            if (isObservable(observable) && observable.constructor === C)
              return observable;
            return new C(function(observer) {
              return observable.subscribe(observer);
            });
          }
          if (hasSymbol2("iterator")) {
            method = getMethod(x, SymbolIterator);
            if (method) {
              return new C(function(observer) {
                enqueue(function() {
                  if (observer.closed)
                    return;
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = void 0;
                  try {
                    for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var _item = _step.value;
                      observer.next(_item);
                      if (observer.closed)
                        return;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                  observer.complete();
                });
              });
            }
          }
          if (Array.isArray(x)) {
            return new C(function(observer) {
              enqueue(function() {
                if (observer.closed)
                  return;
                for (var i = 0; i < x.length; ++i) {
                  observer.next(x[i]);
                  if (observer.closed)
                    return;
                }
                observer.complete();
              });
            });
          }
          throw new TypeError(x + " is not observable");
        }
      }, {
        key: "of",
        value: function of() {
          for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            items[_key2] = arguments[_key2];
          }
          var C = typeof this === "function" ? this : Observable3;
          return new C(function(observer) {
            enqueue(function() {
              if (observer.closed)
                return;
              for (var i = 0; i < items.length; ++i) {
                observer.next(items[i]);
                if (observer.closed)
                  return;
              }
              observer.complete();
            });
          });
        }
      }, {
        key: SymbolSpecies,
        get: function() {
          return this;
        }
      }]);
      return Observable3;
    }();
    exports.Observable = Observable2;
    if (hasSymbols()) {
      Object.defineProperty(Observable2, Symbol("extensions"), {
        value: {
          symbol: SymbolObservable,
          hostReportError
        },
        configurable: true
      });
    }
  }
});

// node_modules/zen-observable/index.js
var require_zen_observable = __commonJS({
  "node_modules/zen-observable/index.js"(exports, module) {
    module.exports = require_Observable().Observable;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js
var require_isEmptyData = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/constants.js
var require_constants2 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
    exports.SHA_256_HASH = { name: "SHA-256" };
    exports.SHA_256_HMAC_ALGO = {
      name: "HMAC",
      hash: exports.SHA_256_HASH
    };
    exports.EMPTY_DATA_SHA_256 = new Uint8Array([
      227,
      176,
      196,
      66,
      152,
      252,
      28,
      20,
      154,
      251,
      244,
      200,
      153,
      111,
      185,
      36,
      39,
      174,
      65,
      228,
      100,
      155,
      147,
      76,
      164,
      149,
      153,
      27,
      120,
      82,
      184,
      85
    ]);
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js
var fromUtf84, toUtf84;
var init_pureJs2 = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js"() {
    fromUtf84 = function(input) {
      var bytes = [];
      for (var i = 0, len = input.length; i < len; i++) {
        var value = input.charCodeAt(i);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i + 1) & 64512) === 56320) {
          var surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    toUtf84 = function(input) {
      var decoded = "";
      for (var i = 0, len = input.length; i < len; i++) {
        var byte = input[i];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          var nextByte = input[++i];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          var surrogatePair = [byte, input[++i], input[++i], input[++i]];
          var encoded = "%" + surrogatePair.map(function(byteValue) {
            return byteValue.toString(16);
          }).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
        }
      }
      return decoded;
    };
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js
function fromUtf85(input) {
  return new TextEncoder().encode(input);
}
function toUtf85(input) {
  return new TextDecoder("utf-8").decode(input);
}
var init_whatwgEncodingApi2 = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js"() {
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js
var es_exports2 = {};
__export(es_exports2, {
  fromUtf8: () => fromUtf86,
  toUtf8: () => toUtf86
});
var fromUtf86, toUtf86;
var init_es2 = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js"() {
    init_pureJs2();
    init_whatwgEncodingApi2();
    fromUtf86 = function(input) {
      return typeof TextEncoder === "function" ? fromUtf85(input) : fromUtf84(input);
    };
    toUtf86 = function(input) {
      return typeof TextDecoder === "function" ? toUtf85(input) : toUtf84(input);
    };
  }
});

// node_modules/@aws-sdk/util-locate-window/dist-es/index.js
var dist_es_exports = {};
__export(dist_es_exports, {
  locateWindow: () => locateWindow
});
function locateWindow() {
  if (typeof window !== "undefined") {
    return window;
  } else if (typeof self !== "undefined") {
    return self;
  }
  return fallbackWindow;
}
var fallbackWindow;
var init_dist_es = __esm({
  "node_modules/@aws-sdk/util-locate-window/dist-es/index.js"() {
    fallbackWindow = {};
  }
});

// node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js
var require_ie11Sha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var isEmptyData_1 = require_isEmptyData();
    var constants_1 = require_constants2();
    var util_utf8_browser_1 = (init_es2(), __toCommonJS(es_exports2));
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2563 = function() {
      function Sha2564(secret) {
        if (secret) {
          this.operation = getKeyPromise(secret).then(function(keyData) {
            return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
          });
          this.operation.catch(function() {
          });
        } else {
          this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
        }
      }
      Sha2564.prototype.update = function(toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) {
          return;
        }
        this.operation = this.operation.then(function(operation) {
          operation.onerror = function() {
            _this.operation = Promise.reject(new Error("Error encountered updating hash"));
          };
          operation.process(toArrayBufferView(toHash));
          return operation;
        });
        this.operation.catch(function() {
        });
      };
      Sha2564.prototype.digest = function() {
        return this.operation.then(function(operation) {
          return new Promise(function(resolve, reject) {
            operation.onerror = function() {
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.oncomplete = function() {
              if (operation.result) {
                resolve(new Uint8Array(operation.result));
              }
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.finish();
          });
        });
      };
      return Sha2564;
    }();
    exports.Sha256 = Sha2563;
    function getKeyPromise(secret) {
      return new Promise(function(resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]);
        keyOperation.oncomplete = function() {
          if (keyOperation.result) {
            resolve(keyOperation.result);
          }
          reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
          reject(new Error("ImportKey failed to import key."));
        };
      });
    }
    function toArrayBufferView(data) {
      if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
  }
});

// node_modules/@aws-crypto/util/build/convertToBuffer.js
var require_convertToBuffer = __commonJS({
  "node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToBuffer = void 0;
    var util_utf8_browser_1 = (init_es2(), __toCommonJS(es_exports2));
    var fromUtf87 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf87(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports.convertToBuffer = convertToBuffer;
  }
});

// node_modules/@aws-crypto/util/build/isEmptyData.js
var require_isEmptyData2 = __commonJS({
  "node_modules/@aws-crypto/util/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/util/build/numToUint8.js
var require_numToUint8 = __commonJS({
  "node_modules/@aws-crypto/util/build/numToUint8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports.numToUint8 = numToUint8;
  }
});

// node_modules/@aws-crypto/util/build/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS({
  "node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// node_modules/@aws-crypto/util/build/index.js
var require_build2 = __commonJS({
  "node_modules/@aws-crypto/util/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData2();
    Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js
var require_webCryptoSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var util_1 = require_build2();
    var constants_1 = require_constants2();
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2563 = function() {
      function Sha2564(secret) {
        this.toHash = new Uint8Array(0);
        if (secret !== void 0) {
          this.key = new Promise(function(resolve, reject) {
            (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]).then(resolve, reject);
          });
          this.key.catch(function() {
          });
        }
      }
      Sha2564.prototype.update = function(data) {
        if ((0, util_1.isEmptyData)(data)) {
          return;
        }
        var update = (0, util_1.convertToBuffer)(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
      };
      Sha2564.prototype.digest = function() {
        var _this = this;
        if (this.key) {
          return this.key.then(function(key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
              return new Uint8Array(data);
            });
          });
        }
        if ((0, util_1.isEmptyData)(this.toHash)) {
          return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
        }
        return Promise.resolve().then(function() {
          return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
        }).then(function(data) {
          return Promise.resolve(new Uint8Array(data));
        });
      };
      return Sha2564;
    }();
    exports.Sha256 = Sha2563;
  }
});

// node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/constants.js
var require_constants3 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
    exports.BLOCK_SIZE = 64;
    exports.DIGEST_LENGTH = 32;
    exports.KEY = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    exports.INIT = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  }
});

// node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/RawSha256.js
var require_RawSha2562 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/RawSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RawSha256 = void 0;
    var constants_1 = require_constants3();
    var RawSha256 = function() {
      function RawSha2562() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
      }
      RawSha2562.prototype.update = function(data) {
        if (this.finished) {
          throw new Error("Attempted to update an already finished hash.");
        }
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
          throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        while (byteLength > 0) {
          this.buffer[this.bufferLength++] = data[position++];
          byteLength--;
          if (this.bufferLength === constants_1.BLOCK_SIZE) {
            this.hashBuffer();
            this.bufferLength = 0;
          }
        }
      };
      RawSha2562.prototype.digest = function() {
        if (!this.finished) {
          var bitsHashed = this.bytesHashed * 8;
          var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
          var undecoratedLength = this.bufferLength;
          bufferView.setUint8(this.bufferLength++, 128);
          if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
            for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {
              bufferView.setUint8(i, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
          }
          for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {
            bufferView.setUint8(i, 0);
          }
          bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
          bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
          this.hashBuffer();
          this.finished = true;
        }
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for (var i = 0; i < 8; i++) {
          out[i * 4] = this.state[i] >>> 24 & 255;
          out[i * 4 + 1] = this.state[i] >>> 16 & 255;
          out[i * 4 + 2] = this.state[i] >>> 8 & 255;
          out[i * 4 + 3] = this.state[i] >>> 0 & 255;
        }
        return out;
      };
      RawSha2562.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
          if (i < 16) {
            this.temp[i] = (buffer[i * 4] & 255) << 24 | (buffer[i * 4 + 1] & 255) << 16 | (buffer[i * 4 + 2] & 255) << 8 | buffer[i * 4 + 3] & 255;
          } else {
            var u = this.temp[i - 2];
            var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
            u = this.temp[i - 15];
            var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
            this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
          }
          var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;
          var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
          state7 = state6;
          state6 = state5;
          state5 = state4;
          state4 = state3 + t1 | 0;
          state3 = state2;
          state2 = state1;
          state1 = state0;
          state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
      };
      return RawSha2562;
    }();
    exports.RawSha256 = RawSha256;
  }
});

// node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/jsSha256.js
var require_jsSha2562 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/jsSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var tslib_1 = require_tslib();
    var constants_1 = require_constants3();
    var RawSha256_1 = require_RawSha2562();
    var util_1 = require_build2();
    var Sha2563 = function() {
      function Sha2564(secret) {
        this.hash = new RawSha256_1.RawSha256();
        if (secret) {
          this.outer = new RawSha256_1.RawSha256();
          var inner = bufferFromSecret(secret);
          var outer = new Uint8Array(constants_1.BLOCK_SIZE);
          outer.set(inner);
          for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
            inner[i] ^= 54;
            outer[i] ^= 92;
          }
          this.hash.update(inner);
          this.outer.update(outer);
          for (var i = 0; i < inner.byteLength; i++) {
            inner[i] = 0;
          }
        }
      }
      Sha2564.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash) || this.error) {
          return;
        }
        try {
          this.hash.update((0, util_1.convertToBuffer)(toHash));
        } catch (e) {
          this.error = e;
        }
      };
      Sha2564.prototype.digestSync = function() {
        if (this.error) {
          throw this.error;
        }
        if (this.outer) {
          if (!this.outer.finished) {
            this.outer.update(this.hash.digest());
          }
          return this.outer.digest();
        }
        return this.hash.digest();
      };
      Sha2564.prototype.digest = function() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
          return (0, tslib_1.__generator)(this, function(_a) {
            return [2, this.digestSync()];
          });
        });
      };
      return Sha2564;
    }();
    exports.Sha256 = Sha2563;
    function bufferFromSecret(secret) {
      var input = (0, util_1.convertToBuffer)(secret);
      if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
      }
      var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
      buffer.set(input);
      return buffer;
    }
  }
});

// node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/index.js
var require_build3 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    (0, tslib_1.__exportStar)(require_jsSha2562(), exports);
  }
});

// node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js
var require_supportsWebCrypto = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
    var tslib_1 = require_tslib();
    var subtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function supportsWebCrypto(window2) {
      if (supportsSecureRandom(window2) && typeof window2.crypto.subtle === "object") {
        var subtle = window2.crypto.subtle;
        return supportsSubtleCrypto(subtle);
      }
      return false;
    }
    exports.supportsWebCrypto = supportsWebCrypto;
    function supportsSecureRandom(window2) {
      if (typeof window2 === "object" && typeof window2.crypto === "object") {
        var getRandomValues = window2.crypto.getRandomValues;
        return typeof getRandomValues === "function";
      }
      return false;
    }
    exports.supportsSecureRandom = supportsSecureRandom;
    function supportsSubtleCrypto(subtle) {
      return subtle && subtleCryptoMethods.every(function(methodName) {
        return typeof subtle[methodName] === "function";
      });
    }
    exports.supportsSubtleCrypto = supportsSubtleCrypto;
    function supportsZeroByteGCM(subtle) {
      return tslib_1.__awaiter(this, void 0, void 0, function() {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!supportsSubtleCrypto(subtle))
                return [2, false];
              _b.label = 1;
            case 1:
              _b.trys.push([1, 4, , 5]);
              return [4, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
            case 2:
              key = _b.sent();
              return [4, subtle.encrypt({
                name: "AES-GCM",
                iv: new Uint8Array(Array(12)),
                additionalData: new Uint8Array(Array(16)),
                tagLength: 128
              }, key, new Uint8Array(0))];
            case 3:
              zeroByteAuthTag = _b.sent();
              return [2, zeroByteAuthTag.byteLength === 16];
            case 4:
              _a = _b.sent();
              return [2, false];
            case 5:
              return [2];
          }
        });
      });
    }
    exports.supportsZeroByteGCM = supportsZeroByteGCM;
  }
});

// node_modules/@aws-crypto/supports-web-crypto/build/index.js
var require_build4 = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_supportsWebCrypto(), exports);
  }
});

// node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js
var require_CryptoOperation = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/Key.js
var require_Key = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/Key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js
var require_KeyOperation = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js
var require_MsSubtleCrypto = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/MsWindow.js
var require_MsWindow = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/MsWindow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMsWindow = void 0;
    var msSubtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function quacksLikeAnMsWindow(window2) {
      return "MSInputMethodContext" in window2 && "msCrypto" in window2;
    }
    function isMsWindow(window2) {
      if (quacksLikeAnMsWindow(window2) && window2.msCrypto.subtle !== void 0) {
        var _a = window2.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function(methodName) {
          return subtle_1[methodName];
        }).concat(getRandomValues).every(function(method) {
          return typeof method === "function";
        });
      }
      return false;
    }
    exports.isMsWindow = isMsWindow;
  }
});

// node_modules/@aws-crypto/ie11-detection/build/index.js
var require_build5 = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_CryptoOperation(), exports);
    tslib_1.__exportStar(require_Key(), exports);
    tslib_1.__exportStar(require_KeyOperation(), exports);
    tslib_1.__exportStar(require_MsSubtleCrypto(), exports);
    tslib_1.__exportStar(require_MsWindow(), exports);
  }
});

// node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js
var require_crossPlatformSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var ie11Sha256_1 = require_ie11Sha256();
    var webCryptoSha256_1 = require_webCryptoSha256();
    var sha256_js_1 = require_build3();
    var supports_web_crypto_1 = require_build4();
    var ie11_detection_1 = require_build5();
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2563 = function() {
      function Sha2564(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new webCryptoSha256_1.Sha256(secret);
        } else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new ie11Sha256_1.Sha256(secret);
        } else {
          this.hash = new sha256_js_1.Sha256(secret);
        }
      }
      Sha2564.prototype.update = function(data, encoding) {
        this.hash.update(data, encoding);
      };
      Sha2564.prototype.digest = function() {
        return this.hash.digest();
      };
      return Sha2564;
    }();
    exports.Sha256 = Sha2563;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/index.js
var require_build6 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
    var tslib_1 = require_tslib();
    (0, tslib_1.__exportStar)(require_crossPlatformSha256(), exports);
    var ie11Sha256_1 = require_ie11Sha256();
    Object.defineProperty(exports, "Ie11Sha256", { enumerable: true, get: function() {
      return ie11Sha256_1.Sha256;
    } });
    var webCryptoSha256_1 = require_webCryptoSha256();
    Object.defineProperty(exports, "WebCryptoSha256", { enumerable: true, get: function() {
      return webCryptoSha256_1.Sha256;
    } });
  }
});

// node_modules/@aws-sdk/middleware-retry/node_modules/uuid/lib/rng-browser.js
var require_rng_browser = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/node_modules/uuid/lib/rng-browser.js"(exports, module) {
    var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (getRandomValues) {
      rnds8 = new Uint8Array(16);
      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      rnds = new Array(16);
      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 3) === 0)
            r = Math.random() * 4294967296;
          rnds[i] = r >>> ((i & 3) << 3) & 255;
        }
        return rnds;
      };
    }
    var rnds8;
    var rnds;
  }
});

// node_modules/@aws-sdk/middleware-retry/node_modules/uuid/lib/bytesToUuid.js
var require_bytesToUuid = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/node_modules/uuid/lib/bytesToUuid.js"(exports, module) {
    var byteToHex = [];
    for (i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 256).toString(16).substr(1);
    }
    var i;
    function bytesToUuid(buf, offset) {
      var i2 = offset || 0;
      var bth = byteToHex;
      return [
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]]
      ].join("");
    }
    module.exports = bytesToUuid;
  }
});

// node_modules/@aws-sdk/middleware-retry/node_modules/uuid/v1.js
var require_v1 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/node_modules/uuid/v1.js"(exports, module) {
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];
      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        var seedBytes = rng();
        if (node == null) {
          node = _nodeId = [
            seedBytes[0] | 1,
            seedBytes[1],
            seedBytes[2],
            seedBytes[3],
            seedBytes[4],
            seedBytes[5]
          ];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      var msecs = options.msecs !== void 0 ? options.msecs : new Date().getTime();
      var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      var tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf ? buf : bytesToUuid(b);
    }
    module.exports = v1;
  }
});

// node_modules/@aws-sdk/middleware-retry/node_modules/uuid/v4.js
var require_v4 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/node_modules/uuid/v4.js"(exports, module) {
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    function v42(options, buf, offset) {
      var i = buf && offset || 0;
      if (typeof options == "string") {
        buf = options === "binary" ? new Array(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || rng)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }
      return buf || bytesToUuid(rnds);
    }
    module.exports = v42;
  }
});

// node_modules/@aws-sdk/middleware-retry/node_modules/uuid/index.js
var require_uuid = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/node_modules/uuid/index.js"(exports, module) {
    var v1 = require_v1();
    var v42 = require_v4();
    var uuid = v42;
    uuid.v1 = v1;
    uuid.v4 = v42;
    module.exports = uuid;
  }
});

// node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse4;
    exports.serialize = serialize2;
    var decode = decodeURIComponent;
    var encode = encodeURIComponent;
    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse4(str, options) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var opt = options || {};
      var pairs = str.split(";");
      var dec = opt.decode || decode;
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        var index = pair.indexOf("=");
        if (index < 0) {
          continue;
        }
        var key = pair.substring(0, index).trim();
        if (void 0 == obj[key]) {
          var val = pair.substring(index + 1, pair.length).trim();
          if (val[0] === '"') {
            val = val.slice(1, -1);
          }
          obj[key] = tryDecode(val, dec);
        }
      }
      return obj;
    }
    function serialize2(name, val, options) {
      var opt = options || {};
      var enc = opt.encode || encode;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!fieldContentRegExp.test(name)) {
        throw new TypeError("argument name is invalid");
      }
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name + "=" + value;
      if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        if (typeof opt.expires.toUTCString !== "function") {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + opt.expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e) {
        return str;
      }
    }
  }
});

// node_modules/@aws-amplify/core/lib-esm/Util/Constants.js
var AWS_CLOUDWATCH_BASE_BUFFER_SIZE = 26;
var AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE = 1048576;
var AWS_CLOUDWATCH_MAX_EVENT_SIZE = 256e3;
var AWS_CLOUDWATCH_CATEGORY = "Logging";
var AWS_CLOUDWATCH_PROVIDER_NAME = "AWSCloudWatch";
var NO_CREDS_ERROR_STRING = "No credentials";
var RETRY_ERROR_CODES = [
  "ResourceNotFoundException",
  "InvalidSequenceTokenException"
];

// node_modules/@aws-amplify/core/lib-esm/Logger/ConsoleLogger.js
var __values = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread = function() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
};
var LOG_LEVELS = {
  VERBOSE: 1,
  DEBUG: 2,
  INFO: 3,
  WARN: 4,
  ERROR: 5
};
var LOG_TYPE;
(function(LOG_TYPE2) {
  LOG_TYPE2["DEBUG"] = "DEBUG";
  LOG_TYPE2["ERROR"] = "ERROR";
  LOG_TYPE2["INFO"] = "INFO";
  LOG_TYPE2["WARN"] = "WARN";
  LOG_TYPE2["VERBOSE"] = "VERBOSE";
})(LOG_TYPE || (LOG_TYPE = {}));
var ConsoleLogger = function() {
  function ConsoleLogger2(name, level) {
    if (level === void 0) {
      level = LOG_TYPE.WARN;
    }
    this.name = name;
    this.level = level;
    this._pluggables = [];
  }
  ConsoleLogger2.prototype._padding = function(n) {
    return n < 10 ? "0" + n : "" + n;
  };
  ConsoleLogger2.prototype._ts = function() {
    var dt = new Date();
    return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(":") + "." + dt.getMilliseconds();
  };
  ConsoleLogger2.prototype.configure = function(config) {
    if (!config)
      return this._config;
    this._config = config;
    return this._config;
  };
  ConsoleLogger2.prototype._log = function(type) {
    var e_1, _a;
    var msg = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      msg[_i - 1] = arguments[_i];
    }
    var logger_level_name = this.level;
    if (ConsoleLogger2.LOG_LEVEL) {
      logger_level_name = ConsoleLogger2.LOG_LEVEL;
    }
    if (typeof window !== "undefined" && window.LOG_LEVEL) {
      logger_level_name = window.LOG_LEVEL;
    }
    var logger_level = LOG_LEVELS[logger_level_name];
    var type_level = LOG_LEVELS[type];
    if (!(type_level >= logger_level)) {
      return;
    }
    var log = console.log.bind(console);
    if (type === LOG_TYPE.ERROR && console.error) {
      log = console.error.bind(console);
    }
    if (type === LOG_TYPE.WARN && console.warn) {
      log = console.warn.bind(console);
    }
    var prefix = "[" + type + "] " + this._ts() + " " + this.name;
    var message = "";
    if (msg.length === 1 && typeof msg[0] === "string") {
      message = prefix + " - " + msg[0];
      log(message);
    } else if (msg.length === 1) {
      message = prefix + " " + msg[0];
      log(prefix, msg[0]);
    } else if (typeof msg[0] === "string") {
      var obj = msg.slice(1);
      if (obj.length === 1) {
        obj = obj[0];
      }
      message = prefix + " - " + msg[0] + " " + obj;
      log(prefix + " - " + msg[0], obj);
    } else {
      message = prefix + " " + msg;
      log(prefix, msg);
    }
    try {
      for (var _b = __values(this._pluggables), _c = _b.next(); !_c.done; _c = _b.next()) {
        var plugin = _c.value;
        var logEvent = { message, timestamp: Date.now() };
        plugin.pushLogs([logEvent]);
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  };
  ConsoleLogger2.prototype.log = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spread([LOG_TYPE.INFO], msg));
  };
  ConsoleLogger2.prototype.info = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spread([LOG_TYPE.INFO], msg));
  };
  ConsoleLogger2.prototype.warn = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spread([LOG_TYPE.WARN], msg));
  };
  ConsoleLogger2.prototype.error = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spread([LOG_TYPE.ERROR], msg));
  };
  ConsoleLogger2.prototype.debug = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spread([LOG_TYPE.DEBUG], msg));
  };
  ConsoleLogger2.prototype.verbose = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spread([LOG_TYPE.VERBOSE], msg));
  };
  ConsoleLogger2.prototype.addPluggable = function(pluggable) {
    if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {
      this._pluggables.push(pluggable);
      pluggable.configure(this._config);
    }
  };
  ConsoleLogger2.prototype.listPluggables = function() {
    return this._pluggables;
  };
  ConsoleLogger2.LOG_LEVEL = null;
  return ConsoleLogger2;
}();

// node_modules/@aws-amplify/core/lib-esm/Amplify.js
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var logger = new ConsoleLogger("Amplify");
var AmplifyClass = function() {
  function AmplifyClass2() {
    this._components = [];
    this._config = {};
    this._modules = {};
    this.Auth = null;
    this.Analytics = null;
    this.API = null;
    this.Credentials = null;
    this.Storage = null;
    this.I18n = null;
    this.Cache = null;
    this.PubSub = null;
    this.Interactions = null;
    this.Pushnotification = null;
    this.UI = null;
    this.XR = null;
    this.Predictions = null;
    this.DataStore = null;
    this.Geo = null;
    this.Logger = ConsoleLogger;
    this.ServiceWorker = null;
  }
  AmplifyClass2.prototype.register = function(comp) {
    logger.debug("component registered in amplify", comp);
    this._components.push(comp);
    if (typeof comp.getModuleName === "function") {
      this._modules[comp.getModuleName()] = comp;
      this[comp.getModuleName()] = comp;
    } else {
      logger.debug("no getModuleName method for component", comp);
    }
    comp.configure(this._config);
  };
  AmplifyClass2.prototype.configure = function(config) {
    var _this = this;
    if (!config)
      return this._config;
    this._config = Object.assign(this._config, config);
    logger.debug("amplify config", this._config);
    Object.entries(this._modules).forEach(function(_a) {
      var _b = __read2(_a, 2), Name = _b[0], comp = _b[1];
      Object.keys(comp).forEach(function(property) {
        if (_this._modules[property]) {
          comp[property] = _this._modules[property];
        }
      });
    });
    this._components.map(function(comp) {
      comp.configure(_this._config);
    });
    return this._config;
  };
  AmplifyClass2.prototype.addPluggable = function(pluggable) {
    if (pluggable && pluggable["getCategory"] && typeof pluggable["getCategory"] === "function") {
      this._components.map(function(comp) {
        if (comp["addPluggable"] && typeof comp["addPluggable"] === "function") {
          comp.addPluggable(pluggable);
        }
      });
    }
  };
  return AmplifyClass2;
}();
var Amplify = new AmplifyClass();

// node_modules/@aws-amplify/core/lib-esm/Platform/version.js
var version = "4.7.14";

// node_modules/@aws-amplify/core/lib-esm/Platform/index.js
var BASE_USER_AGENT = "aws-amplify/" + version;
var Platform = {
  userAgent: BASE_USER_AGENT + " js",
  product: "",
  navigator: null,
  isReactNative: false
};
if (typeof navigator !== "undefined" && navigator.product) {
  Platform.product = navigator.product || "";
  Platform.navigator = navigator || null;
  switch (navigator.product) {
    case "ReactNative":
      Platform.userAgent = BASE_USER_AGENT + " react-native";
      Platform.isReactNative = true;
      break;
    default:
      Platform.userAgent = BASE_USER_AGENT + " js";
      Platform.isReactNative = false;
      break;
  }
}
var getAmplifyUserAgent = function(content) {
  return "" + Platform.userAgent + (content ? content : "");
};

// node_modules/@aws-amplify/core/lib-esm/ClientDevice/browser.js
var logger2 = new ConsoleLogger("ClientDevice_Browser");
function clientInfo() {
  if (typeof window === "undefined") {
    return {};
  }
  return browserClientInfo();
}
function browserClientInfo() {
  if (typeof window === "undefined") {
    logger2.warn("No window object available to get browser client info");
    return {};
  }
  var nav = window.navigator;
  if (!nav) {
    logger2.warn("No navigator object available to get browser client info");
    return {};
  }
  var platform = nav.platform, product = nav.product, vendor = nav.vendor, userAgent = nav.userAgent, language = nav.language;
  var type = browserType(userAgent);
  var timezone = browserTimezone();
  return {
    platform,
    make: product || vendor,
    model: type.type,
    version: type.version,
    appVersion: [type.type, type.version].join("/"),
    language,
    timezone
  };
}
function dimension() {
  if (typeof window === "undefined") {
    logger2.warn("No window object available to get browser client info");
    return { width: 320, height: 320 };
  }
  return {
    width: window.innerWidth,
    height: window.innerHeight
  };
}
function browserTimezone() {
  var tzMatch = /\(([A-Za-z\s].*)\)/.exec(new Date().toString());
  return tzMatch ? tzMatch[1] || "" : "";
}
function browserType(userAgent) {
  var operaMatch = /.+(Opera[\s[A-Z]*|OPR[\sA-Z]*)\/([0-9\.]+).*/i.exec(userAgent);
  if (operaMatch) {
    return { type: operaMatch[1], version: operaMatch[2] };
  }
  var ieMatch = /.+(Trident|Edge)\/([0-9\.]+).*/i.exec(userAgent);
  if (ieMatch) {
    return { type: ieMatch[1], version: ieMatch[2] };
  }
  var cfMatch = /.+(Chrome|Firefox|FxiOS)\/([0-9\.]+).*/i.exec(userAgent);
  if (cfMatch) {
    return { type: cfMatch[1], version: cfMatch[2] };
  }
  var sMatch = /.+(Safari)\/([0-9\.]+).*/i.exec(userAgent);
  if (sMatch) {
    return { type: sMatch[1], version: sMatch[2] };
  }
  var awkMatch = /.+(AppleWebKit)\/([0-9\.]+).*/i.exec(userAgent);
  if (awkMatch) {
    return { type: awkMatch[1], version: awkMatch[2] };
  }
  var anyMatch = /.*([A-Z]+)\/([0-9\.]+).*/i.exec(userAgent);
  if (anyMatch) {
    return { type: anyMatch[1], version: anyMatch[2] };
  }
  return { type: "", version: "" };
}

// node_modules/@aws-amplify/core/lib-esm/ClientDevice/index.js
var ClientDevice = function() {
  function ClientDevice2() {
  }
  ClientDevice2.clientInfo = function() {
    return clientInfo();
  };
  ClientDevice2.dimension = function() {
    return dimension();
  };
  return ClientDevice2;
}();

// node_modules/@aws-amplify/core/lib-esm/Errors.js
function missingConfig(name) {
  return new Error("Missing config value of " + name);
}
function invalidParameter(name) {
  return new Error("Invalid parameter value of " + name);
}

// node_modules/@aws-amplify/core/lib-esm/Hub.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __read3 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread2 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read3(arguments[i]));
  return ar;
};
var logger3 = new ConsoleLogger("Hub");
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
function isLegacyCallback(callback) {
  return callback.onHubCapsule !== void 0;
}
var HubClass = function() {
  function HubClass2(name) {
    this.listeners = [];
    this.patterns = [];
    this.protectedChannels = [
      "core",
      "auth",
      "api",
      "analytics",
      "interactions",
      "pubsub",
      "storage",
      "ui",
      "xr"
    ];
    this.name = name;
  }
  HubClass2.prototype.remove = function(channel, listener) {
    if (channel instanceof RegExp) {
      var pattern_1 = this.patterns.find(function(_a) {
        var pattern = _a.pattern;
        return pattern.source === channel.source;
      });
      if (!pattern_1) {
        logger3.warn("No listeners for " + channel);
        return;
      }
      this.patterns = __spread2(this.patterns.filter(function(x) {
        return x !== pattern_1;
      }));
    } else {
      var holder = this.listeners[channel];
      if (!holder) {
        logger3.warn("No listeners for " + channel);
        return;
      }
      this.listeners[channel] = __spread2(holder.filter(function(_a) {
        var callback = _a.callback;
        return callback !== listener;
      }));
    }
  };
  HubClass2.prototype.dispatch = function(channel, payload, source, ampSymbol) {
    if (source === void 0) {
      source = "";
    }
    if (this.protectedChannels.indexOf(channel) > -1) {
      var hasAccess = ampSymbol === AMPLIFY_SYMBOL;
      if (!hasAccess) {
        logger3.warn("WARNING: " + channel + " is protected and dispatching on it can have unintended consequences");
      }
    }
    var capsule = {
      channel,
      payload: __assign({}, payload),
      source,
      patternInfo: []
    };
    try {
      this._toListeners(capsule);
    } catch (e) {
      logger3.error(e);
    }
  };
  HubClass2.prototype.listen = function(channel, callback, listenerName) {
    var _this = this;
    if (listenerName === void 0) {
      listenerName = "noname";
    }
    var cb;
    if (isLegacyCallback(callback)) {
      logger3.warn("WARNING onHubCapsule is Deprecated. Please pass in a callback.");
      cb = callback.onHubCapsule.bind(callback);
    } else if (typeof callback !== "function") {
      throw new Error("No callback supplied to Hub");
    } else {
      cb = callback;
    }
    if (channel instanceof RegExp) {
      this.patterns.push({
        pattern: channel,
        callback: cb
      });
    } else {
      var holder = this.listeners[channel];
      if (!holder) {
        holder = [];
        this.listeners[channel] = holder;
      }
      holder.push({
        name: listenerName,
        callback: cb
      });
    }
    return function() {
      _this.remove(channel, cb);
    };
  };
  HubClass2.prototype._toListeners = function(capsule) {
    var channel = capsule.channel, payload = capsule.payload;
    var holder = this.listeners[channel];
    if (holder) {
      holder.forEach(function(listener) {
        logger3.debug("Dispatching to " + channel + " with ", payload);
        try {
          listener.callback(capsule);
        } catch (e) {
          logger3.error(e);
        }
      });
    }
    if (this.patterns.length > 0) {
      if (!payload.message) {
        logger3.warn("Cannot perform pattern matching without a message key");
        return;
      }
      var payloadStr_1 = payload.message;
      this.patterns.forEach(function(pattern) {
        var match = payloadStr_1.match(pattern.pattern);
        if (match) {
          var _a = __read3(match), groups = _a.slice(1);
          var dispatchingCapsule = __assign(__assign({}, capsule), { patternInfo: groups });
          try {
            pattern.callback(dispatchingCapsule);
          } catch (e) {
            logger3.error(e);
          }
        }
      });
    }
  };
  return HubClass2;
}();
var Hub = new HubClass("__default__");

// node_modules/@aws-amplify/core/lib-esm/I18n/I18n.js
var logger4 = new ConsoleLogger("I18n");
var I18n = function() {
  function I18n3(options) {
    this._options = null;
    this._lang = null;
    this._dict = {};
    this._options = Object.assign({}, options);
    this._lang = this._options.language;
    if (!this._lang && typeof window !== "undefined" && window && window.navigator) {
      this._lang = window.navigator.language;
    }
    logger4.debug(this._lang);
  }
  I18n3.prototype.setLanguage = function(lang) {
    this._lang = lang;
  };
  I18n3.prototype.get = function(key, defVal) {
    if (defVal === void 0) {
      defVal = void 0;
    }
    if (!this._lang) {
      return typeof defVal !== "undefined" ? defVal : key;
    }
    var lang = this._lang;
    var val = this.getByLanguage(key, lang);
    if (val) {
      return val;
    }
    if (lang.indexOf("-") > 0) {
      val = this.getByLanguage(key, lang.split("-")[0]);
    }
    if (val) {
      return val;
    }
    return typeof defVal !== "undefined" ? defVal : key;
  };
  I18n3.prototype.getByLanguage = function(key, language, defVal) {
    if (defVal === void 0) {
      defVal = null;
    }
    if (!language) {
      return defVal;
    }
    var lang_dict = this._dict[language];
    if (!lang_dict) {
      return defVal;
    }
    return lang_dict[key];
  };
  I18n3.prototype.putVocabulariesForLanguage = function(language, vocabularies) {
    var lang_dict = this._dict[language];
    if (!lang_dict) {
      lang_dict = this._dict[language] = {};
    }
    Object.assign(lang_dict, vocabularies);
  };
  I18n3.prototype.putVocabularies = function(vocabularies) {
    var _this = this;
    Object.keys(vocabularies).map(function(key) {
      _this.putVocabulariesForLanguage(key, vocabularies[key]);
    });
  };
  return I18n3;
}();

// node_modules/@aws-amplify/core/lib-esm/I18n/index.js
var logger5 = new ConsoleLogger("I18n");
var _config = null;
var _i18n = null;
var I18n2 = function() {
  function I18n3() {
  }
  I18n3.configure = function(config) {
    logger5.debug("configure I18n");
    if (!config) {
      return _config;
    }
    _config = Object.assign({}, _config, config.I18n || config);
    I18n3.createInstance();
    return _config;
  };
  I18n3.getModuleName = function() {
    return "I18n";
  };
  I18n3.createInstance = function() {
    logger5.debug("create I18n instance");
    if (_i18n) {
      return;
    }
    _i18n = new I18n(_config);
  };
  I18n3.setLanguage = function(lang) {
    I18n3.checkConfig();
    return _i18n.setLanguage(lang);
  };
  I18n3.get = function(key, defVal) {
    if (!I18n3.checkConfig()) {
      return typeof defVal === "undefined" ? key : defVal;
    }
    return _i18n.get(key, defVal);
  };
  I18n3.putVocabulariesForLanguage = function(language, vocabularies) {
    I18n3.checkConfig();
    return _i18n.putVocabulariesForLanguage(language, vocabularies);
  };
  I18n3.putVocabularies = function(vocabularies) {
    I18n3.checkConfig();
    return _i18n.putVocabularies(vocabularies);
  };
  I18n3.checkConfig = function() {
    if (!_i18n) {
      _i18n = new I18n(_config);
    }
    return true;
  };
  return I18n3;
}();
Amplify.register(I18n2);

// node_modules/@aws-amplify/core/lib-esm/JS.js
var MIME_MAP = [
  { type: "text/plain", ext: "txt" },
  { type: "text/html", ext: "html" },
  { type: "text/javascript", ext: "js" },
  { type: "text/css", ext: "css" },
  { type: "text/csv", ext: "csv" },
  { type: "text/yaml", ext: "yml" },
  { type: "text/yaml", ext: "yaml" },
  { type: "text/calendar", ext: "ics" },
  { type: "text/calendar", ext: "ical" },
  { type: "image/apng", ext: "apng" },
  { type: "image/bmp", ext: "bmp" },
  { type: "image/gif", ext: "gif" },
  { type: "image/x-icon", ext: "ico" },
  { type: "image/x-icon", ext: "cur" },
  { type: "image/jpeg", ext: "jpg" },
  { type: "image/jpeg", ext: "jpeg" },
  { type: "image/jpeg", ext: "jfif" },
  { type: "image/jpeg", ext: "pjp" },
  { type: "image/jpeg", ext: "pjpeg" },
  { type: "image/png", ext: "png" },
  { type: "image/svg+xml", ext: "svg" },
  { type: "image/tiff", ext: "tif" },
  { type: "image/tiff", ext: "tiff" },
  { type: "image/webp", ext: "webp" },
  { type: "application/json", ext: "json" },
  { type: "application/xml", ext: "xml" },
  { type: "application/x-sh", ext: "sh" },
  { type: "application/zip", ext: "zip" },
  { type: "application/x-rar-compressed", ext: "rar" },
  { type: "application/x-tar", ext: "tar" },
  { type: "application/x-bzip", ext: "bz" },
  { type: "application/x-bzip2", ext: "bz2" },
  { type: "application/pdf", ext: "pdf" },
  { type: "application/java-archive", ext: "jar" },
  { type: "application/msword", ext: "doc" },
  { type: "application/vnd.ms-excel", ext: "xls" },
  { type: "application/vnd.ms-excel", ext: "xlsx" },
  { type: "message/rfc822", ext: "eml" }
];
var isEmpty = function(obj) {
  if (obj === void 0) {
    obj = {};
  }
  return Object.keys(obj).length === 0;
};
var sortByField = function(list, field, dir) {
  if (!list || !list.sort) {
    return false;
  }
  var dirX = dir && dir === "desc" ? -1 : 1;
  list.sort(function(a, b) {
    var a_val = a[field];
    var b_val = b[field];
    if (typeof b_val === "undefined") {
      return typeof a_val === "undefined" ? 0 : 1 * dirX;
    }
    if (typeof a_val === "undefined") {
      return -1 * dirX;
    }
    if (a_val < b_val) {
      return -1 * dirX;
    }
    if (a_val > b_val) {
      return 1 * dirX;
    }
    return 0;
  });
  return true;
};
var objectLessAttributes = function(obj, less) {
  var ret = Object.assign({}, obj);
  if (less) {
    if (typeof less === "string") {
      delete ret[less];
    } else {
      less.forEach(function(attr) {
        delete ret[attr];
      });
    }
  }
  return ret;
};
var filenameToContentType = function(filename, defVal) {
  if (defVal === void 0) {
    defVal = "application/octet-stream";
  }
  var name = filename.toLowerCase();
  var filtered = MIME_MAP.filter(function(mime) {
    return name.endsWith("." + mime.ext);
  });
  return filtered.length > 0 ? filtered[0].type : defVal;
};
var isTextFile = function(contentType) {
  var type = contentType.toLowerCase();
  if (type.startsWith("text/")) {
    return true;
  }
  return "application/json" === type || "application/xml" === type || "application/sh" === type;
};
var generateRandomString = function() {
  var result = "";
  var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  for (var i = 32; i > 0; i -= 1) {
    result += chars[Math.floor(Math.random() * chars.length)];
  }
  return result;
};
var makeQuerablePromise = function(promise) {
  if (promise.isResolved)
    return promise;
  var isPending = true;
  var isRejected = false;
  var isFullfilled = false;
  var result = promise.then(function(data) {
    isFullfilled = true;
    isPending = false;
    return data;
  }, function(e) {
    isRejected = true;
    isPending = false;
    throw e;
  });
  result.isFullfilled = function() {
    return isFullfilled;
  };
  result.isPending = function() {
    return isPending;
  };
  result.isRejected = function() {
    return isRejected;
  };
  return result;
};
var isWebWorker = function() {
  if (typeof self === "undefined") {
    return false;
  }
  var selfContext = self;
  return typeof selfContext.WorkerGlobalScope !== "undefined" && self instanceof selfContext.WorkerGlobalScope;
};
var browserOrNode = function() {
  var isBrowser2 = typeof window !== "undefined" && typeof window.document !== "undefined";
  var isNode = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
  return {
    isBrowser: isBrowser2,
    isNode
  };
};
var transferKeyToLowerCase = function(obj, whiteListForItself, whiteListForChildren) {
  if (whiteListForItself === void 0) {
    whiteListForItself = [];
  }
  if (whiteListForChildren === void 0) {
    whiteListForChildren = [];
  }
  if (!isStrictObject(obj))
    return obj;
  var ret = {};
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      var transferedKey = whiteListForItself.includes(key) ? key : key[0].toLowerCase() + key.slice(1);
      ret[transferedKey] = whiteListForChildren.includes(key) ? obj[key] : transferKeyToLowerCase(obj[key], whiteListForItself, whiteListForChildren);
    }
  }
  return ret;
};
var transferKeyToUpperCase = function(obj, whiteListForItself, whiteListForChildren) {
  if (whiteListForItself === void 0) {
    whiteListForItself = [];
  }
  if (whiteListForChildren === void 0) {
    whiteListForChildren = [];
  }
  if (!isStrictObject(obj))
    return obj;
  var ret = {};
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      var transferredKey = whiteListForItself.includes(key) ? key : key[0].toUpperCase() + key.slice(1);
      ret[transferredKey] = whiteListForChildren.includes(key) ? obj[key] : transferKeyToUpperCase(obj[key], whiteListForItself, whiteListForChildren);
    }
  }
  return ret;
};
var isStrictObject = function(obj) {
  return obj instanceof Object && !(obj instanceof Array) && !(obj instanceof Function) && !(obj instanceof Number) && !(obj instanceof String) && !(obj instanceof Boolean);
};
var JS = function() {
  function JS2() {
  }
  JS2.isEmpty = isEmpty;
  JS2.sortByField = sortByField;
  JS2.objectLessAttributes = objectLessAttributes;
  JS2.filenameToContentType = filenameToContentType;
  JS2.isTextFile = isTextFile;
  JS2.generateRandomString = generateRandomString;
  JS2.makeQuerablePromise = makeQuerablePromise;
  JS2.isWebWorker = isWebWorker;
  JS2.browserOrNode = browserOrNode;
  JS2.transferKeyToLowerCase = transferKeyToLowerCase;
  JS2.transferKeyToUpperCase = transferKeyToUpperCase;
  JS2.isStrictObject = isStrictObject;
  return JS2;
}();

// node_modules/@aws-amplify/core/lib-esm/Signer.js
var import_sha256_js = __toESM(require_build());

// node_modules/@aws-sdk/util-hex-encoding/dist/es/index.js
var SHORT_TO_HEX = {};
var HEX_TO_SHORT = {};
for (i = 0; i < 256; i++) {
  encodedByte = i.toString(16).toLowerCase();
  if (encodedByte.length === 1) {
    encodedByte = "0" + encodedByte;
  }
  SHORT_TO_HEX[i] = encodedByte;
  HEX_TO_SHORT[encodedByte] = i;
}
var encodedByte;
var i;
function fromHex(encoded) {
  if (encoded.length % 2 !== 0) {
    throw new Error("Hex encoded strings must have an even number length");
  }
  var out = new Uint8Array(encoded.length / 2);
  for (var i = 0; i < encoded.length; i += 2) {
    var encodedByte = encoded.substr(i, 2).toLowerCase();
    if (encodedByte in HEX_TO_SHORT) {
      out[i / 2] = HEX_TO_SHORT[encodedByte];
    } else {
      throw new Error("Cannot decode unrecognized sequence " + encodedByte + " as hexadecimal");
    }
  }
  return out;
}
function toHex(bytes) {
  var out = "";
  for (var i = 0; i < bytes.byteLength; i++) {
    out += SHORT_TO_HEX[bytes[i]];
  }
  return out;
}

// node_modules/@aws-amplify/core/lib-esm/Signer.js
var import_url = __toESM(require_url());

// node_modules/@aws-amplify/core/lib-esm/Util/Retry.js
var __extends = function() {
  var extendStatics4 = function(d, b) {
    extendStatics4 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics4(d, b);
  };
  return function(d, b) {
    extendStatics4(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read4 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread3 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read4(arguments[i]));
  return ar;
};
var logger6 = new ConsoleLogger("Util");
var NonRetryableError = function(_super) {
  __extends(NonRetryableError2, _super);
  function NonRetryableError2(message) {
    var _this = _super.call(this, message) || this;
    _this.nonRetryable = true;
    return _this;
  }
  return NonRetryableError2;
}(Error);
var isNonRetryableError = function(obj) {
  var key = "nonRetryable";
  return obj && obj[key];
};
function retry(functionToRetry, args, delayFn, onTerminate) {
  return __awaiter(this, void 0, void 0, function() {
    var _this = this;
    return __generator(this, function(_a) {
      if (typeof functionToRetry !== "function") {
        throw Error("functionToRetry must be a function");
      }
      return [2, new Promise(function(resolve, reject) {
        return __awaiter(_this, void 0, void 0, function() {
          var attempt, terminated, timeout, wakeUp, lastError, _loop_1, state_1;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                attempt = 0;
                terminated = false;
                wakeUp = function() {
                };
                onTerminate && onTerminate.then(function() {
                  terminated = true;
                  clearTimeout(timeout);
                  wakeUp();
                });
                _loop_1 = function() {
                  var _a3, _b, err_1, retryIn_1;
                  return __generator(this, function(_c) {
                    switch (_c.label) {
                      case 0:
                        attempt++;
                        logger6.debug(functionToRetry.name + " attempt #" + attempt + " with this vars: " + JSON.stringify(args));
                        _c.label = 1;
                      case 1:
                        _c.trys.push([1, 3, , 7]);
                        _a3 = {};
                        _b = resolve;
                        return [4, functionToRetry.apply(void 0, __spread3(args))];
                      case 2:
                        return [2, (_a3.value = _b.apply(void 0, [_c.sent()]), _a3)];
                      case 3:
                        err_1 = _c.sent();
                        lastError = err_1;
                        logger6.debug("error on " + functionToRetry.name, err_1);
                        if (isNonRetryableError(err_1)) {
                          logger6.debug(functionToRetry.name + " non retryable error", err_1);
                          return [2, { value: reject(err_1) }];
                        }
                        retryIn_1 = delayFn(attempt, args, err_1);
                        logger6.debug(functionToRetry.name + " retrying in " + retryIn_1 + " ms");
                        if (!(retryIn_1 === false || terminated))
                          return [3, 4];
                        return [2, { value: reject(err_1) }];
                      case 4:
                        return [4, new Promise(function(r) {
                          wakeUp = r;
                          timeout = setTimeout(wakeUp, retryIn_1);
                        })];
                      case 5:
                        _c.sent();
                        _c.label = 6;
                      case 6:
                        return [3, 7];
                      case 7:
                        return [2];
                    }
                  });
                };
                _a2.label = 1;
              case 1:
                if (!!terminated)
                  return [3, 3];
                return [5, _loop_1()];
              case 2:
                state_1 = _a2.sent();
                if (typeof state_1 === "object")
                  return [2, state_1.value];
                return [3, 1];
              case 3:
                reject(lastError);
                return [2];
            }
          });
        });
      })];
    });
  });
}
var MAX_DELAY_MS = 5 * 60 * 1e3;
function jitteredBackoff(maxDelayMs) {
  if (maxDelayMs === void 0) {
    maxDelayMs = MAX_DELAY_MS;
  }
  var BASE_TIME_MS = 100;
  var JITTER_FACTOR = 100;
  return function(attempt) {
    var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
    return delay > maxDelayMs ? false : delay;
  };
}
var jitteredExponentialRetry = function(functionToRetry, args, maxDelayMs, onTerminate) {
  if (maxDelayMs === void 0) {
    maxDelayMs = MAX_DELAY_MS;
  }
  return retry(functionToRetry, args, jitteredBackoff(maxDelayMs), onTerminate);
};

// node_modules/@aws-amplify/core/lib-esm/Util/Mutex.js
var Mutex = function() {
  function Mutex2() {
    this._queue = [];
    this._pending = false;
  }
  Mutex2.prototype.isLocked = function() {
    return this._pending;
  };
  Mutex2.prototype.acquire = function() {
    var _this = this;
    var ticket = new Promise(function(resolve) {
      return _this._queue.push(resolve);
    });
    if (!this._pending) {
      this._dispatchNext();
    }
    return ticket;
  };
  Mutex2.prototype.runExclusive = function(callback) {
    return this.acquire().then(function(release) {
      var result;
      try {
        result = callback();
      } catch (e) {
        release();
        throw e;
      }
      return Promise.resolve(result).then(function(x) {
        return release(), x;
      }, function(e) {
        release();
        throw e;
      });
    });
  };
  Mutex2.prototype._dispatchNext = function() {
    if (this._queue.length > 0) {
      this._pending = true;
      this._queue.shift()(this._dispatchNext.bind(this));
    } else {
      this._pending = false;
    }
  };
  return Mutex2;
}();
var Mutex_default = Mutex;

// node_modules/zen-observable-ts/lib/bundle.esm.js
var import_zen_observable = __toESM(require_zen_observable());
var Observable = import_zen_observable.default;
var bundle_esm_default = Observable;

// node_modules/@aws-amplify/core/lib-esm/Util/Reachability.js
var __values2 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var ReachabilityNavigator = function() {
  function ReachabilityNavigator2() {
  }
  ReachabilityNavigator2.prototype.networkMonitor = function(netInfo) {
    if (browserOrNode().isNode) {
      return bundle_esm_default.from([{ online: true }]);
    }
    var globalObj = isWebWorker() ? self : window;
    return new bundle_esm_default(function(observer) {
      observer.next({ online: globalObj.navigator.onLine });
      var notifyOnline = function() {
        return observer.next({ online: true });
      };
      var notifyOffline = function() {
        return observer.next({ online: false });
      };
      globalObj.addEventListener("online", notifyOnline);
      globalObj.addEventListener("offline", notifyOffline);
      ReachabilityNavigator2._observers.push(observer);
      return function() {
        globalObj.removeEventListener("online", notifyOnline);
        globalObj.removeEventListener("offline", notifyOffline);
        ReachabilityNavigator2._observers = ReachabilityNavigator2._observers.filter(function(_observer) {
          return _observer !== observer;
        });
      };
    });
  };
  ReachabilityNavigator2._observerOverride = function(status) {
    var e_1, _a;
    var _loop_1 = function(observer2) {
      if (observer2.closed) {
        ReachabilityNavigator2._observers = ReachabilityNavigator2._observers.filter(function(_observer) {
          return _observer !== observer2;
        });
        return "continue";
      }
      observer2.next(status);
    };
    try {
      for (var _b = __values2(ReachabilityNavigator2._observers), _c = _b.next(); !_c.done; _c = _b.next()) {
        var observer = _c.value;
        _loop_1(observer);
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  };
  ReachabilityNavigator2._observers = [];
  return ReachabilityNavigator2;
}();
var Reachability_default = ReachabilityNavigator;

// node_modules/@aws-amplify/core/lib-esm/Util/DateUtils.js
var __read5 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var FIVE_MINUTES_IN_MS = 1e3 * 60 * 5;
var DateUtils = {
  clockOffset: 0,
  getDateWithClockOffset: function() {
    if (DateUtils.clockOffset) {
      return new Date(new Date().getTime() + DateUtils.clockOffset);
    } else {
      return new Date();
    }
  },
  getClockOffset: function() {
    return DateUtils.clockOffset;
  },
  getHeaderStringFromDate: function(date) {
    if (date === void 0) {
      date = DateUtils.getDateWithClockOffset();
    }
    return date.toISOString().replace(/[:\-]|\.\d{3}/g, "");
  },
  getDateFromHeaderString: function(header) {
    var _a = __read5(header.match(/^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2}).+/), 7), year = _a[1], month = _a[2], day = _a[3], hour = _a[4], minute = _a[5], second = _a[6];
    return new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute), Number(second)));
  },
  isClockSkewed: function(serverDate) {
    return Math.abs(serverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()) >= FIVE_MINUTES_IN_MS;
  },
  isClockSkewError: function(error) {
    if (!error.response || !error.response.headers) {
      return false;
    }
    var headers = error.response.headers;
    return Boolean(["BadRequestException", "InvalidSignatureException"].includes(headers["x-amzn-errortype"]) && (headers.date || headers.Date));
  },
  setClockOffset: function(offset) {
    DateUtils.clockOffset = offset;
  }
};

// node_modules/@aws-amplify/core/lib-esm/Util/StringUtils.js
function urlSafeEncode(str) {
  return str.split("").map(function(char) {
    return char.charCodeAt(0).toString(16).padStart(2, "0");
  }).join("");
}
function urlSafeDecode(hex) {
  return hex.match(/.{2}/g).map(function(char) {
    return String.fromCharCode(parseInt(char, 16));
  }).join("");
}

// node_modules/@aws-amplify/core/lib-esm/Util/BackgroundProcessManager.js
var __extends2 = function() {
  var extendStatics4 = function(d, b) {
    extendStatics4 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics4(d, b);
  };
  return function(d, b) {
    extendStatics4(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __values3 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var BackgroundProcessManager = function() {
  function BackgroundProcessManager2() {
    this._state = BackgroundProcessManagerState.Open;
    this.jobs = /* @__PURE__ */ new Set();
  }
  BackgroundProcessManager2.prototype.add = function(jobOrDescription, optionalDescription) {
    var job;
    var description;
    if (typeof jobOrDescription === "string") {
      job = void 0;
      description = jobOrDescription;
    } else {
      job = jobOrDescription;
      description = optionalDescription;
    }
    var error = this.closedFailure(description);
    if (error)
      return error;
    if (job === void 0) {
      return this.addHook(description);
    } else if (typeof job === "function") {
      return this.addFunction(job, description);
    } else if (job instanceof BackgroundProcessManager2) {
      return this.addManager(job, description);
    } else {
      throw new Error("If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.");
    }
  };
  BackgroundProcessManager2.prototype.addCleaner = function(clean, description) {
    var _this = this;
    var _a = this.addHook(description), resolve = _a.resolve, onTerminate = _a.onTerminate;
    var proxy = function() {
      return __awaiter2(_this, void 0, void 0, function() {
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, clean()];
            case 1:
              _a2.sent();
              resolve();
              return [2];
          }
        });
      });
    };
    onTerminate.then(proxy);
    return proxy;
  };
  BackgroundProcessManager2.prototype.addFunction = function(job, description) {
    var terminate;
    var onTerminate = new Promise(function(resolve) {
      terminate = resolve;
    });
    var jobResult = job(onTerminate);
    if (typeof (jobResult === null || jobResult === void 0 ? void 0 : jobResult.then) === "function") {
      this.registerPromise(jobResult, terminate, description);
    }
    return jobResult;
  };
  BackgroundProcessManager2.prototype.addManager = function(manager, description) {
    var _this = this;
    this.addCleaner(function() {
      return __awaiter2(_this, void 0, void 0, function() {
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, manager.close()];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    }, description);
  };
  BackgroundProcessManager2.prototype.addHook = function(description) {
    var resolve;
    var reject;
    var promise = new Promise(function(res, rej) {
      resolve = res;
      reject = rej;
    });
    var terminate;
    var onTerminate = new Promise(function(resolveTerminate) {
      terminate = resolveTerminate;
    });
    this.registerPromise(promise, terminate, description);
    return {
      resolve,
      reject,
      onTerminate
    };
  };
  BackgroundProcessManager2.prototype.registerPromise = function(promise, terminate, description) {
    var _this = this;
    var jobEntry = { promise, terminate, description };
    this.jobs.add(jobEntry);
    promise.then(function() {
      _this.jobs.delete(jobEntry);
    }).catch(function() {
      _this.jobs.delete(jobEntry);
    });
  };
  Object.defineProperty(BackgroundProcessManager2.prototype, "length", {
    get: function() {
      return this.jobs.size;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BackgroundProcessManager2.prototype, "state", {
    get: function() {
      return this._state;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BackgroundProcessManager2.prototype, "pending", {
    get: function() {
      return Array.from(this.jobs).map(function(job) {
        return job.description;
      });
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BackgroundProcessManager2.prototype, "isOpen", {
    get: function() {
      return this._state === BackgroundProcessManagerState.Open;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BackgroundProcessManager2.prototype, "isClosing", {
    get: function() {
      return this._state === BackgroundProcessManagerState.Closing;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BackgroundProcessManager2.prototype, "isClosed", {
    get: function() {
      return this._state === BackgroundProcessManagerState.Closed;
    },
    enumerable: true,
    configurable: true
  });
  BackgroundProcessManager2.prototype.closedFailure = function(description) {
    if (!this.isOpen) {
      return Promise.reject(new BackgroundManagerNotOpenError([
        "The manager is " + this.state + ".",
        'You tried to add "' + description + '".',
        "Pending jobs: [\n" + this.pending.map(function(t) {
          return "    " + t;
        }).join(",\n") + "\n]"
      ].join("\n")));
    }
  };
  BackgroundProcessManager2.prototype.close = function() {
    return __awaiter2(this, void 0, void 0, function() {
      var _a, _b, job;
      var e_1, _c;
      return __generator2(this, function(_d) {
        switch (_d.label) {
          case 0:
            if (!this.isOpen)
              return [3, 2];
            this._state = BackgroundProcessManagerState.Closing;
            try {
              for (_a = __values3(Array.from(this.jobs)), _b = _a.next(); !_b.done; _b = _a.next()) {
                job = _b.value;
                try {
                  job.terminate();
                } catch (error) {
                  console.warn("Failed to send termination signal to job. Error: " + error.message, job);
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_b && !_b.done && (_c = _a.return))
                  _c.call(_a);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
            this._closingPromise = Promise.allSettled(Array.from(this.jobs).map(function(j) {
              return j.promise;
            }));
            return [4, this._closingPromise];
          case 1:
            _d.sent();
            this._state = BackgroundProcessManagerState.Closed;
            _d.label = 2;
          case 2:
            return [2, this._closingPromise];
        }
      });
    });
  };
  BackgroundProcessManager2.prototype.open = function() {
    return __awaiter2(this, void 0, void 0, function() {
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!this.isClosing)
              return [3, 2];
            return [4, this.close()];
          case 1:
            _a.sent();
            _a.label = 2;
          case 2:
            this._state = BackgroundProcessManagerState.Open;
            return [2];
        }
      });
    });
  };
  return BackgroundProcessManager2;
}();
var BackgroundManagerNotOpenError = function(_super) {
  __extends2(BackgroundManagerNotOpenError2, _super);
  function BackgroundManagerNotOpenError2(message) {
    return _super.call(this, "BackgroundManagerNotOpenError: " + message) || this;
  }
  return BackgroundManagerNotOpenError2;
}(Error);
var BackgroundProcessManagerState;
(function(BackgroundProcessManagerState2) {
  BackgroundProcessManagerState2["Open"] = "Open";
  BackgroundProcessManagerState2["Closing"] = "Closing";
  BackgroundProcessManagerState2["Closed"] = "Closed";
})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));

// node_modules/@aws-amplify/core/lib-esm/Signer.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var logger7 = new ConsoleLogger("Signer");
var DEFAULT_ALGORITHM = "AWS4-HMAC-SHA256";
var IOT_SERVICE_NAME = "iotdevicegateway";
var encrypt = function(key, src) {
  var hash2 = new import_sha256_js.Sha256(key);
  hash2.update(src);
  return hash2.digestSync();
};
var hash = function(src) {
  var arg = src || "";
  var hash2 = new import_sha256_js.Sha256();
  hash2.update(arg);
  return toHex(hash2.digestSync());
};
var escape_RFC3986 = function(component) {
  return component.replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
};
var canonical_query = function(query) {
  if (!query || query.length === 0) {
    return "";
  }
  return query.split("&").map(function(e) {
    var key_val = e.split("=");
    if (key_val.length === 1) {
      return e;
    } else {
      var reencoded_val = escape_RFC3986(key_val[1]);
      return key_val[0] + "=" + reencoded_val;
    }
  }).sort(function(a, b) {
    var key_a = a.split("=")[0];
    var key_b = b.split("=")[0];
    if (key_a === key_b) {
      return a < b ? -1 : 1;
    } else {
      return key_a < key_b ? -1 : 1;
    }
  }).join("&");
};
var canonical_headers = function(headers) {
  if (!headers || Object.keys(headers).length === 0) {
    return "";
  }
  return Object.keys(headers).map(function(key) {
    return {
      key: key.toLowerCase(),
      value: headers[key] ? headers[key].trim().replace(/\s+/g, " ") : ""
    };
  }).sort(function(a, b) {
    return a.key < b.key ? -1 : 1;
  }).map(function(item) {
    return item.key + ":" + item.value;
  }).join("\n") + "\n";
};
var signed_headers = function(headers) {
  return Object.keys(headers).map(function(key) {
    return key.toLowerCase();
  }).sort().join(";");
};
var canonical_request = function(request) {
  var url_info = (0, import_url.parse)(request.url);
  return [
    request.method || "/",
    encodeURIComponent(url_info.pathname).replace(/%2F/gi, "/"),
    canonical_query(url_info.query),
    canonical_headers(request.headers),
    signed_headers(request.headers),
    hash(request.data)
  ].join("\n");
};
var parse_service_info = function(request) {
  var url_info = (0, import_url.parse)(request.url), host = url_info.host;
  var matched = host.match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com$/);
  var parsed = (matched || []).slice(1, 3);
  if (parsed[1] === "es") {
    parsed = parsed.reverse();
  }
  return {
    service: request.service || parsed[0],
    region: request.region || parsed[1]
  };
};
var credential_scope = function(d_str, region, service) {
  return [d_str, region, service, "aws4_request"].join("/");
};
var string_to_sign = function(algorithm, canonical_request2, dt_str, scope) {
  return [algorithm, dt_str, scope, hash(canonical_request2)].join("\n");
};
var get_signing_key = function(secret_key, d_str, service_info) {
  logger7.debug(service_info);
  var k = "AWS4" + secret_key, k_date = encrypt(k, d_str), k_region = encrypt(k_date, service_info.region), k_service = encrypt(k_region, service_info.service), k_signing = encrypt(k_service, "aws4_request");
  return k_signing;
};
var get_signature = function(signing_key, str_to_sign) {
  return toHex(encrypt(signing_key, str_to_sign));
};
var get_authorization_header = function(algorithm, access_key, scope, signed_headers2, signature) {
  return [
    algorithm + " Credential=" + access_key + "/" + scope,
    "SignedHeaders=" + signed_headers2,
    "Signature=" + signature
  ].join(", ");
};
var Signer = function() {
  function Signer2() {
  }
  Signer2.sign = function(request, access_info, service_info) {
    if (service_info === void 0) {
      service_info = null;
    }
    request.headers = request.headers || {};
    if (request.body && !request.data) {
      throw new Error('The attribute "body" was found on the request object. Please use the attribute "data" instead.');
    }
    var dt = DateUtils.getDateWithClockOffset(), dt_str = dt.toISOString().replace(/[:\-]|\.\d{3}/g, ""), d_str = dt_str.substr(0, 8);
    var url_info = (0, import_url.parse)(request.url);
    request.headers["host"] = url_info.host;
    request.headers["x-amz-date"] = dt_str;
    if (access_info.session_token) {
      request.headers["X-Amz-Security-Token"] = access_info.session_token;
    }
    var request_str = canonical_request(request);
    logger7.debug(request_str);
    var serviceInfo = service_info || parse_service_info(request), scope = credential_scope(d_str, serviceInfo.region, serviceInfo.service), str_to_sign = string_to_sign(DEFAULT_ALGORITHM, request_str, dt_str, scope);
    var signing_key = get_signing_key(access_info.secret_key, d_str, serviceInfo), signature = get_signature(signing_key, str_to_sign);
    var authorization_header = get_authorization_header(DEFAULT_ALGORITHM, access_info.access_key, scope, signed_headers(request.headers), signature);
    request.headers["Authorization"] = authorization_header;
    return request;
  };
  Signer2.signUrl = function(urlOrRequest, accessInfo, serviceInfo, expiration) {
    var urlToSign = typeof urlOrRequest === "object" ? urlOrRequest.url : urlOrRequest;
    var method = typeof urlOrRequest === "object" ? urlOrRequest.method : "GET";
    var body = typeof urlOrRequest === "object" ? urlOrRequest.body : void 0;
    var now = DateUtils.getDateWithClockOffset().toISOString().replace(/[:\-]|\.\d{3}/g, "");
    var today = now.substr(0, 8);
    var _a = (0, import_url.parse)(urlToSign, true, true), search = _a.search, parsedUrl = __rest(_a, ["search"]);
    var host = parsedUrl.host;
    var signedHeaders = { host };
    var _b = serviceInfo || parse_service_info({ url: (0, import_url.format)(parsedUrl) }), region = _b.region, service = _b.service;
    var credentialScope = credential_scope(today, region, service);
    var sessionTokenRequired = accessInfo.session_token && service !== IOT_SERVICE_NAME;
    var queryParams = __assign2(__assign2(__assign2({ "X-Amz-Algorithm": DEFAULT_ALGORITHM, "X-Amz-Credential": [accessInfo.access_key, credentialScope].join("/"), "X-Amz-Date": now.substr(0, 16) }, sessionTokenRequired ? { "X-Amz-Security-Token": "" + accessInfo.session_token } : {}), expiration ? { "X-Amz-Expires": "" + expiration } : {}), { "X-Amz-SignedHeaders": Object.keys(signedHeaders).join(",") });
    var canonicalRequest = canonical_request({
      method,
      url: (0, import_url.format)(__assign2(__assign2({}, parsedUrl), { query: __assign2(__assign2({}, parsedUrl.query), queryParams) })),
      headers: signedHeaders,
      data: body
    });
    var stringToSign = string_to_sign(DEFAULT_ALGORITHM, canonicalRequest, now, credentialScope);
    var signing_key = get_signing_key(accessInfo.secret_key, today, {
      region,
      service
    });
    var signature = get_signature(signing_key, stringToSign);
    var additionalQueryParams = __assign2({ "X-Amz-Signature": signature }, accessInfo.session_token && {
      "X-Amz-Security-Token": accessInfo.session_token
    });
    var result = (0, import_url.format)({
      protocol: parsedUrl.protocol,
      slashes: true,
      hostname: parsedUrl.hostname,
      port: parsedUrl.port,
      pathname: parsedUrl.pathname,
      query: __assign2(__assign2(__assign2({}, parsedUrl.query), queryParams), additionalQueryParams)
    });
    return result;
  };
  return Signer2;
}();

// node_modules/@aws-amplify/core/lib-esm/Parser.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var logger8 = new ConsoleLogger("Parser");
var parseMobileHubConfig = function(config) {
  var amplifyConfig = {};
  if (config["aws_mobile_analytics_app_id"]) {
    var Analytics = {
      AWSPinpoint: {
        appId: config["aws_mobile_analytics_app_id"],
        region: config["aws_mobile_analytics_app_region"]
      }
    };
    amplifyConfig.Analytics = Analytics;
  }
  if (config["aws_cognito_identity_pool_id"] || config["aws_user_pools_id"]) {
    amplifyConfig.Auth = {
      userPoolId: config["aws_user_pools_id"],
      userPoolWebClientId: config["aws_user_pools_web_client_id"],
      region: config["aws_cognito_region"],
      identityPoolId: config["aws_cognito_identity_pool_id"],
      identityPoolRegion: config["aws_cognito_region"],
      mandatorySignIn: config["aws_mandatory_sign_in"] === "enable",
      signUpVerificationMethod: config["aws_cognito_sign_up_verification_method"] || "code"
    };
  }
  var storageConfig;
  if (config["aws_user_files_s3_bucket"]) {
    storageConfig = {
      AWSS3: {
        bucket: config["aws_user_files_s3_bucket"],
        region: config["aws_user_files_s3_bucket_region"],
        dangerouslyConnectToHttpEndpointForTesting: config["aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing"]
      }
    };
  } else {
    storageConfig = config ? config.Storage || config : {};
  }
  if (config["Logging"]) {
    amplifyConfig.Logging = __assign3(__assign3({}, config["Logging"]), { region: config["aws_project_region"] });
  }
  if (config["geo"]) {
    amplifyConfig.Geo = Object.assign({}, config.geo);
    if (config.geo["amazon_location_service"]) {
      amplifyConfig.Geo = {
        AmazonLocationService: config.geo["amazon_location_service"]
      };
    }
  }
  amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);
  amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);
  amplifyConfig.Storage = Object.assign({}, storageConfig);
  amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);
  logger8.debug("parse config", config, "to amplifyconfig", amplifyConfig);
  return amplifyConfig;
};
var Parser = function() {
  function Parser3() {
  }
  Parser3.parseMobilehubConfig = parseMobileHubConfig;
  return Parser3;
}();

// node_modules/@aws-sdk/client-cloudwatch-logs/node_modules/tslib/tslib.es6.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends3(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign4 = function() {
  __assign4 = Object.assign || function __assign10(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
function __awaiter3(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator3(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read6(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/package.json
var package_default = {
  name: "@aws-sdk/client-cloudwatch-logs",
  description: "AWS SDK for JavaScript Cloudwatch Logs Client for Node.js, Browser and React Native",
  version: "3.6.1",
  scripts: {
    clean: "yarn remove-definitions && yarn remove-dist && yarn remove-documentation",
    "build-documentation": "yarn remove-documentation && typedoc ./",
    prepublishOnly: "yarn build",
    pretest: "yarn build:cjs",
    "remove-definitions": "rimraf ./types",
    "remove-dist": "rimraf ./dist",
    "remove-documentation": "rimraf ./docs",
    test: "exit 0",
    "build:cjs": "tsc -p tsconfig.json",
    "build:es": "tsc -p tsconfig.es.json",
    build: "yarn build:cjs && yarn build:es",
    postbuild: "downlevel-dts types types/ts3.4"
  },
  main: "./dist/cjs/index.js",
  types: "./types/index.d.ts",
  module: "./dist/es/index.js",
  browser: {
    "./runtimeConfig": "./runtimeConfig.browser"
  },
  "react-native": {
    "./runtimeConfig": "./runtimeConfig.native"
  },
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "^1.0.0",
    "@aws-crypto/sha256-js": "^1.0.0",
    "@aws-sdk/config-resolver": "3.6.1",
    "@aws-sdk/credential-provider-node": "3.6.1",
    "@aws-sdk/fetch-http-handler": "3.6.1",
    "@aws-sdk/hash-node": "3.6.1",
    "@aws-sdk/invalid-dependency": "3.6.1",
    "@aws-sdk/middleware-content-length": "3.6.1",
    "@aws-sdk/middleware-host-header": "3.6.1",
    "@aws-sdk/middleware-logger": "3.6.1",
    "@aws-sdk/middleware-retry": "3.6.1",
    "@aws-sdk/middleware-serde": "3.6.1",
    "@aws-sdk/middleware-signing": "3.6.1",
    "@aws-sdk/middleware-stack": "3.6.1",
    "@aws-sdk/middleware-user-agent": "3.6.1",
    "@aws-sdk/node-config-provider": "3.6.1",
    "@aws-sdk/node-http-handler": "3.6.1",
    "@aws-sdk/protocol-http": "3.6.1",
    "@aws-sdk/smithy-client": "3.6.1",
    "@aws-sdk/types": "3.6.1",
    "@aws-sdk/url-parser": "3.6.1",
    "@aws-sdk/url-parser-native": "3.6.1",
    "@aws-sdk/util-base64-browser": "3.6.1",
    "@aws-sdk/util-base64-node": "3.6.1",
    "@aws-sdk/util-body-length-browser": "3.6.1",
    "@aws-sdk/util-body-length-node": "3.6.1",
    "@aws-sdk/util-user-agent-browser": "3.6.1",
    "@aws-sdk/util-user-agent-node": "3.6.1",
    "@aws-sdk/util-utf8-browser": "3.6.1",
    "@aws-sdk/util-utf8-node": "3.6.1",
    tslib: "^2.0.0"
  },
  devDependencies: {
    "@aws-sdk/client-documentation-generator": "3.6.1",
    "@types/node": "^12.7.5",
    "downlevel-dts": "0.7.0",
    jest: "^26.1.0",
    rimraf: "^3.0.0",
    typedoc: "^0.19.2",
    typescript: "~4.1.2"
  },
  engines: {
    node: ">=10.0.0"
  },
  typesVersions: {
    "<4.0": {
      "types/*": [
        "types/ts3.4/*"
      ]
    }
  },
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cloudwatch-logs",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-cloudwatch-logs"
  }
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
var import_sha256_browser = __toESM(require_build6());

// node_modules/tslib/tslib.es6.js
var extendStatics2 = function(d, b) {
  extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (b2.hasOwnProperty(p))
        d2[p] = b2[p];
  };
  return extendStatics2(d, b);
};
function __extends4(d, b) {
  extendStatics2(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign5 = function() {
  __assign5 = Object.assign || function __assign10(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
function __rest2(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter4(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator4(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values4(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read7(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread4() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read7(arguments[i]));
  return ar;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values4 === "function" ? __values4(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}

// node_modules/@aws-sdk/protocol-http/dist/es/httpResponse.js
var HttpResponse = function() {
  function HttpResponse2(options) {
    this.statusCode = options.statusCode;
    this.headers = options.headers || {};
    this.body = options.body;
  }
  HttpResponse2.isInstance = function(response) {
    if (!response)
      return false;
    var resp = response;
    return typeof resp.statusCode === "number" && typeof resp.headers === "object";
  };
  return HttpResponse2;
}();

// node_modules/@aws-sdk/protocol-http/dist/es/httpRequest.js
var HttpRequest = function() {
  function HttpRequest2(options) {
    this.method = options.method || "GET";
    this.hostname = options.hostname || "localhost";
    this.port = options.port;
    this.query = options.query || {};
    this.headers = options.headers || {};
    this.body = options.body;
    this.protocol = options.protocol ? options.protocol.substr(-1) !== ":" ? options.protocol + ":" : options.protocol : "https:";
    this.path = options.path ? options.path.charAt(0) !== "/" ? "/" + options.path : options.path : "/";
  }
  HttpRequest2.isInstance = function(request) {
    if (!request)
      return false;
    var req = request;
    return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
  };
  HttpRequest2.prototype.clone = function() {
    var cloned = new HttpRequest2(__assign5(__assign5({}, this), { headers: __assign5({}, this.headers) }));
    if (cloned.query)
      cloned.query = cloneQuery(cloned.query);
    return cloned;
  };
  return HttpRequest2;
}();
function cloneQuery(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign5(__assign5({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread4(param) : param, _a));
  }, {});
}

// node_modules/@aws-sdk/util-uri-escape/dist/es/escape-uri.js
var escapeUri = function(uri) {
  return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
};
var hexEncode = function(c) {
  return "%" + c.charCodeAt(0).toString(16).toUpperCase();
};

// node_modules/@aws-sdk/querystring-builder/dist/es/index.js
function buildQueryString(query) {
  var e_1, _a;
  var parts = [];
  try {
    for (var _b = __values4(Object.keys(query).sort()), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var value = query[key];
      key = escapeUri(key);
      if (Array.isArray(value)) {
        for (var i = 0, iLen = value.length; i < iLen; i++) {
          parts.push(key + "=" + escapeUri(value[i]));
        }
      } else {
        var qsEntry = key;
        if (value || typeof value === "string") {
          qsEntry += "=" + escapeUri(value);
        }
        parts.push(qsEntry);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return parts.join("&");
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/request-timeout.js
function requestTimeout(timeoutInMs) {
  if (timeoutInMs === void 0) {
    timeoutInMs = 0;
  }
  return new Promise(function(resolve, reject) {
    if (timeoutInMs) {
      setTimeout(function() {
        var timeoutError = new Error("Request did not complete within " + timeoutInMs + " ms");
        timeoutError.name = "TimeoutError";
        reject(timeoutError);
      }, timeoutInMs);
    }
  });
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/fetch-http-handler.js
var FetchHttpHandler = function() {
  function FetchHttpHandler2(_a) {
    var _b = _a === void 0 ? {} : _a, requestTimeout2 = _b.requestTimeout;
    this.requestTimeout = requestTimeout2;
  }
  FetchHttpHandler2.prototype.destroy = function() {
  };
  FetchHttpHandler2.prototype.handle = function(request, _a) {
    var _b = _a === void 0 ? {} : _a, abortSignal = _b.abortSignal;
    var requestTimeoutInMs = this.requestTimeout;
    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
      var abortError = new Error("Request aborted");
      abortError.name = "AbortError";
      return Promise.reject(abortError);
    }
    var path = request.path;
    if (request.query) {
      var queryString = buildQueryString(request.query);
      if (queryString) {
        path += "?" + queryString;
      }
    }
    var port = request.port, method = request.method;
    var url = request.protocol + "//" + request.hostname + (port ? ":" + port : "") + path;
    var body = method === "GET" || method === "HEAD" ? void 0 : request.body;
    var requestOptions = {
      body,
      headers: new Headers(request.headers),
      method
    };
    if (typeof AbortController !== "undefined") {
      requestOptions["signal"] = abortSignal;
    }
    var fetchRequest = new Request(url, requestOptions);
    var raceOfPromises = [
      fetch(fetchRequest).then(function(response) {
        var e_1, _a2;
        var fetchHeaders = response.headers;
        var transformedHeaders = {};
        try {
          for (var _b2 = __values4(fetchHeaders.entries()), _c = _b2.next(); !_c.done; _c = _b2.next()) {
            var pair = _c.value;
            transformedHeaders[pair[0]] = pair[1];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b2.return))
              _a2.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        var hasReadableStream = response.body !== void 0;
        if (!hasReadableStream) {
          return response.blob().then(function(body2) {
            return {
              response: new HttpResponse({
                headers: transformedHeaders,
                statusCode: response.status,
                body: body2
              })
            };
          });
        }
        return {
          response: new HttpResponse({
            headers: transformedHeaders,
            statusCode: response.status,
            body: response.body
          })
        };
      }),
      requestTimeout(requestTimeoutInMs)
    ];
    if (abortSignal) {
      raceOfPromises.push(new Promise(function(resolve, reject) {
        abortSignal.onabort = function() {
          var abortError2 = new Error("Request aborted");
          abortError2.name = "AbortError";
          reject(abortError2);
        };
      }));
    }
    return Promise.race(raceOfPromises);
  };
  return FetchHttpHandler2;
}();

// node_modules/@aws-sdk/util-base64-browser/dist/es/index.js
var alphabetByEncoding = {};
var alphabetByValue = new Array(64);
for (i = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i + start <= limit; i++) {
  char = String.fromCharCode(i + start);
  alphabetByEncoding[char] = i;
  alphabetByValue[i] = char;
}
var char;
var i;
var start;
var limit;
for (i = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i + start <= limit; i++) {
  char = String.fromCharCode(i + start);
  index = i + 26;
  alphabetByEncoding[char] = index;
  alphabetByValue[index] = char;
}
var char;
var index;
var i;
var start;
var limit;
for (i = 0; i < 10; i++) {
  alphabetByEncoding[i.toString(10)] = i + 52;
  char = i.toString(10);
  index = i + 52;
  alphabetByEncoding[char] = index;
  alphabetByValue[index] = char;
}
var char;
var index;
var i;
alphabetByEncoding["+"] = 62;
alphabetByValue[62] = "+";
alphabetByEncoding["/"] = 63;
alphabetByValue[63] = "/";
var bitsPerLetter = 6;
var bitsPerByte = 8;
var maxLetterValue = 63;
function fromBase64(input) {
  var totalByteLength = input.length / 4 * 3;
  if (input.substr(-2) === "==") {
    totalByteLength -= 2;
  } else if (input.substr(-1) === "=") {
    totalByteLength--;
  }
  var out = new ArrayBuffer(totalByteLength);
  var dataView = new DataView(out);
  for (var i = 0; i < input.length; i += 4) {
    var bits = 0;
    var bitLength = 0;
    for (var j = i, limit = i + 3; j <= limit; j++) {
      if (input[j] !== "=") {
        bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;
        bitLength += bitsPerLetter;
      } else {
        bits >>= bitsPerLetter;
      }
    }
    var chunkOffset = i / 4 * 3;
    bits >>= bitLength % bitsPerByte;
    var byteLength = Math.floor(bitLength / bitsPerByte);
    for (var k = 0; k < byteLength; k++) {
      var offset = (byteLength - k - 1) * bitsPerByte;
      dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);
    }
  }
  return new Uint8Array(out);
}
function toBase64(input) {
  var str = "";
  for (var i = 0; i < input.length; i += 3) {
    var bits = 0;
    var bitLength = 0;
    for (var j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {
      bits |= input[j] << (limit - j - 1) * bitsPerByte;
      bitLength += bitsPerByte;
    }
    var bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
    bits <<= bitClusterCount * bitsPerLetter - bitLength;
    for (var k = 1; k <= bitClusterCount; k++) {
      var offset = (bitClusterCount - k) * bitsPerLetter;
      str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];
    }
    str += "==".slice(0, 4 - bitClusterCount);
  }
  return str;
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/stream-collector.js
var streamCollector = function(stream) {
  if (typeof Blob === "function" && stream instanceof Blob) {
    return collectBlob(stream);
  }
  return collectStream(stream);
};
function collectBlob(blob) {
  return __awaiter4(this, void 0, void 0, function() {
    var base64, arrayBuffer;
    return __generator4(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, readToBase64(blob)];
        case 1:
          base64 = _a.sent();
          arrayBuffer = fromBase64(base64);
          return [2, new Uint8Array(arrayBuffer)];
      }
    });
  });
}
function collectStream(stream) {
  return __awaiter4(this, void 0, void 0, function() {
    var res, reader, isDone, _a, done, value, prior;
    return __generator4(this, function(_b) {
      switch (_b.label) {
        case 0:
          res = new Uint8Array(0);
          reader = stream.getReader();
          isDone = false;
          _b.label = 1;
        case 1:
          if (!!isDone)
            return [3, 3];
          return [4, reader.read()];
        case 2:
          _a = _b.sent(), done = _a.done, value = _a.value;
          if (value) {
            prior = res;
            res = new Uint8Array(prior.length + value.length);
            res.set(prior);
            res.set(value, prior.length);
          }
          isDone = done;
          return [3, 1];
        case 3:
          return [2, res];
      }
    });
  });
}
function readToBase64(blob) {
  return new Promise(function(resolve, reject) {
    var reader = new FileReader();
    reader.onloadend = function() {
      var _a;
      if (reader.readyState !== 2) {
        return reject(new Error("Reader aborted too early"));
      }
      var result = (_a = reader.result) !== null && _a !== void 0 ? _a : "";
      var commaIndex = result.indexOf(",");
      var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
      resolve(result.substring(dataOffset));
    };
    reader.onabort = function() {
      return reject(new Error("Read aborted"));
    };
    reader.onerror = function() {
      return reject(reader.error);
    };
    reader.readAsDataURL(blob);
  });
}

// node_modules/@aws-sdk/invalid-dependency/dist/es/invalidProvider.js
var invalidProvider = function(message) {
  return function() {
    return Promise.reject(message);
  };
};

// node_modules/@aws-sdk/middleware-retry/dist/es/retryMiddleware.js
var retryMiddleware = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter4(void 0, void 0, void 0, function() {
        var _a;
        return __generator4(this, function(_b) {
          if ((_a = options === null || options === void 0 ? void 0 : options.retryStrategy) === null || _a === void 0 ? void 0 : _a.mode)
            context.userAgent = __spread4(context.userAgent || [], [["cfg/retry-mode", options.retryStrategy.mode]]);
          return [2, options.retryStrategy.retry(next, args)];
        });
      });
    };
  };
};
var retryMiddlewareOptions = {
  name: "retryMiddleware",
  tags: ["RETRY"],
  step: "finalizeRequest",
  priority: "high",
  override: true
};
var getRetryPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-retry/dist/es/constants.js
var DEFAULT_RETRY_DELAY_BASE = 100;
var MAXIMUM_RETRY_DELAY = 20 * 1e3;
var THROTTLING_RETRY_DELAY_BASE = 500;
var INITIAL_RETRY_TOKENS = 500;
var RETRY_COST = 5;
var TIMEOUT_RETRY_COST = 10;
var NO_RETRY_INCREMENT = 1;
var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
var REQUEST_HEADER = "amz-sdk-request";

// node_modules/@aws-sdk/service-error-classification/dist/es/constants.js
var CLOCK_SKEW_ERROR_CODES = [
  "AuthFailure",
  "InvalidSignatureException",
  "RequestExpired",
  "RequestInTheFuture",
  "RequestTimeTooSkewed",
  "SignatureDoesNotMatch"
];
var THROTTLING_ERROR_CODES = [
  "BandwidthLimitExceeded",
  "EC2ThrottledException",
  "LimitExceededException",
  "PriorRequestNotComplete",
  "ProvisionedThroughputExceededException",
  "RequestLimitExceeded",
  "RequestThrottled",
  "RequestThrottledException",
  "SlowDown",
  "ThrottledException",
  "Throttling",
  "ThrottlingException",
  "TooManyRequestsException",
  "TransactionInProgressException"
];
var TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];

// node_modules/@aws-sdk/service-error-classification/dist/es/index.js
var isRetryableByTrait = function(error) {
  return error.$retryable !== void 0;
};
var isClockSkewError = function(error) {
  return CLOCK_SKEW_ERROR_CODES.includes(error.name);
};
var isThrottlingError = function(error) {
  var _a, _b;
  return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
};
var isTransientError = function(error) {
  var _a;
  return TRANSIENT_ERROR_CODES.includes(error.name) || TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
};

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultStrategy.js
var import_uuid = __toESM(require_uuid());

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultRetryQuota.js
var getDefaultRetryQuota = function(initialRetryTokens) {
  var MAX_CAPACITY = initialRetryTokens;
  var availableCapacity = initialRetryTokens;
  var getCapacityAmount = function(error) {
    return error.name === "TimeoutError" ? TIMEOUT_RETRY_COST : RETRY_COST;
  };
  var hasRetryTokens = function(error) {
    return getCapacityAmount(error) <= availableCapacity;
  };
  var retrieveRetryTokens = function(error) {
    if (!hasRetryTokens(error)) {
      throw new Error("No retry token available");
    }
    var capacityAmount = getCapacityAmount(error);
    availableCapacity -= capacityAmount;
    return capacityAmount;
  };
  var releaseRetryTokens = function(capacityReleaseAmount) {
    availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : NO_RETRY_INCREMENT;
    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
  };
  return Object.freeze({
    hasRetryTokens,
    retrieveRetryTokens,
    releaseRetryTokens
  });
};

// node_modules/@aws-sdk/middleware-retry/dist/es/delayDecider.js
var defaultDelayDecider = function(delayBase, attempts) {
  return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));
};

// node_modules/@aws-sdk/middleware-retry/dist/es/retryDecider.js
var defaultRetryDecider = function(error) {
  if (!error) {
    return false;
  }
  return isRetryableByTrait(error) || isClockSkewError(error) || isThrottlingError(error) || isTransientError(error);
};

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultStrategy.js
var DEFAULT_MAX_ATTEMPTS = 3;
var DEFAULT_RETRY_MODE = "standard";
var StandardRetryStrategy = function() {
  function StandardRetryStrategy2(maxAttemptsProvider, options) {
    var _a, _b, _c;
    this.maxAttemptsProvider = maxAttemptsProvider;
    this.mode = DEFAULT_RETRY_MODE;
    this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : defaultRetryDecider;
    this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : defaultDelayDecider;
    this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : getDefaultRetryQuota(INITIAL_RETRY_TOKENS);
  }
  StandardRetryStrategy2.prototype.shouldRetry = function(error, attempts, maxAttempts) {
    return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
  };
  StandardRetryStrategy2.prototype.getMaxAttempts = function() {
    return __awaiter4(this, void 0, void 0, function() {
      var maxAttempts, error_1;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4, this.maxAttemptsProvider()];
          case 1:
            maxAttempts = _a.sent();
            return [3, 3];
          case 2:
            error_1 = _a.sent();
            maxAttempts = DEFAULT_MAX_ATTEMPTS;
            return [3, 3];
          case 3:
            return [2, maxAttempts];
        }
      });
    });
  };
  StandardRetryStrategy2.prototype.retry = function(next, args) {
    return __awaiter4(this, void 0, void 0, function() {
      var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            attempts = 0;
            totalDelay = 0;
            return [4, this.getMaxAttempts()];
          case 1:
            maxAttempts = _a.sent();
            request = args.request;
            if (HttpRequest.isInstance(request)) {
              request.headers[INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
            }
            _loop_1 = function() {
              var _a2, response, output, err_1, delay_1;
              return __generator4(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    _b.trys.push([0, 2, , 5]);
                    if (HttpRequest.isInstance(request)) {
                      request.headers[REQUEST_HEADER] = "attempt=" + (attempts + 1) + "; max=" + maxAttempts;
                    }
                    return [4, next(args)];
                  case 1:
                    _a2 = _b.sent(), response = _a2.response, output = _a2.output;
                    this_1.retryQuota.releaseRetryTokens(retryTokenAmount);
                    output.$metadata.attempts = attempts + 1;
                    output.$metadata.totalRetryDelay = totalDelay;
                    return [2, { value: { response, output } }];
                  case 2:
                    err_1 = _b.sent();
                    attempts++;
                    if (!this_1.shouldRetry(err_1, attempts, maxAttempts))
                      return [3, 4];
                    retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err_1);
                    delay_1 = this_1.delayDecider(isThrottlingError(err_1) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);
                    totalDelay += delay_1;
                    return [4, new Promise(function(resolve) {
                      return setTimeout(resolve, delay_1);
                    })];
                  case 3:
                    _b.sent();
                    return [2, "continue"];
                  case 4:
                    if (!err_1.$metadata) {
                      err_1.$metadata = {};
                    }
                    err_1.$metadata.attempts = attempts;
                    err_1.$metadata.totalRetryDelay = totalDelay;
                    throw err_1;
                  case 5:
                    return [2];
                }
              });
            };
            this_1 = this;
            _a.label = 2;
          case 2:
            if (false)
              return [3, 4];
            return [5, _loop_1()];
          case 3:
            state_1 = _a.sent();
            if (typeof state_1 === "object")
              return [2, state_1.value];
            return [3, 2];
          case 4:
            return [2];
        }
      });
    });
  };
  return StandardRetryStrategy2;
}();

// node_modules/@aws-sdk/middleware-retry/dist/es/configurations.js
var resolveRetryConfig = function(input) {
  var maxAttempts = normalizeMaxAttempts(input.maxAttempts);
  return __assign5(__assign5({}, input), { maxAttempts, retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts) });
};
var normalizeMaxAttempts = function(maxAttempts) {
  if (maxAttempts === void 0) {
    maxAttempts = DEFAULT_MAX_ATTEMPTS;
  }
  if (typeof maxAttempts === "number") {
    var promisified_1 = Promise.resolve(maxAttempts);
    return function() {
      return promisified_1;
    };
  }
  return maxAttempts;
};

// node_modules/@aws-sdk/util-body-length-browser/dist/es/index.js
function calculateBodyLength(body) {
  if (typeof body === "string") {
    var len = body.length;
    for (var i = len - 1; i >= 0; i--) {
      var code = body.charCodeAt(i);
      if (code > 127 && code <= 2047)
        len++;
      else if (code > 2047 && code <= 65535)
        len += 2;
    }
    return len;
  } else if (typeof body.byteLength === "number") {
    return body.byteLength;
  } else if (typeof body.size === "number") {
    return body.size;
  }
}

// node_modules/bowser/src/constants.js
var BROWSER_ALIASES_MAP = {
  "Amazon Silk": "amazon_silk",
  "Android Browser": "android",
  Bada: "bada",
  BlackBerry: "blackberry",
  Chrome: "chrome",
  Chromium: "chromium",
  Electron: "electron",
  Epiphany: "epiphany",
  Firefox: "firefox",
  Focus: "focus",
  Generic: "generic",
  "Google Search": "google_search",
  Googlebot: "googlebot",
  "Internet Explorer": "ie",
  "K-Meleon": "k_meleon",
  Maxthon: "maxthon",
  "Microsoft Edge": "edge",
  "MZ Browser": "mz",
  "NAVER Whale Browser": "naver",
  Opera: "opera",
  "Opera Coast": "opera_coast",
  PhantomJS: "phantomjs",
  Puffin: "puffin",
  QupZilla: "qupzilla",
  QQ: "qq",
  QQLite: "qqlite",
  Safari: "safari",
  Sailfish: "sailfish",
  "Samsung Internet for Android": "samsung_internet",
  SeaMonkey: "seamonkey",
  Sleipnir: "sleipnir",
  Swing: "swing",
  Tizen: "tizen",
  "UC Browser": "uc",
  Vivaldi: "vivaldi",
  "WebOS Browser": "webos",
  WeChat: "wechat",
  "Yandex Browser": "yandex",
  Roku: "roku"
};
var BROWSER_MAP = {
  amazon_silk: "Amazon Silk",
  android: "Android Browser",
  bada: "Bada",
  blackberry: "BlackBerry",
  chrome: "Chrome",
  chromium: "Chromium",
  electron: "Electron",
  epiphany: "Epiphany",
  firefox: "Firefox",
  focus: "Focus",
  generic: "Generic",
  googlebot: "Googlebot",
  google_search: "Google Search",
  ie: "Internet Explorer",
  k_meleon: "K-Meleon",
  maxthon: "Maxthon",
  edge: "Microsoft Edge",
  mz: "MZ Browser",
  naver: "NAVER Whale Browser",
  opera: "Opera",
  opera_coast: "Opera Coast",
  phantomjs: "PhantomJS",
  puffin: "Puffin",
  qupzilla: "QupZilla",
  qq: "QQ Browser",
  qqlite: "QQ Browser Lite",
  safari: "Safari",
  sailfish: "Sailfish",
  samsung_internet: "Samsung Internet for Android",
  seamonkey: "SeaMonkey",
  sleipnir: "Sleipnir",
  swing: "Swing",
  tizen: "Tizen",
  uc: "UC Browser",
  vivaldi: "Vivaldi",
  webos: "WebOS Browser",
  wechat: "WeChat",
  yandex: "Yandex Browser"
};
var PLATFORMS_MAP = {
  tablet: "tablet",
  mobile: "mobile",
  desktop: "desktop",
  tv: "tv"
};
var OS_MAP = {
  WindowsPhone: "Windows Phone",
  Windows: "Windows",
  MacOS: "macOS",
  iOS: "iOS",
  Android: "Android",
  WebOS: "WebOS",
  BlackBerry: "BlackBerry",
  Bada: "Bada",
  Tizen: "Tizen",
  Linux: "Linux",
  ChromeOS: "Chrome OS",
  PlayStation4: "PlayStation 4",
  Roku: "Roku"
};
var ENGINE_MAP = {
  EdgeHTML: "EdgeHTML",
  Blink: "Blink",
  Trident: "Trident",
  Presto: "Presto",
  Gecko: "Gecko",
  WebKit: "WebKit"
};

// node_modules/bowser/src/utils.js
var Utils = class {
  static getFirstMatch(regexp, ua) {
    const match = ua.match(regexp);
    return match && match.length > 0 && match[1] || "";
  }
  static getSecondMatch(regexp, ua) {
    const match = ua.match(regexp);
    return match && match.length > 1 && match[2] || "";
  }
  static matchAndReturnConst(regexp, ua, _const) {
    if (regexp.test(ua)) {
      return _const;
    }
    return void 0;
  }
  static getWindowsVersionName(version2) {
    switch (version2) {
      case "NT":
        return "NT";
      case "XP":
        return "XP";
      case "NT 5.0":
        return "2000";
      case "NT 5.1":
        return "XP";
      case "NT 5.2":
        return "2003";
      case "NT 6.0":
        return "Vista";
      case "NT 6.1":
        return "7";
      case "NT 6.2":
        return "8";
      case "NT 6.3":
        return "8.1";
      case "NT 10.0":
        return "10";
      default:
        return void 0;
    }
  }
  static getMacOSVersionName(version2) {
    const v = version2.split(".").splice(0, 2).map((s) => parseInt(s, 10) || 0);
    v.push(0);
    if (v[0] !== 10)
      return void 0;
    switch (v[1]) {
      case 5:
        return "Leopard";
      case 6:
        return "Snow Leopard";
      case 7:
        return "Lion";
      case 8:
        return "Mountain Lion";
      case 9:
        return "Mavericks";
      case 10:
        return "Yosemite";
      case 11:
        return "El Capitan";
      case 12:
        return "Sierra";
      case 13:
        return "High Sierra";
      case 14:
        return "Mojave";
      case 15:
        return "Catalina";
      default:
        return void 0;
    }
  }
  static getAndroidVersionName(version2) {
    const v = version2.split(".").splice(0, 2).map((s) => parseInt(s, 10) || 0);
    v.push(0);
    if (v[0] === 1 && v[1] < 5)
      return void 0;
    if (v[0] === 1 && v[1] < 6)
      return "Cupcake";
    if (v[0] === 1 && v[1] >= 6)
      return "Donut";
    if (v[0] === 2 && v[1] < 2)
      return "Eclair";
    if (v[0] === 2 && v[1] === 2)
      return "Froyo";
    if (v[0] === 2 && v[1] > 2)
      return "Gingerbread";
    if (v[0] === 3)
      return "Honeycomb";
    if (v[0] === 4 && v[1] < 1)
      return "Ice Cream Sandwich";
    if (v[0] === 4 && v[1] < 4)
      return "Jelly Bean";
    if (v[0] === 4 && v[1] >= 4)
      return "KitKat";
    if (v[0] === 5)
      return "Lollipop";
    if (v[0] === 6)
      return "Marshmallow";
    if (v[0] === 7)
      return "Nougat";
    if (v[0] === 8)
      return "Oreo";
    if (v[0] === 9)
      return "Pie";
    return void 0;
  }
  static getVersionPrecision(version2) {
    return version2.split(".").length;
  }
  static compareVersions(versionA, versionB, isLoose = false) {
    const versionAPrecision = Utils.getVersionPrecision(versionA);
    const versionBPrecision = Utils.getVersionPrecision(versionB);
    let precision = Math.max(versionAPrecision, versionBPrecision);
    let lastPrecision = 0;
    const chunks = Utils.map([versionA, versionB], (version2) => {
      const delta = precision - Utils.getVersionPrecision(version2);
      const _version = version2 + new Array(delta + 1).join(".0");
      return Utils.map(_version.split("."), (chunk) => new Array(20 - chunk.length).join("0") + chunk).reverse();
    });
    if (isLoose) {
      lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision);
    }
    precision -= 1;
    while (precision >= lastPrecision) {
      if (chunks[0][precision] > chunks[1][precision]) {
        return 1;
      }
      if (chunks[0][precision] === chunks[1][precision]) {
        if (precision === lastPrecision) {
          return 0;
        }
        precision -= 1;
      } else if (chunks[0][precision] < chunks[1][precision]) {
        return -1;
      }
    }
    return void 0;
  }
  static map(arr, iterator) {
    const result = [];
    let i;
    if (Array.prototype.map) {
      return Array.prototype.map.call(arr, iterator);
    }
    for (i = 0; i < arr.length; i += 1) {
      result.push(iterator(arr[i]));
    }
    return result;
  }
  static find(arr, predicate) {
    let i;
    let l;
    if (Array.prototype.find) {
      return Array.prototype.find.call(arr, predicate);
    }
    for (i = 0, l = arr.length; i < l; i += 1) {
      const value = arr[i];
      if (predicate(value, i)) {
        return value;
      }
    }
    return void 0;
  }
  static assign(obj, ...assigners) {
    const result = obj;
    let i;
    let l;
    if (Object.assign) {
      return Object.assign(obj, ...assigners);
    }
    for (i = 0, l = assigners.length; i < l; i += 1) {
      const assigner = assigners[i];
      if (typeof assigner === "object" && assigner !== null) {
        const keys = Object.keys(assigner);
        keys.forEach((key) => {
          result[key] = assigner[key];
        });
      }
    }
    return obj;
  }
  static getBrowserAlias(browserName) {
    return BROWSER_ALIASES_MAP[browserName];
  }
  static getBrowserTypeByAlias(browserAlias) {
    return BROWSER_MAP[browserAlias] || "";
  }
};

// node_modules/bowser/src/parser-browsers.js
var commonVersionIdentifier = /version\/(\d+(\.?_?\d+)+)/i;
var browsersList = [
  {
    test: [/googlebot/i],
    describe(ua) {
      const browser = {
        name: "Googlebot"
      };
      const version2 = Utils.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/opera/i],
    describe(ua) {
      const browser = {
        name: "Opera"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/opr\/|opios/i],
    describe(ua) {
      const browser = {
        name: "Opera"
      };
      const version2 = Utils.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/SamsungBrowser/i],
    describe(ua) {
      const browser = {
        name: "Samsung Internet for Android"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/Whale/i],
    describe(ua) {
      const browser = {
        name: "NAVER Whale Browser"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/MZBrowser/i],
    describe(ua) {
      const browser = {
        name: "MZ Browser"
      };
      const version2 = Utils.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/focus/i],
    describe(ua) {
      const browser = {
        name: "Focus"
      };
      const version2 = Utils.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/swing/i],
    describe(ua) {
      const browser = {
        name: "Swing"
      };
      const version2 = Utils.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/coast/i],
    describe(ua) {
      const browser = {
        name: "Opera Coast"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/opt\/\d+(?:.?_?\d+)+/i],
    describe(ua) {
      const browser = {
        name: "Opera Touch"
      };
      const version2 = Utils.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/yabrowser/i],
    describe(ua) {
      const browser = {
        name: "Yandex Browser"
      };
      const version2 = Utils.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/ucbrowser/i],
    describe(ua) {
      const browser = {
        name: "UC Browser"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/Maxthon|mxios/i],
    describe(ua) {
      const browser = {
        name: "Maxthon"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/epiphany/i],
    describe(ua) {
      const browser = {
        name: "Epiphany"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/puffin/i],
    describe(ua) {
      const browser = {
        name: "Puffin"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/sleipnir/i],
    describe(ua) {
      const browser = {
        name: "Sleipnir"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/k-meleon/i],
    describe(ua) {
      const browser = {
        name: "K-Meleon"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/micromessenger/i],
    describe(ua) {
      const browser = {
        name: "WeChat"
      };
      const version2 = Utils.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/qqbrowser/i],
    describe(ua) {
      const browser = {
        name: /qqbrowserlite/i.test(ua) ? "QQ Browser Lite" : "QQ Browser"
      };
      const version2 = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/msie|trident/i],
    describe(ua) {
      const browser = {
        name: "Internet Explorer"
      };
      const version2 = Utils.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/\sedg\//i],
    describe(ua) {
      const browser = {
        name: "Microsoft Edge"
      };
      const version2 = Utils.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/edg([ea]|ios)/i],
    describe(ua) {
      const browser = {
        name: "Microsoft Edge"
      };
      const version2 = Utils.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/vivaldi/i],
    describe(ua) {
      const browser = {
        name: "Vivaldi"
      };
      const version2 = Utils.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/seamonkey/i],
    describe(ua) {
      const browser = {
        name: "SeaMonkey"
      };
      const version2 = Utils.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/sailfish/i],
    describe(ua) {
      const browser = {
        name: "Sailfish"
      };
      const version2 = Utils.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/silk/i],
    describe(ua) {
      const browser = {
        name: "Amazon Silk"
      };
      const version2 = Utils.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/phantom/i],
    describe(ua) {
      const browser = {
        name: "PhantomJS"
      };
      const version2 = Utils.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/slimerjs/i],
    describe(ua) {
      const browser = {
        name: "SlimerJS"
      };
      const version2 = Utils.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
    describe(ua) {
      const browser = {
        name: "BlackBerry"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/(web|hpw)[o0]s/i],
    describe(ua) {
      const browser = {
        name: "WebOS Browser"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/bada/i],
    describe(ua) {
      const browser = {
        name: "Bada"
      };
      const version2 = Utils.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/tizen/i],
    describe(ua) {
      const browser = {
        name: "Tizen"
      };
      const version2 = Utils.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/qupzilla/i],
    describe(ua) {
      const browser = {
        name: "QupZilla"
      };
      const version2 = Utils.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/firefox|iceweasel|fxios/i],
    describe(ua) {
      const browser = {
        name: "Firefox"
      };
      const version2 = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/electron/i],
    describe(ua) {
      const browser = {
        name: "Electron"
      };
      const version2 = Utils.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/MiuiBrowser/i],
    describe(ua) {
      const browser = {
        name: "Miui"
      };
      const version2 = Utils.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/chromium/i],
    describe(ua) {
      const browser = {
        name: "Chromium"
      };
      const version2 = Utils.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/chrome|crios|crmo/i],
    describe(ua) {
      const browser = {
        name: "Chrome"
      };
      const version2 = Utils.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/GSA/i],
    describe(ua) {
      const browser = {
        name: "Google Search"
      };
      const version2 = Utils.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test(parser) {
      const notLikeAndroid = !parser.test(/like android/i);
      const butAndroid = parser.test(/android/i);
      return notLikeAndroid && butAndroid;
    },
    describe(ua) {
      const browser = {
        name: "Android Browser"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/playstation 4/i],
    describe(ua) {
      const browser = {
        name: "PlayStation 4"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/safari|applewebkit/i],
    describe(ua) {
      const browser = {
        name: "Safari"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/.*/i],
    describe(ua) {
      const regexpWithoutDeviceSpec = /^(.*)\/(.*) /;
      const regexpWithDeviceSpec = /^(.*)\/(.*)[ \t]\((.*)/;
      const hasDeviceSpec = ua.search("\\(") !== -1;
      const regexp = hasDeviceSpec ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;
      return {
        name: Utils.getFirstMatch(regexp, ua),
        version: Utils.getSecondMatch(regexp, ua)
      };
    }
  }
];
var parser_browsers_default = browsersList;

// node_modules/bowser/src/parser-os.js
var parser_os_default = [
  {
    test: [/Roku\/DVP/],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, ua);
      return {
        name: OS_MAP.Roku,
        version: version2
      };
    }
  },
  {
    test: [/windows phone/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.WindowsPhone,
        version: version2
      };
    }
  },
  {
    test: [/windows /i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, ua);
      const versionName = Utils.getWindowsVersionName(version2);
      return {
        name: OS_MAP.Windows,
        version: version2,
        versionName
      };
    }
  },
  {
    test: [/Macintosh(.*?) FxiOS(.*?)\//],
    describe(ua) {
      const result = {
        name: OS_MAP.iOS
      };
      const version2 = Utils.getSecondMatch(/(Version\/)(\d[\d.]+)/, ua);
      if (version2) {
        result.version = version2;
      }
      return result;
    }
  },
  {
    test: [/macintosh/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, ua).replace(/[_\s]/g, ".");
      const versionName = Utils.getMacOSVersionName(version2);
      const os = {
        name: OS_MAP.MacOS,
        version: version2
      };
      if (versionName) {
        os.versionName = versionName;
      }
      return os;
    }
  },
  {
    test: [/(ipod|iphone|ipad)/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, ua).replace(/[_\s]/g, ".");
      return {
        name: OS_MAP.iOS,
        version: version2
      };
    }
  },
  {
    test(parser) {
      const notLikeAndroid = !parser.test(/like android/i);
      const butAndroid = parser.test(/android/i);
      return notLikeAndroid && butAndroid;
    },
    describe(ua) {
      const version2 = Utils.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, ua);
      const versionName = Utils.getAndroidVersionName(version2);
      const os = {
        name: OS_MAP.Android,
        version: version2
      };
      if (versionName) {
        os.versionName = versionName;
      }
      return os;
    }
  },
  {
    test: [/(web|hpw)[o0]s/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, ua);
      const os = {
        name: OS_MAP.WebOS
      };
      if (version2 && version2.length) {
        os.version = version2;
      }
      return os;
    }
  },
  {
    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, ua) || Utils.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, ua) || Utils.getFirstMatch(/\bbb(\d+)/i, ua);
      return {
        name: OS_MAP.BlackBerry,
        version: version2
      };
    }
  },
  {
    test: [/bada/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.Bada,
        version: version2
      };
    }
  },
  {
    test: [/tizen/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.Tizen,
        version: version2
      };
    }
  },
  {
    test: [/linux/i],
    describe() {
      return {
        name: OS_MAP.Linux
      };
    }
  },
  {
    test: [/CrOS/],
    describe() {
      return {
        name: OS_MAP.ChromeOS
      };
    }
  },
  {
    test: [/PlayStation 4/],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.PlayStation4,
        version: version2
      };
    }
  }
];

// node_modules/bowser/src/parser-platforms.js
var parser_platforms_default = [
  {
    test: [/googlebot/i],
    describe() {
      return {
        type: "bot",
        vendor: "Google"
      };
    }
  },
  {
    test: [/huawei/i],
    describe(ua) {
      const model = Utils.getFirstMatch(/(can-l01)/i, ua) && "Nova";
      const platform = {
        type: PLATFORMS_MAP.mobile,
        vendor: "Huawei"
      };
      if (model) {
        platform.model = model;
      }
      return platform;
    }
  },
  {
    test: [/nexus\s*(?:7|8|9|10).*/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Nexus"
      };
    }
  },
  {
    test: [/ipad/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Apple",
        model: "iPad"
      };
    }
  },
  {
    test: [/Macintosh(.*?) FxiOS(.*?)\//],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Apple",
        model: "iPad"
      };
    }
  },
  {
    test: [/kftt build/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Amazon",
        model: "Kindle Fire HD 7"
      };
    }
  },
  {
    test: [/silk/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Amazon"
      };
    }
  },
  {
    test: [/tablet(?! pc)/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet
      };
    }
  },
  {
    test(parser) {
      const iDevice = parser.test(/ipod|iphone/i);
      const likeIDevice = parser.test(/like (ipod|iphone)/i);
      return iDevice && !likeIDevice;
    },
    describe(ua) {
      const model = Utils.getFirstMatch(/(ipod|iphone)/i, ua);
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "Apple",
        model
      };
    }
  },
  {
    test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
    describe() {
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "Nexus"
      };
    }
  },
  {
    test: [/[^-]mobi/i],
    describe() {
      return {
        type: PLATFORMS_MAP.mobile
      };
    }
  },
  {
    test(parser) {
      return parser.getBrowserName(true) === "blackberry";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "BlackBerry"
      };
    }
  },
  {
    test(parser) {
      return parser.getBrowserName(true) === "bada";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile
      };
    }
  },
  {
    test(parser) {
      return parser.getBrowserName() === "windows phone";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "Microsoft"
      };
    }
  },
  {
    test(parser) {
      const osMajorVersion = Number(String(parser.getOSVersion()).split(".")[0]);
      return parser.getOSName(true) === "android" && osMajorVersion >= 3;
    },
    describe() {
      return {
        type: PLATFORMS_MAP.tablet
      };
    }
  },
  {
    test(parser) {
      return parser.getOSName(true) === "android";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile
      };
    }
  },
  {
    test(parser) {
      return parser.getOSName(true) === "macos";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.desktop,
        vendor: "Apple"
      };
    }
  },
  {
    test(parser) {
      return parser.getOSName(true) === "windows";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.desktop
      };
    }
  },
  {
    test(parser) {
      return parser.getOSName(true) === "linux";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.desktop
      };
    }
  },
  {
    test(parser) {
      return parser.getOSName(true) === "playstation 4";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.tv
      };
    }
  },
  {
    test(parser) {
      return parser.getOSName(true) === "roku";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.tv
      };
    }
  }
];

// node_modules/bowser/src/parser-engines.js
var parser_engines_default = [
  {
    test(parser) {
      return parser.getBrowserName(true) === "microsoft edge";
    },
    describe(ua) {
      const isBlinkBased = /\sedg\//i.test(ua);
      if (isBlinkBased) {
        return {
          name: ENGINE_MAP.Blink
        };
      }
      const version2 = Utils.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, ua);
      return {
        name: ENGINE_MAP.EdgeHTML,
        version: version2
      };
    }
  },
  {
    test: [/trident/i],
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Trident
      };
      const version2 = Utils.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        engine.version = version2;
      }
      return engine;
    }
  },
  {
    test(parser) {
      return parser.test(/presto/i);
    },
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Presto
      };
      const version2 = Utils.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        engine.version = version2;
      }
      return engine;
    }
  },
  {
    test(parser) {
      const isGecko = parser.test(/gecko/i);
      const likeGecko = parser.test(/like gecko/i);
      return isGecko && !likeGecko;
    },
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Gecko
      };
      const version2 = Utils.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        engine.version = version2;
      }
      return engine;
    }
  },
  {
    test: [/(apple)?webkit\/537\.36/i],
    describe() {
      return {
        name: ENGINE_MAP.Blink
      };
    }
  },
  {
    test: [/(apple)?webkit/i],
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.WebKit
      };
      const version2 = Utils.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        engine.version = version2;
      }
      return engine;
    }
  }
];

// node_modules/bowser/src/parser.js
var Parser2 = class {
  constructor(UA, skipParsing = false) {
    if (UA === void 0 || UA === null || UA === "") {
      throw new Error("UserAgent parameter can't be empty");
    }
    this._ua = UA;
    this.parsedResult = {};
    if (skipParsing !== true) {
      this.parse();
    }
  }
  getUA() {
    return this._ua;
  }
  test(regex) {
    return regex.test(this._ua);
  }
  parseBrowser() {
    this.parsedResult.browser = {};
    const browserDescriptor = Utils.find(parser_browsers_default, (_browser) => {
      if (typeof _browser.test === "function") {
        return _browser.test(this);
      }
      if (_browser.test instanceof Array) {
        return _browser.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (browserDescriptor) {
      this.parsedResult.browser = browserDescriptor.describe(this.getUA());
    }
    return this.parsedResult.browser;
  }
  getBrowser() {
    if (this.parsedResult.browser) {
      return this.parsedResult.browser;
    }
    return this.parseBrowser();
  }
  getBrowserName(toLowerCase) {
    if (toLowerCase) {
      return String(this.getBrowser().name).toLowerCase() || "";
    }
    return this.getBrowser().name || "";
  }
  getBrowserVersion() {
    return this.getBrowser().version;
  }
  getOS() {
    if (this.parsedResult.os) {
      return this.parsedResult.os;
    }
    return this.parseOS();
  }
  parseOS() {
    this.parsedResult.os = {};
    const os = Utils.find(parser_os_default, (_os) => {
      if (typeof _os.test === "function") {
        return _os.test(this);
      }
      if (_os.test instanceof Array) {
        return _os.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (os) {
      this.parsedResult.os = os.describe(this.getUA());
    }
    return this.parsedResult.os;
  }
  getOSName(toLowerCase) {
    const { name } = this.getOS();
    if (toLowerCase) {
      return String(name).toLowerCase() || "";
    }
    return name || "";
  }
  getOSVersion() {
    return this.getOS().version;
  }
  getPlatform() {
    if (this.parsedResult.platform) {
      return this.parsedResult.platform;
    }
    return this.parsePlatform();
  }
  getPlatformType(toLowerCase = false) {
    const { type } = this.getPlatform();
    if (toLowerCase) {
      return String(type).toLowerCase() || "";
    }
    return type || "";
  }
  parsePlatform() {
    this.parsedResult.platform = {};
    const platform = Utils.find(parser_platforms_default, (_platform) => {
      if (typeof _platform.test === "function") {
        return _platform.test(this);
      }
      if (_platform.test instanceof Array) {
        return _platform.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (platform) {
      this.parsedResult.platform = platform.describe(this.getUA());
    }
    return this.parsedResult.platform;
  }
  getEngine() {
    if (this.parsedResult.engine) {
      return this.parsedResult.engine;
    }
    return this.parseEngine();
  }
  getEngineName(toLowerCase) {
    if (toLowerCase) {
      return String(this.getEngine().name).toLowerCase() || "";
    }
    return this.getEngine().name || "";
  }
  parseEngine() {
    this.parsedResult.engine = {};
    const engine = Utils.find(parser_engines_default, (_engine) => {
      if (typeof _engine.test === "function") {
        return _engine.test(this);
      }
      if (_engine.test instanceof Array) {
        return _engine.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (engine) {
      this.parsedResult.engine = engine.describe(this.getUA());
    }
    return this.parsedResult.engine;
  }
  parse() {
    this.parseBrowser();
    this.parseOS();
    this.parsePlatform();
    this.parseEngine();
    return this;
  }
  getResult() {
    return Utils.assign({}, this.parsedResult);
  }
  satisfies(checkTree) {
    const platformsAndOSes = {};
    let platformsAndOSCounter = 0;
    const browsers = {};
    let browsersCounter = 0;
    const allDefinitions = Object.keys(checkTree);
    allDefinitions.forEach((key) => {
      const currentDefinition = checkTree[key];
      if (typeof currentDefinition === "string") {
        browsers[key] = currentDefinition;
        browsersCounter += 1;
      } else if (typeof currentDefinition === "object") {
        platformsAndOSes[key] = currentDefinition;
        platformsAndOSCounter += 1;
      }
    });
    if (platformsAndOSCounter > 0) {
      const platformsAndOSNames = Object.keys(platformsAndOSes);
      const OSMatchingDefinition = Utils.find(platformsAndOSNames, (name) => this.isOS(name));
      if (OSMatchingDefinition) {
        const osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);
        if (osResult !== void 0) {
          return osResult;
        }
      }
      const platformMatchingDefinition = Utils.find(
        platformsAndOSNames,
        (name) => this.isPlatform(name)
      );
      if (platformMatchingDefinition) {
        const platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);
        if (platformResult !== void 0) {
          return platformResult;
        }
      }
    }
    if (browsersCounter > 0) {
      const browserNames = Object.keys(browsers);
      const matchingDefinition = Utils.find(browserNames, (name) => this.isBrowser(name, true));
      if (matchingDefinition !== void 0) {
        return this.compareVersion(browsers[matchingDefinition]);
      }
    }
    return void 0;
  }
  isBrowser(browserName, includingAlias = false) {
    const defaultBrowserName = this.getBrowserName().toLowerCase();
    let browserNameLower = browserName.toLowerCase();
    const alias = Utils.getBrowserTypeByAlias(browserNameLower);
    if (includingAlias && alias) {
      browserNameLower = alias.toLowerCase();
    }
    return browserNameLower === defaultBrowserName;
  }
  compareVersion(version2) {
    let expectedResults = [0];
    let comparableVersion = version2;
    let isLoose = false;
    const currentBrowserVersion = this.getBrowserVersion();
    if (typeof currentBrowserVersion !== "string") {
      return void 0;
    }
    if (version2[0] === ">" || version2[0] === "<") {
      comparableVersion = version2.substr(1);
      if (version2[1] === "=") {
        isLoose = true;
        comparableVersion = version2.substr(2);
      } else {
        expectedResults = [];
      }
      if (version2[0] === ">") {
        expectedResults.push(1);
      } else {
        expectedResults.push(-1);
      }
    } else if (version2[0] === "=") {
      comparableVersion = version2.substr(1);
    } else if (version2[0] === "~") {
      isLoose = true;
      comparableVersion = version2.substr(1);
    }
    return expectedResults.indexOf(
      Utils.compareVersions(currentBrowserVersion, comparableVersion, isLoose)
    ) > -1;
  }
  isOS(osName) {
    return this.getOSName(true) === String(osName).toLowerCase();
  }
  isPlatform(platformType) {
    return this.getPlatformType(true) === String(platformType).toLowerCase();
  }
  isEngine(engineName) {
    return this.getEngineName(true) === String(engineName).toLowerCase();
  }
  is(anything, includingAlias = false) {
    return this.isBrowser(anything, includingAlias) || this.isOS(anything) || this.isPlatform(anything);
  }
  some(anythings = []) {
    return anythings.some((anything) => this.is(anything));
  }
};
var parser_default = Parser2;

// node_modules/bowser/src/bowser.js
var Bowser = class {
  static getParser(UA, skipParsing = false) {
    if (typeof UA !== "string") {
      throw new Error("UserAgent should be a string");
    }
    return new parser_default(UA, skipParsing);
  }
  static parse(UA) {
    return new parser_default(UA).getResult();
  }
  static get BROWSER_MAP() {
    return BROWSER_MAP;
  }
  static get ENGINE_MAP() {
    return ENGINE_MAP;
  }
  static get OS_MAP() {
    return OS_MAP;
  }
  static get PLATFORMS_MAP() {
    return PLATFORMS_MAP;
  }
};
var bowser_default = Bowser;

// node_modules/@aws-sdk/util-user-agent-browser/dist/es/index.js
var defaultUserAgent = function(_a) {
  var serviceId = _a.serviceId, clientVersion = _a.clientVersion;
  return function() {
    return __awaiter4(void 0, void 0, void 0, function() {
      var parsedUA, sections;
      var _a2, _b, _c, _d, _e, _f, _g;
      return __generator4(this, function(_h) {
        parsedUA = ((_a2 = window === null || window === void 0 ? void 0 : window.navigator) === null || _a2 === void 0 ? void 0 : _a2.userAgent) ? bowser_default.parse(window.navigator.userAgent) : void 0;
        sections = [
          ["aws-sdk-js", clientVersion],
          ["os/" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || "other"), (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version],
          ["lang/js"],
          ["md/browser", ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : "unknown") + "_" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : "unknown")]
        ];
        if (serviceId) {
          sections.push(["api/" + serviceId, clientVersion]);
        }
        return [2, sections];
      });
    });
  };
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
init_es2();

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/endpoints.js
var AWS_TEMPLATE = "logs.{region}.amazonaws.com";
var AWS_CN_TEMPLATE = "logs.{region}.amazonaws.com.cn";
var AWS_ISO_TEMPLATE = "logs.{region}.c2s.ic.gov";
var AWS_ISO_B_TEMPLATE = "logs.{region}.sc2s.sgov.gov";
var AWS_US_GOV_TEMPLATE = "logs.{region}.amazonaws.com";
var AWS_REGIONS = /* @__PURE__ */ new Set([
  "af-south-1",
  "ap-east-1",
  "ap-northeast-1",
  "ap-northeast-2",
  "ap-south-1",
  "ap-southeast-1",
  "ap-southeast-2",
  "ca-central-1",
  "eu-central-1",
  "eu-north-1",
  "eu-south-1",
  "eu-west-1",
  "eu-west-2",
  "eu-west-3",
  "me-south-1",
  "sa-east-1",
  "us-east-1",
  "us-east-2",
  "us-west-1",
  "us-west-2"
]);
var AWS_CN_REGIONS = /* @__PURE__ */ new Set(["cn-north-1", "cn-northwest-1"]);
var AWS_ISO_REGIONS = /* @__PURE__ */ new Set(["us-iso-east-1"]);
var AWS_ISO_B_REGIONS = /* @__PURE__ */ new Set(["us-isob-east-1"]);
var AWS_US_GOV_REGIONS = /* @__PURE__ */ new Set(["us-gov-east-1", "us-gov-west-1"]);
var defaultRegionInfoProvider = function(region, options) {
  var regionInfo = void 0;
  switch (region) {
    case "af-south-1":
      regionInfo = {
        hostname: "logs.af-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-east-1":
      regionInfo = {
        hostname: "logs.ap-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-northeast-1":
      regionInfo = {
        hostname: "logs.ap-northeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-northeast-2":
      regionInfo = {
        hostname: "logs.ap-northeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-south-1":
      regionInfo = {
        hostname: "logs.ap-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-1":
      regionInfo = {
        hostname: "logs.ap-southeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-2":
      regionInfo = {
        hostname: "logs.ap-southeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ca-central-1":
      regionInfo = {
        hostname: "logs.ca-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "cn-north-1":
      regionInfo = {
        hostname: "logs.cn-north-1.amazonaws.com.cn",
        partition: "aws-cn"
      };
      break;
    case "cn-northwest-1":
      regionInfo = {
        hostname: "logs.cn-northwest-1.amazonaws.com.cn",
        partition: "aws-cn"
      };
      break;
    case "eu-central-1":
      regionInfo = {
        hostname: "logs.eu-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-north-1":
      regionInfo = {
        hostname: "logs.eu-north-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-south-1":
      regionInfo = {
        hostname: "logs.eu-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-1":
      regionInfo = {
        hostname: "logs.eu-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-2":
      regionInfo = {
        hostname: "logs.eu-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-3":
      regionInfo = {
        hostname: "logs.eu-west-3.amazonaws.com",
        partition: "aws"
      };
      break;
    case "fips-us-east-1":
      regionInfo = {
        hostname: "logs-fips.us-east-1.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-1"
      };
      break;
    case "fips-us-east-2":
      regionInfo = {
        hostname: "logs-fips.us-east-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-2"
      };
      break;
    case "fips-us-west-1":
      regionInfo = {
        hostname: "logs-fips.us-west-1.amazonaws.com",
        partition: "aws",
        signingRegion: "us-west-1"
      };
      break;
    case "fips-us-west-2":
      regionInfo = {
        hostname: "logs-fips.us-west-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-west-2"
      };
      break;
    case "me-south-1":
      regionInfo = {
        hostname: "logs.me-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "sa-east-1":
      regionInfo = {
        hostname: "logs.sa-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-1":
      regionInfo = {
        hostname: "logs.us-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-2":
      regionInfo = {
        hostname: "logs.us-east-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-gov-east-1":
      regionInfo = {
        hostname: "logs.us-gov-east-1.amazonaws.com",
        partition: "aws-us-gov",
        signingRegion: "us-gov-east-1"
      };
      break;
    case "us-gov-west-1":
      regionInfo = {
        hostname: "logs.us-gov-west-1.amazonaws.com",
        partition: "aws-us-gov",
        signingRegion: "us-gov-west-1"
      };
      break;
    case "us-iso-east-1":
      regionInfo = {
        hostname: "logs.us-iso-east-1.c2s.ic.gov",
        partition: "aws-iso"
      };
      break;
    case "us-isob-east-1":
      regionInfo = {
        hostname: "logs.us-isob-east-1.sc2s.sgov.gov",
        partition: "aws-iso-b"
      };
      break;
    case "us-west-1":
      regionInfo = {
        hostname: "logs.us-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-west-2":
      regionInfo = {
        hostname: "logs.us-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    default:
      if (AWS_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_TEMPLATE.replace("{region}", region),
          partition: "aws"
        };
      }
      if (AWS_CN_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_CN_TEMPLATE.replace("{region}", region),
          partition: "aws-cn"
        };
      }
      if (AWS_ISO_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_TEMPLATE.replace("{region}", region),
          partition: "aws-iso"
        };
      }
      if (AWS_ISO_B_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_B_TEMPLATE.replace("{region}", region),
          partition: "aws-iso-b"
        };
      }
      if (AWS_US_GOV_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_US_GOV_TEMPLATE.replace("{region}", region),
          partition: "aws-us-gov"
        };
      }
      if (regionInfo === void 0) {
        regionInfo = {
          hostname: AWS_TEMPLATE.replace("{region}", region),
          partition: "aws"
        };
      }
  }
  return Promise.resolve(__assign4({ signingService: "logs" }, regionInfo));
};

// node_modules/@aws-sdk/querystring-parser/dist/es/index.js
function parseQueryString(querystring) {
  var e_1, _a;
  var query = {};
  querystring = querystring.replace(/^\?/, "");
  if (querystring) {
    try {
      for (var _b = __values4(querystring.split("&")), _c = _b.next(); !_c.done; _c = _b.next()) {
        var pair = _c.value;
        var _d = __read7(pair.split("="), 2), key = _d[0], _e = _d[1], value = _e === void 0 ? null : _e;
        key = decodeURIComponent(key);
        if (value) {
          value = decodeURIComponent(value);
        }
        if (!(key in query)) {
          query[key] = value;
        } else if (Array.isArray(query[key])) {
          query[key].push(value);
        } else {
          query[key] = [query[key], value];
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  return query;
}

// node_modules/@aws-sdk/url-parser/dist/es/index.js
var parseUrl = function(url) {
  var _a = new URL(url), hostname = _a.hostname, pathname = _a.pathname, port = _a.port, protocol = _a.protocol, search = _a.search;
  var query;
  if (search) {
    query = parseQueryString(search);
  }
  return {
    hostname,
    port: port ? parseInt(port) : void 0,
    protocol,
    path: pathname,
    query
  };
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.shared.js
var ClientSharedValues = {
  apiVersion: "2014-03-28",
  disableHostPrefix: false,
  logger: {},
  regionInfoProvider: defaultRegionInfoProvider,
  serviceId: "CloudWatch Logs",
  urlParser: parseUrl
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
var ClientDefaultValues = __assign4(__assign4({}, ClientSharedValues), { runtime: "browser", base64Decoder: fromBase64, base64Encoder: toBase64, bodyLengthChecker: calculateBodyLength, credentialDefaultProvider: function(_) {
  return function() {
    return Promise.reject(new Error("Credential is missing"));
  };
}, defaultUserAgentProvider: defaultUserAgent({
  serviceId: ClientSharedValues.serviceId,
  clientVersion: package_default.version
}), maxAttempts: DEFAULT_MAX_ATTEMPTS, region: invalidProvider("Region is missing"), requestHandler: new FetchHttpHandler(), sha256: import_sha256_browser.Sha256, streamCollector, utf8Decoder: fromUtf86, utf8Encoder: toUtf86 });

// node_modules/@aws-sdk/config-resolver/dist/es/EndpointsConfig.js
var resolveEndpointsConfig = function(input) {
  var _a;
  return __assign5(__assign5({}, input), { tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true, endpoint: input.endpoint ? normalizeEndpoint(input) : function() {
    return getEndPointFromRegion(input);
  }, isCustomEndpoint: input.endpoint ? true : false });
};
var normalizeEndpoint = function(input) {
  var endpoint = input.endpoint, urlParser = input.urlParser;
  if (typeof endpoint === "string") {
    var promisified_1 = Promise.resolve(urlParser(endpoint));
    return function() {
      return promisified_1;
    };
  } else if (typeof endpoint === "object") {
    var promisified_2 = Promise.resolve(endpoint);
    return function() {
      return promisified_2;
    };
  }
  return endpoint;
};
var getEndPointFromRegion = function(input) {
  return __awaiter4(void 0, void 0, void 0, function() {
    var _a, tls, region, dnsHostRegex, hostname;
    var _b;
    return __generator4(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = input.tls, tls = _a === void 0 ? true : _a;
          return [4, input.region()];
        case 1:
          region = _c.sent();
          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
          if (!dnsHostRegex.test(region)) {
            throw new Error("Invalid region in client config");
          }
          return [4, input.regionInfoProvider(region)];
        case 2:
          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;
          if (!hostname) {
            throw new Error("Cannot resolve hostname from client config");
          }
          return [2, input.urlParser((tls ? "https:" : "http:") + "//" + hostname)];
      }
    });
  });
};

// node_modules/@aws-sdk/config-resolver/dist/es/RegionConfig.js
var resolveRegionConfig = function(input) {
  if (!input.region) {
    throw new Error("Region is missing");
  }
  return __assign5(__assign5({}, input), { region: normalizeRegion(input.region) });
};
var normalizeRegion = function(region) {
  if (typeof region === "string") {
    var promisified_1 = Promise.resolve(region);
    return function() {
      return promisified_1;
    };
  }
  return region;
};

// node_modules/@aws-sdk/middleware-content-length/dist/es/index.js
var CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
  var _this = this;
  return function(next) {
    return function(args) {
      return __awaiter4(_this, void 0, void 0, function() {
        var request, body, headers, length;
        var _a;
        return __generator4(this, function(_b) {
          request = args.request;
          if (HttpRequest.isInstance(request)) {
            body = request.body, headers = request.headers;
            if (body && Object.keys(headers).map(function(str) {
              return str.toLowerCase();
            }).indexOf(CONTENT_LENGTH_HEADER) === -1) {
              length = bodyLengthChecker(body);
              if (length !== void 0) {
                request.headers = __assign5(__assign5({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER] = String(length), _a));
              }
            }
          }
          return [2, next(__assign5(__assign5({}, args), { request }))];
        });
      });
    };
  };
}
var contentLengthMiddlewareOptions = {
  step: "build",
  tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
  name: "contentLengthMiddleware",
  override: true
};
var getContentLengthPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-host-header/dist/es/index.js
function resolveHostHeaderConfig(input) {
  return input;
}
var hostHeaderMiddleware = function(options) {
  return function(next) {
    return function(args) {
      return __awaiter4(void 0, void 0, void 0, function() {
        var request, _a, handlerProtocol;
        return __generator4(this, function(_b) {
          if (!HttpRequest.isInstance(args.request))
            return [2, next(args)];
          request = args.request;
          _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? "" : _a;
          if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
            delete request.headers["host"];
            request.headers[":authority"] = "";
          } else if (!request.headers["host"]) {
            request.headers["host"] = request.hostname;
          }
          return [2, next(args)];
        });
      });
    };
  };
};
var hostHeaderMiddlewareOptions = {
  name: "hostHeaderMiddleware",
  step: "build",
  priority: "low",
  tags: ["HOST"],
  override: true
};
var getHostHeaderPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-logger/dist/es/loggerMiddleware.js
var loggerMiddleware = function() {
  return function(next, context) {
    return function(args) {
      return __awaiter4(void 0, void 0, void 0, function() {
        var clientName, commandName, inputFilterSensitiveLog, logger13, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;
        return __generator4(this, function(_b) {
          switch (_b.label) {
            case 0:
              clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger13 = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;
              return [4, next(args)];
            case 1:
              response = _b.sent();
              if (!logger13) {
                return [2, response];
              }
              if (typeof logger13.info === "function") {
                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest2(_a, ["$metadata"]);
                logger13.info({
                  clientName,
                  commandName,
                  input: inputFilterSensitiveLog(args.input),
                  output: outputFilterSensitiveLog(outputWithoutMetadata),
                  metadata: $metadata
                });
              }
              return [2, response];
          }
        });
      });
    };
  };
};
var loggerMiddlewareOptions = {
  name: "loggerMiddleware",
  tags: ["LOGGER"],
  step: "initialize",
  override: true
};
var getLoggerPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/signature-v4/dist/es/constants.js
var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
var AUTH_HEADER = "authorization";
var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
var DATE_HEADER = "date";
var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
var SHA256_HEADER = "x-amz-content-sha256";
var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
var ALWAYS_UNSIGNABLE_HEADERS = {
  authorization: true,
  "cache-control": true,
  connection: true,
  expect: true,
  from: true,
  "keep-alive": true,
  "max-forwards": true,
  pragma: true,
  referer: true,
  te: true,
  trailer: true,
  "transfer-encoding": true,
  upgrade: true,
  "user-agent": true,
  "x-amzn-trace-id": true
};
var PROXY_HEADER_PATTERN = /^proxy-/;
var SEC_HEADER_PATTERN = /^sec-/;
var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
var MAX_CACHE_SIZE = 50;
var KEY_TYPE_IDENTIFIER = "aws4_request";
var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;

// node_modules/@aws-sdk/signature-v4/dist/es/credentialDerivation.js
var signingKeyCache = {};
var cacheQueue = [];
function createScope(shortDate, region, service) {
  return shortDate + "/" + region + "/" + service + "/" + KEY_TYPE_IDENTIFIER;
}
var getSigningKey = function(sha256Constructor, credentials, shortDate, region, service) {
  return __awaiter4(void 0, void 0, void 0, function() {
    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;
    var e_1, _c;
    return __generator4(this, function(_d) {
      switch (_d.label) {
        case 0:
          return [4, hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];
        case 1:
          credsHash = _d.sent();
          cacheKey = shortDate + ":" + region + ":" + service + ":" + toHex(credsHash) + ":" + credentials.sessionToken;
          if (cacheKey in signingKeyCache) {
            return [2, signingKeyCache[cacheKey]];
          }
          cacheQueue.push(cacheKey);
          while (cacheQueue.length > MAX_CACHE_SIZE) {
            delete signingKeyCache[cacheQueue.shift()];
          }
          key = "AWS4" + credentials.secretAccessKey;
          _d.label = 2;
        case 2:
          _d.trys.push([2, 7, 8, 9]);
          _a = __values4([shortDate, region, service, KEY_TYPE_IDENTIFIER]), _b = _a.next();
          _d.label = 3;
        case 3:
          if (!!_b.done)
            return [3, 6];
          signable = _b.value;
          return [4, hmac(sha256Constructor, key, signable)];
        case 4:
          key = _d.sent();
          _d.label = 5;
        case 5:
          _b = _a.next();
          return [3, 3];
        case 6:
          return [3, 9];
        case 7:
          e_1_1 = _d.sent();
          e_1 = { error: e_1_1 };
          return [3, 9];
        case 8:
          try {
            if (_b && !_b.done && (_c = _a.return))
              _c.call(_a);
          } finally {
            if (e_1)
              throw e_1.error;
          }
          return [7];
        case 9:
          return [2, signingKeyCache[cacheKey] = key];
      }
    });
  });
};
function hmac(ctor, secret, data) {
  var hash2 = new ctor(secret);
  hash2.update(data);
  return hash2.digest();
}

// node_modules/@aws-sdk/signature-v4/dist/es/getCanonicalHeaders.js
function getCanonicalHeaders(_a, unsignableHeaders, signableHeaders) {
  var e_1, _b;
  var headers = _a.headers;
  var canonical = {};
  try {
    for (var _c = __values4(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()) {
      var headerName = _d.value;
      var canonicalHeaderName = headerName.toLowerCase();
      if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
          continue;
        }
      }
      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_d && !_d.done && (_b = _c.return))
        _b.call(_c);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return canonical;
}

// node_modules/@aws-sdk/signature-v4/dist/es/getCanonicalQuery.js
function getCanonicalQuery(_a) {
  var e_1, _b;
  var _c = _a.query, query = _c === void 0 ? {} : _c;
  var keys = [];
  var serialized = {};
  var _loop_1 = function(key2) {
    if (key2.toLowerCase() === SIGNATURE_HEADER) {
      return "continue";
    }
    keys.push(key2);
    var value = query[key2];
    if (typeof value === "string") {
      serialized[key2] = escapeUri(key2) + "=" + escapeUri(value);
    } else if (Array.isArray(value)) {
      serialized[key2] = value.slice(0).sort().reduce(function(encoded, value2) {
        return encoded.concat([escapeUri(key2) + "=" + escapeUri(value2)]);
      }, []).join("&");
    }
  };
  try {
    for (var _d = __values4(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {
      var key = _e.value;
      _loop_1(key);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_e && !_e.done && (_b = _d.return))
        _b.call(_d);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return keys.map(function(key2) {
    return serialized[key2];
  }).filter(function(serialized2) {
    return serialized2;
  }).join("&");
}

// node_modules/@aws-sdk/is-array-buffer/dist/es/index.js
var isArrayBuffer = function(arg) {
  return typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
};

// node_modules/@aws-sdk/signature-v4/dist/es/getPayloadHash.js
function getPayloadHash(_a, hashConstructor) {
  var headers = _a.headers, body = _a.body;
  return __awaiter4(this, void 0, void 0, function() {
    var _b, _c, headerName, hashCtor, _d;
    var e_1, _e;
    return __generator4(this, function(_f) {
      switch (_f.label) {
        case 0:
          try {
            for (_b = __values4(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
              headerName = _c.value;
              if (headerName.toLowerCase() === SHA256_HEADER) {
                return [2, headers[headerName]];
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_e = _b.return))
                _e.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          if (!(body == void 0))
            return [3, 1];
          return [2, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"];
        case 1:
          if (!(typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)))
            return [3, 3];
          hashCtor = new hashConstructor();
          hashCtor.update(body);
          _d = toHex;
          return [4, hashCtor.digest()];
        case 2:
          return [2, _d.apply(void 0, [_f.sent()])];
        case 3:
          return [2, UNSIGNED_PAYLOAD];
      }
    });
  });
}

// node_modules/@aws-sdk/signature-v4/dist/es/hasHeader.js
function hasHeader(soughtHeader, headers) {
  var e_1, _a;
  soughtHeader = soughtHeader.toLowerCase();
  try {
    for (var _b = __values4(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return false;
}

// node_modules/@aws-sdk/signature-v4/dist/es/cloneRequest.js
function cloneRequest(_a) {
  var headers = _a.headers, query = _a.query, rest = __rest2(_a, ["headers", "query"]);
  return __assign5(__assign5({}, rest), { headers: __assign5({}, headers), query: query ? cloneQuery2(query) : void 0 });
}
function cloneQuery2(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign5(__assign5({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread4(param) : param, _a));
  }, {});
}

// node_modules/@aws-sdk/signature-v4/dist/es/moveHeadersToQuery.js
function moveHeadersToQuery(request, options) {
  var e_1, _a;
  var _b;
  if (options === void 0) {
    options = {};
  }
  var _c = typeof request.clone === "function" ? request.clone() : cloneRequest(request), headers = _c.headers, _d = _c.query, query = _d === void 0 ? {} : _d;
  try {
    for (var _e = __values4(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()) {
      var name = _f.value;
      var lname = name.toLowerCase();
      if (lname.substr(0, 6) === "x-amz-" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {
        query[name] = headers[name];
        delete headers[name];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_f && !_f.done && (_a = _e.return))
        _a.call(_e);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return __assign5(__assign5({}, request), {
    headers,
    query
  });
}

// node_modules/@aws-sdk/signature-v4/dist/es/prepareRequest.js
function prepareRequest(request) {
  var e_1, _a;
  request = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
  try {
    for (var _b = __values4(Object.keys(request.headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
        delete request.headers[headerName];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return request;
}

// node_modules/@aws-sdk/signature-v4/dist/es/utilDate.js
function iso8601(time) {
  return toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
}
function toDate(time) {
  if (typeof time === "number") {
    return new Date(time * 1e3);
  }
  if (typeof time === "string") {
    if (Number(time)) {
      return new Date(Number(time) * 1e3);
    }
    return new Date(time);
  }
  return time;
}

// node_modules/@aws-sdk/signature-v4/dist/es/SignatureV4.js
var SignatureV4 = function() {
  function SignatureV42(_a) {
    var applyChecksum = _a.applyChecksum, credentials = _a.credentials, region = _a.region, service = _a.service, sha256 = _a.sha256, _b = _a.uriEscapePath, uriEscapePath = _b === void 0 ? true : _b;
    this.service = service;
    this.sha256 = sha256;
    this.uriEscapePath = uriEscapePath;
    this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
    this.regionProvider = normalizeRegionProvider(region);
    this.credentialProvider = normalizeCredentialsProvider(credentials);
  }
  SignatureV42.prototype.presign = function(originalRequest, options) {
    if (options === void 0) {
      options = {};
    }
    return __awaiter4(this, void 0, void 0, function() {
      var _a, signingDate, _b, expiresIn, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, credentials, region, _c, _d, longDate, shortDate, scope, request, canonicalHeaders, _e, _f, _g, _h, _j, _k;
      return __generator4(this, function(_l) {
        switch (_l.label) {
          case 0:
            _a = options.signingDate, signingDate = _a === void 0 ? new Date() : _a, _b = options.expiresIn, expiresIn = _b === void 0 ? 3600 : _b, unsignableHeaders = options.unsignableHeaders, unhoistableHeaders = options.unhoistableHeaders, signableHeaders = options.signableHeaders, signingRegion = options.signingRegion, signingService = options.signingService;
            return [4, this.credentialProvider()];
          case 1:
            credentials = _l.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _c = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _c = _l.sent();
            _l.label = 4;
          case 4:
            region = _c;
            _d = formatDate(signingDate), longDate = _d.longDate, shortDate = _d.shortDate;
            if (expiresIn > MAX_PRESIGNED_TTL) {
              return [2, Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future")];
            }
            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });
            if (credentials.sessionToken) {
              request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
            }
            request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
            request.query[CREDENTIAL_QUERY_PARAM] = credentials.accessKeyId + "/" + scope;
            request.query[AMZ_DATE_QUERY_PARAM] = longDate;
            request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
            canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
            request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
            _e = request.query;
            _f = SIGNATURE_QUERY_PARAM;
            _g = this.getSignature;
            _h = [
              longDate,
              scope,
              this.getSigningKey(credentials, region, shortDate, signingService)
            ];
            _j = this.createCanonicalRequest;
            _k = [request, canonicalHeaders];
            return [4, getPayloadHash(originalRequest, this.sha256)];
          case 5:
            return [4, _g.apply(this, _h.concat([_j.apply(this, _k.concat([_l.sent()]))]))];
          case 6:
            _e[_f] = _l.sent();
            return [2, request];
        }
      });
    });
  };
  SignatureV42.prototype.sign = function(toSign, options) {
    return __awaiter4(this, void 0, void 0, function() {
      return __generator4(this, function(_a) {
        if (typeof toSign === "string") {
          return [2, this.signString(toSign, options)];
        } else if (toSign.headers && toSign.payload) {
          return [2, this.signEvent(toSign, options)];
        } else {
          return [2, this.signRequest(toSign, options)];
        }
        return [2];
      });
    });
  };
  SignatureV42.prototype.signEvent = function(_a, _b) {
    var headers = _a.headers, payload = _a.payload;
    var _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, priorSignature = _b.priorSignature, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter4(this, void 0, void 0, function() {
      var region, _d, _e, shortDate, longDate, scope, hashedPayload, hash2, hashedHeaders, _f, stringToSign;
      return __generator4(this, function(_g) {
        switch (_g.label) {
          case 0:
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 1];
            _d = signingRegion;
            return [3, 3];
          case 1:
            return [4, this.regionProvider()];
          case 2:
            _d = _g.sent();
            _g.label = 3;
          case 3:
            region = _d;
            _e = formatDate(signingDate), shortDate = _e.shortDate, longDate = _e.longDate;
            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            return [4, getPayloadHash({ headers: {}, body: payload }, this.sha256)];
          case 4:
            hashedPayload = _g.sent();
            hash2 = new this.sha256();
            hash2.update(headers);
            _f = toHex;
            return [4, hash2.digest()];
          case 5:
            hashedHeaders = _f.apply(void 0, [_g.sent()]);
            stringToSign = [
              EVENT_ALGORITHM_IDENTIFIER,
              longDate,
              scope,
              priorSignature,
              hashedHeaders,
              hashedPayload
            ].join("\n");
            return [2, this.signString(stringToSign, { signingDate, signingRegion: region, signingService })];
        }
      });
    });
  };
  SignatureV42.prototype.signString = function(stringToSign, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter4(this, void 0, void 0, function() {
      var credentials, region, _d, shortDate, hash2, _e, _f, _g;
      return __generator4(this, function(_h) {
        switch (_h.label) {
          case 0:
            return [4, this.credentialProvider()];
          case 1:
            credentials = _h.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _d = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _d = _h.sent();
            _h.label = 4;
          case 4:
            region = _d;
            shortDate = formatDate(signingDate).shortDate;
            _f = (_e = this.sha256).bind;
            return [4, this.getSigningKey(credentials, region, shortDate, signingService)];
          case 5:
            hash2 = new (_f.apply(_e, [void 0, _h.sent()]))();
            hash2.update(stringToSign);
            _g = toHex;
            return [4, hash2.digest()];
          case 6:
            return [2, _g.apply(void 0, [_h.sent()])];
        }
      });
    });
  };
  SignatureV42.prototype.signRequest = function(requestToSign, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signableHeaders = _b.signableHeaders, unsignableHeaders = _b.unsignableHeaders, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter4(this, void 0, void 0, function() {
      var credentials, region, _d, request, _e, longDate, shortDate, scope, payloadHash, canonicalHeaders, signature;
      return __generator4(this, function(_f) {
        switch (_f.label) {
          case 0:
            return [4, this.credentialProvider()];
          case 1:
            credentials = _f.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _d = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _d = _f.sent();
            _f.label = 4;
          case 4:
            region = _d;
            request = prepareRequest(requestToSign);
            _e = formatDate(signingDate), longDate = _e.longDate, shortDate = _e.shortDate;
            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            request.headers[AMZ_DATE_HEADER] = longDate;
            if (credentials.sessionToken) {
              request.headers[TOKEN_HEADER] = credentials.sessionToken;
            }
            return [4, getPayloadHash(request, this.sha256)];
          case 5:
            payloadHash = _f.sent();
            if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
              request.headers[SHA256_HEADER] = payloadHash;
            }
            canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
            return [4, this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash))];
          case 6:
            signature = _f.sent();
            request.headers[AUTH_HEADER] = ALGORITHM_IDENTIFIER + " " + ("Credential=" + credentials.accessKeyId + "/" + scope + ", ") + ("SignedHeaders=" + getCanonicalHeaderList(canonicalHeaders) + ", ") + ("Signature=" + signature);
            return [2, request];
        }
      });
    });
  };
  SignatureV42.prototype.createCanonicalRequest = function(request, canonicalHeaders, payloadHash) {
    var sortedHeaders = Object.keys(canonicalHeaders).sort();
    return request.method + "\n" + this.getCanonicalPath(request) + "\n" + getCanonicalQuery(request) + "\n" + sortedHeaders.map(function(name) {
      return name + ":" + canonicalHeaders[name];
    }).join("\n") + "\n\n" + sortedHeaders.join(";") + "\n" + payloadHash;
  };
  SignatureV42.prototype.createStringToSign = function(longDate, credentialScope, canonicalRequest) {
    return __awaiter4(this, void 0, void 0, function() {
      var hash2, hashedRequest;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            hash2 = new this.sha256();
            hash2.update(canonicalRequest);
            return [4, hash2.digest()];
          case 1:
            hashedRequest = _a.sent();
            return [2, ALGORITHM_IDENTIFIER + "\n" + longDate + "\n" + credentialScope + "\n" + toHex(hashedRequest)];
        }
      });
    });
  };
  SignatureV42.prototype.getCanonicalPath = function(_a) {
    var path = _a.path;
    if (this.uriEscapePath) {
      var doubleEncoded = encodeURIComponent(path.replace(/^\//, ""));
      return "/" + doubleEncoded.replace(/%2F/g, "/");
    }
    return path;
  };
  SignatureV42.prototype.getSignature = function(longDate, credentialScope, keyPromise, canonicalRequest) {
    return __awaiter4(this, void 0, void 0, function() {
      var stringToSign, hash2, _a, _b, _c;
      return __generator4(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, this.createStringToSign(longDate, credentialScope, canonicalRequest)];
          case 1:
            stringToSign = _d.sent();
            _b = (_a = this.sha256).bind;
            return [4, keyPromise];
          case 2:
            hash2 = new (_b.apply(_a, [void 0, _d.sent()]))();
            hash2.update(stringToSign);
            _c = toHex;
            return [4, hash2.digest()];
          case 3:
            return [2, _c.apply(void 0, [_d.sent()])];
        }
      });
    });
  };
  SignatureV42.prototype.getSigningKey = function(credentials, region, shortDate, service) {
    return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
  };
  return SignatureV42;
}();
var formatDate = function(now) {
  var longDate = iso8601(now).replace(/[\-:]/g, "");
  return {
    longDate,
    shortDate: longDate.substr(0, 8)
  };
};
var getCanonicalHeaderList = function(headers) {
  return Object.keys(headers).sort().join(";");
};
var normalizeRegionProvider = function(region) {
  if (typeof region === "string") {
    var promisified_1 = Promise.resolve(region);
    return function() {
      return promisified_1;
    };
  } else {
    return region;
  }
};
var normalizeCredentialsProvider = function(credentials) {
  if (typeof credentials === "object") {
    var promisified_2 = Promise.resolve(credentials);
    return function() {
      return promisified_2;
    };
  } else {
    return credentials;
  }
};

// node_modules/@aws-sdk/middleware-signing/dist/es/configurations.js
function resolveAwsAuthConfig(input) {
  var _this = this;
  var credentials = input.credentials || input.credentialDefaultProvider(input);
  var normalizedCreds = normalizeProvider(credentials);
  var _a = input.signingEscapePath, signingEscapePath = _a === void 0 ? true : _a, _b = input.systemClockOffset, systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b, sha256 = input.sha256;
  var signer;
  if (input.signer) {
    signer = normalizeProvider(input.signer);
  } else {
    signer = function() {
      return normalizeProvider(input.region)().then(function(region) {
        return __awaiter4(_this, void 0, void 0, function() {
          return __generator4(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, input.regionInfoProvider(region)];
              case 1:
                return [2, [_a2.sent() || {}, region]];
            }
          });
        });
      }).then(function(_a2) {
        var _b2 = __read7(_a2, 2), regionInfo = _b2[0], region = _b2[1];
        var signingRegion = regionInfo.signingRegion, signingService = regionInfo.signingService;
        input.signingRegion = input.signingRegion || signingRegion || region;
        input.signingName = input.signingName || signingService || input.serviceId;
        return new SignatureV4({
          credentials: normalizedCreds,
          region: input.signingRegion,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        });
      });
    };
  }
  return __assign5(__assign5({}, input), {
    systemClockOffset,
    signingEscapePath,
    credentials: normalizedCreds,
    signer
  });
}
function normalizeProvider(input) {
  if (typeof input === "object") {
    var promisified_1 = Promise.resolve(input);
    return function() {
      return promisified_1;
    };
  }
  return input;
}

// node_modules/@aws-sdk/middleware-signing/dist/es/middleware.js
var isClockSkewed = function(newServerTime, systemClockOffset) {
  return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 3e5;
};
var getSkewCorrectedDate = function(systemClockOffset) {
  return new Date(Date.now() + systemClockOffset);
};
function awsAuthMiddleware(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter4(this, void 0, void 0, function() {
        var signer, _a, output, _b, _c, headers, dateHeader, serverTime;
        var _d;
        return __generator4(this, function(_e) {
          switch (_e.label) {
            case 0:
              if (!HttpRequest.isInstance(args.request))
                return [2, next(args)];
              if (!(typeof options.signer === "function"))
                return [3, 2];
              return [4, options.signer()];
            case 1:
              _a = _e.sent();
              return [3, 3];
            case 2:
              _a = options.signer;
              _e.label = 3;
            case 3:
              signer = _a;
              _b = next;
              _c = [__assign5({}, args)];
              _d = {};
              return [4, signer.sign(args.request, {
                signingDate: new Date(Date.now() + options.systemClockOffset),
                signingRegion: context["signing_region"],
                signingService: context["signing_service"]
              })];
            case 4:
              return [4, _b.apply(void 0, [__assign5.apply(void 0, _c.concat([(_d.request = _e.sent(), _d)]))])];
            case 5:
              output = _e.sent();
              headers = output.response.headers;
              dateHeader = headers && (headers.date || headers.Date);
              if (dateHeader) {
                serverTime = Date.parse(dateHeader);
                if (isClockSkewed(serverTime, options.systemClockOffset)) {
                  options.systemClockOffset = serverTime - Date.now();
                }
              }
              return [2, output];
          }
        });
      });
    };
  };
}
var awsAuthMiddlewareOptions = {
  name: "awsAuthMiddleware",
  tags: ["SIGNATURE", "AWSAUTH"],
  relation: "after",
  toMiddleware: "retryMiddleware",
  override: true
};
var getAwsAuthPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-user-agent/dist/es/configurations.js
function resolveUserAgentConfig(input) {
  return __assign5(__assign5({}, input), { customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent });
}

// node_modules/@aws-sdk/middleware-user-agent/dist/es/constants.js
var USER_AGENT = "user-agent";
var X_AMZ_USER_AGENT = "x-amz-user-agent";
var SPACE = " ";
var UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;

// node_modules/@aws-sdk/middleware-user-agent/dist/es/user-agent-middleware.js
var userAgentMiddleware = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter4(void 0, void 0, void 0, function() {
        var request, headers, userAgent, defaultUserAgent2, customUserAgent, normalUAValue;
        var _a, _b;
        return __generator4(this, function(_c) {
          switch (_c.label) {
            case 0:
              request = args.request;
              if (!HttpRequest.isInstance(request))
                return [2, next(args)];
              headers = request.headers;
              userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
              return [4, options.defaultUserAgentProvider()];
            case 1:
              defaultUserAgent2 = _c.sent().map(escapeUserAgent);
              customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
              headers[X_AMZ_USER_AGENT] = __spread4(defaultUserAgent2, userAgent, customUserAgent).join(SPACE);
              normalUAValue = __spread4(defaultUserAgent2.filter(function(section) {
                return section.startsWith("aws-sdk-");
              }), customUserAgent).join(SPACE);
              if (options.runtime !== "browser" && normalUAValue) {
                headers[USER_AGENT] = headers[USER_AGENT] ? headers[USER_AGENT] + " " + normalUAValue : normalUAValue;
              }
              return [2, next(__assign5(__assign5({}, args), { request }))];
          }
        });
      });
    };
  };
};
var escapeUserAgent = function(_a) {
  var _b = __read7(_a, 2), name = _b[0], version2 = _b[1];
  var prefixSeparatorIndex = name.indexOf("/");
  var prefix = name.substring(0, prefixSeparatorIndex);
  var uaName = name.substring(prefixSeparatorIndex + 1);
  if (prefix === "api") {
    uaName = uaName.toLowerCase();
  }
  return [prefix, uaName, version2].filter(function(item) {
    return item && item.length > 0;
  }).map(function(item) {
    return item === null || item === void 0 ? void 0 : item.replace(UA_ESCAPE_REGEX, "_");
  }).join("/");
};
var getUserAgentMiddlewareOptions = {
  name: "getUserAgentMiddleware",
  step: "build",
  priority: "low",
  tags: ["SET_USER_AGENT", "USER_AGENT"],
  override: true
};
var getUserAgentPlugin = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-stack/dist/es/MiddlewareStack.js
var constructStack = function() {
  var absoluteEntries = [];
  var relativeEntries = [];
  var entriesNameSet = /* @__PURE__ */ new Set();
  var sort = function(entries) {
    return entries.sort(function(a, b) {
      return stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"];
    });
  };
  var removeByName = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.name && entry.name === toRemove) {
        isRemoved = true;
        entriesNameSet.delete(toRemove);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var removeByReference = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.middleware === toRemove) {
        isRemoved = true;
        if (entry.name)
          entriesNameSet.delete(entry.name);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var cloneTo = function(toStack) {
    absoluteEntries.forEach(function(entry) {
      toStack.add(entry.middleware, __assign5({}, entry));
    });
    relativeEntries.forEach(function(entry) {
      toStack.addRelativeTo(entry.middleware, __assign5({}, entry));
    });
    return toStack;
  };
  var expandRelativeMiddlewareList = function(from) {
    var expandedMiddlewareList = [];
    from.before.forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread4(expandRelativeMiddlewareList(entry)));
      }
    });
    expandedMiddlewareList.push(from);
    from.after.reverse().forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread4(expandRelativeMiddlewareList(entry)));
      }
    });
    return expandedMiddlewareList;
  };
  var getMiddlewareList = function() {
    var normalizedAbsoluteEntries = [];
    var normalizedRelativeEntries = [];
    var normalizedEntriesNameMap = {};
    absoluteEntries.forEach(function(entry) {
      var normalizedEntry = __assign5(__assign5({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedAbsoluteEntries.push(normalizedEntry);
    });
    relativeEntries.forEach(function(entry) {
      var normalizedEntry = __assign5(__assign5({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedRelativeEntries.push(normalizedEntry);
    });
    normalizedRelativeEntries.forEach(function(entry) {
      if (entry.toMiddleware) {
        var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
        if (toMiddleware === void 0) {
          throw new Error(entry.toMiddleware + " is not found when adding " + (entry.name || "anonymous") + " middleware " + entry.relation + " " + entry.toMiddleware);
        }
        if (entry.relation === "after") {
          toMiddleware.after.push(entry);
        }
        if (entry.relation === "before") {
          toMiddleware.before.push(entry);
        }
      }
    });
    var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function(wholeList, expendedMiddlewareList) {
      wholeList.push.apply(wholeList, __spread4(expendedMiddlewareList));
      return wholeList;
    }, []);
    return mainChain.map(function(entry) {
      return entry.middleware;
    });
  };
  var stack = {
    add: function(middleware, options) {
      if (options === void 0) {
        options = {};
      }
      var name = options.name, override = options.override;
      var entry = __assign5({ step: "initialize", priority: "normal", middleware }, options);
      if (name) {
        if (entriesNameSet.has(name)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name + "'");
          var toOverrideIndex = absoluteEntries.findIndex(function(entry2) {
            return entry2.name === name;
          });
          var toOverride = absoluteEntries[toOverrideIndex];
          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
            throw new Error('"' + name + '" middleware with ' + toOverride.priority + " priority in " + toOverride.step + " step cannot be " + ("overridden by same-name middleware with " + entry.priority + " priority in " + entry.step + " step."));
          }
          absoluteEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name);
      }
      absoluteEntries.push(entry);
    },
    addRelativeTo: function(middleware, options) {
      var name = options.name, override = options.override;
      var entry = __assign5({ middleware }, options);
      if (name) {
        if (entriesNameSet.has(name)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name + "'");
          var toOverrideIndex = relativeEntries.findIndex(function(entry2) {
            return entry2.name === name;
          });
          var toOverride = relativeEntries[toOverrideIndex];
          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
            throw new Error('"' + name + '" middleware ' + toOverride.relation + ' "' + toOverride.toMiddleware + '" middleware cannot be overridden ' + ("by same-name middleware " + entry.relation + ' "' + entry.toMiddleware + '" middleware.'));
          }
          relativeEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name);
      }
      relativeEntries.push(entry);
    },
    clone: function() {
      return cloneTo(constructStack());
    },
    use: function(plugin) {
      plugin.applyToStack(stack);
    },
    remove: function(toRemove) {
      if (typeof toRemove === "string")
        return removeByName(toRemove);
      else
        return removeByReference(toRemove);
    },
    removeByTag: function(toRemove) {
      var isRemoved = false;
      var filterCb = function(entry) {
        var tags = entry.tags, name = entry.name;
        if (tags && tags.includes(toRemove)) {
          if (name)
            entriesNameSet.delete(name);
          isRemoved = true;
          return false;
        }
        return true;
      };
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    },
    concat: function(from) {
      var cloned = cloneTo(constructStack());
      cloned.use(from);
      return cloned;
    },
    applyToStack: cloneTo,
    resolve: function(handler, context) {
      var e_1, _a;
      try {
        for (var _b = __values4(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var middleware = _c.value;
          handler = middleware(handler, context);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return handler;
    }
  };
  return stack;
};
var stepWeights = {
  initialize: 5,
  serialize: 4,
  build: 3,
  finalizeRequest: 2,
  deserialize: 1
};
var priorityWeights = {
  high: 3,
  normal: 2,
  low: 1
};

// node_modules/@aws-sdk/smithy-client/dist/es/client.js
var Client = function() {
  function Client2(config) {
    this.middlewareStack = constructStack();
    this.config = config;
  }
  Client2.prototype.send = function(command, optionsOrCb, cb) {
    var options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
    var callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
    var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
    if (callback) {
      handler(command).then(function(result) {
        return callback(null, result.output);
      }, function(err) {
        return callback(err);
      }).catch(
        function() {
        }
      );
    } else {
      return handler(command).then(function(result) {
        return result.output;
      });
    }
  };
  Client2.prototype.destroy = function() {
    if (this.config.requestHandler.destroy)
      this.config.requestHandler.destroy();
  };
  return Client2;
}();

// node_modules/@aws-sdk/smithy-client/dist/es/command.js
var Command = function() {
  function Command2() {
    this.middlewareStack = constructStack();
  }
  return Command2;
}();

// node_modules/@aws-sdk/smithy-client/dist/es/extended-encode-uri-component.js
function extendedEncodeURIComponent(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16);
  });
}

// node_modules/@aws-sdk/smithy-client/dist/es/get-array-if-single-item.js
var getArrayIfSingleItem = function(mayBeArray) {
  return Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
};

// node_modules/@aws-sdk/smithy-client/dist/es/get-value-from-text-node.js
var getValueFromTextNode = function(obj) {
  var textNodeName = "#text";
  for (var key in obj) {
    if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
      obj[key] = obj[key][textNodeName];
    } else if (typeof obj[key] === "object" && obj[key] !== null) {
      obj[key] = getValueFromTextNode(obj[key]);
    }
  }
  return obj;
};

// node_modules/@aws-sdk/smithy-client/dist/es/lazy-json.js
var StringWrapper = function() {
  var Class = Object.getPrototypeOf(this).constructor;
  var Constructor = Function.bind.apply(String, __spread4([null], arguments));
  var instance = new Constructor();
  Object.setPrototypeOf(instance, Class.prototype);
  return instance;
};
StringWrapper.prototype = Object.create(String.prototype, {
  constructor: {
    value: StringWrapper,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
Object.setPrototypeOf(StringWrapper, String);
var LazyJsonString = function(_super) {
  __extends4(LazyJsonString2, _super);
  function LazyJsonString2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  LazyJsonString2.prototype.deserializeJSON = function() {
    return JSON.parse(_super.prototype.toString.call(this));
  };
  LazyJsonString2.prototype.toJSON = function() {
    return _super.prototype.toString.call(this);
  };
  LazyJsonString2.fromObject = function(object) {
    if (object instanceof LazyJsonString2) {
      return object;
    } else if (object instanceof String || typeof object === "string") {
      return new LazyJsonString2(object);
    }
    return new LazyJsonString2(JSON.stringify(object));
  };
  return LazyJsonString2;
}(StringWrapper);

// node_modules/@aws-sdk/smithy-client/dist/es/date-utils.js
var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
function dateToUtcString(date) {
  var year = date.getUTCFullYear();
  var month = date.getUTCMonth();
  var dayOfWeek = date.getUTCDay();
  var dayOfMonthInt = date.getUTCDate();
  var hoursInt = date.getUTCHours();
  var minutesInt = date.getUTCMinutes();
  var secondsInt = date.getUTCSeconds();
  var dayOfMonthString = dayOfMonthInt < 10 ? "0" + dayOfMonthInt : "" + dayOfMonthInt;
  var hoursString = hoursInt < 10 ? "0" + hoursInt : "" + hoursInt;
  var minutesString = minutesInt < 10 ? "0" + minutesInt : "" + minutesInt;
  var secondsString = secondsInt < 10 ? "0" + secondsInt : "" + secondsInt;
  return days[dayOfWeek] + ", " + dayOfMonthString + " " + months[month] + " " + year + " " + hoursString + ":" + minutesString + ":" + secondsString + " GMT";
}

// node_modules/@aws-sdk/smithy-client/dist/es/constants.js
var SENSITIVE_STRING = "***SensitiveInformation***";

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/CloudWatchLogsClient.js
var CloudWatchLogsClient = function(_super) {
  __extends3(CloudWatchLogsClient2, _super);
  function CloudWatchLogsClient2(configuration) {
    var _this = this;
    var _config_0 = __assign4(__assign4({}, ClientDefaultValues), configuration);
    var _config_1 = resolveRegionConfig(_config_0);
    var _config_2 = resolveEndpointsConfig(_config_1);
    var _config_3 = resolveAwsAuthConfig(_config_2);
    var _config_4 = resolveRetryConfig(_config_3);
    var _config_5 = resolveHostHeaderConfig(_config_4);
    var _config_6 = resolveUserAgentConfig(_config_5);
    _this = _super.call(this, _config_6) || this;
    _this.config = _config_6;
    _this.middlewareStack.use(getAwsAuthPlugin(_this.config));
    _this.middlewareStack.use(getRetryPlugin(_this.config));
    _this.middlewareStack.use(getContentLengthPlugin(_this.config));
    _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
    _this.middlewareStack.use(getLoggerPlugin(_this.config));
    _this.middlewareStack.use(getUserAgentPlugin(_this.config));
    return _this;
  }
  CloudWatchLogsClient2.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
  };
  return CloudWatchLogsClient2;
}(Client);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/models/models_0.js
var AssociateKmsKeyRequest;
(function(AssociateKmsKeyRequest2) {
  AssociateKmsKeyRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(AssociateKmsKeyRequest || (AssociateKmsKeyRequest = {}));
var InvalidParameterException;
(function(InvalidParameterException3) {
  InvalidParameterException3.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(InvalidParameterException || (InvalidParameterException = {}));
var OperationAbortedException;
(function(OperationAbortedException2) {
  OperationAbortedException2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(OperationAbortedException || (OperationAbortedException = {}));
var ResourceNotFoundException;
(function(ResourceNotFoundException3) {
  ResourceNotFoundException3.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(ResourceNotFoundException || (ResourceNotFoundException = {}));
var ServiceUnavailableException;
(function(ServiceUnavailableException2) {
  ServiceUnavailableException2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(ServiceUnavailableException || (ServiceUnavailableException = {}));
var CancelExportTaskRequest;
(function(CancelExportTaskRequest2) {
  CancelExportTaskRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(CancelExportTaskRequest || (CancelExportTaskRequest = {}));
var InvalidOperationException;
(function(InvalidOperationException2) {
  InvalidOperationException2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(InvalidOperationException || (InvalidOperationException = {}));
var CreateExportTaskRequest;
(function(CreateExportTaskRequest2) {
  CreateExportTaskRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(CreateExportTaskRequest || (CreateExportTaskRequest = {}));
var CreateExportTaskResponse;
(function(CreateExportTaskResponse2) {
  CreateExportTaskResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(CreateExportTaskResponse || (CreateExportTaskResponse = {}));
var LimitExceededException;
(function(LimitExceededException3) {
  LimitExceededException3.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(LimitExceededException || (LimitExceededException = {}));
var ResourceAlreadyExistsException;
(function(ResourceAlreadyExistsException2) {
  ResourceAlreadyExistsException2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(ResourceAlreadyExistsException || (ResourceAlreadyExistsException = {}));
var CreateLogGroupRequest;
(function(CreateLogGroupRequest2) {
  CreateLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(CreateLogGroupRequest || (CreateLogGroupRequest = {}));
var CreateLogStreamRequest;
(function(CreateLogStreamRequest2) {
  CreateLogStreamRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(CreateLogStreamRequest || (CreateLogStreamRequest = {}));
var DataAlreadyAcceptedException;
(function(DataAlreadyAcceptedException2) {
  DataAlreadyAcceptedException2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DataAlreadyAcceptedException || (DataAlreadyAcceptedException = {}));
var DeleteDestinationRequest;
(function(DeleteDestinationRequest2) {
  DeleteDestinationRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DeleteDestinationRequest || (DeleteDestinationRequest = {}));
var DeleteLogGroupRequest;
(function(DeleteLogGroupRequest2) {
  DeleteLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DeleteLogGroupRequest || (DeleteLogGroupRequest = {}));
var DeleteLogStreamRequest;
(function(DeleteLogStreamRequest2) {
  DeleteLogStreamRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DeleteLogStreamRequest || (DeleteLogStreamRequest = {}));
var DeleteMetricFilterRequest;
(function(DeleteMetricFilterRequest2) {
  DeleteMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DeleteMetricFilterRequest || (DeleteMetricFilterRequest = {}));
var DeleteQueryDefinitionRequest;
(function(DeleteQueryDefinitionRequest2) {
  DeleteQueryDefinitionRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DeleteQueryDefinitionRequest || (DeleteQueryDefinitionRequest = {}));
var DeleteQueryDefinitionResponse;
(function(DeleteQueryDefinitionResponse2) {
  DeleteQueryDefinitionResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DeleteQueryDefinitionResponse || (DeleteQueryDefinitionResponse = {}));
var DeleteResourcePolicyRequest;
(function(DeleteResourcePolicyRequest2) {
  DeleteResourcePolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DeleteResourcePolicyRequest || (DeleteResourcePolicyRequest = {}));
var DeleteRetentionPolicyRequest;
(function(DeleteRetentionPolicyRequest2) {
  DeleteRetentionPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DeleteRetentionPolicyRequest || (DeleteRetentionPolicyRequest = {}));
var DeleteSubscriptionFilterRequest;
(function(DeleteSubscriptionFilterRequest2) {
  DeleteSubscriptionFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DeleteSubscriptionFilterRequest || (DeleteSubscriptionFilterRequest = {}));
var DescribeDestinationsRequest;
(function(DescribeDestinationsRequest2) {
  DescribeDestinationsRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeDestinationsRequest || (DescribeDestinationsRequest = {}));
var Destination;
(function(Destination2) {
  Destination2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(Destination || (Destination = {}));
var DescribeDestinationsResponse;
(function(DescribeDestinationsResponse2) {
  DescribeDestinationsResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeDestinationsResponse || (DescribeDestinationsResponse = {}));
var ExportTaskStatusCode;
(function(ExportTaskStatusCode2) {
  ExportTaskStatusCode2["CANCELLED"] = "CANCELLED";
  ExportTaskStatusCode2["COMPLETED"] = "COMPLETED";
  ExportTaskStatusCode2["FAILED"] = "FAILED";
  ExportTaskStatusCode2["PENDING"] = "PENDING";
  ExportTaskStatusCode2["PENDING_CANCEL"] = "PENDING_CANCEL";
  ExportTaskStatusCode2["RUNNING"] = "RUNNING";
})(ExportTaskStatusCode || (ExportTaskStatusCode = {}));
var DescribeExportTasksRequest;
(function(DescribeExportTasksRequest2) {
  DescribeExportTasksRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeExportTasksRequest || (DescribeExportTasksRequest = {}));
var ExportTaskExecutionInfo;
(function(ExportTaskExecutionInfo2) {
  ExportTaskExecutionInfo2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(ExportTaskExecutionInfo || (ExportTaskExecutionInfo = {}));
var ExportTaskStatus;
(function(ExportTaskStatus2) {
  ExportTaskStatus2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(ExportTaskStatus || (ExportTaskStatus = {}));
var ExportTask;
(function(ExportTask2) {
  ExportTask2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(ExportTask || (ExportTask = {}));
var DescribeExportTasksResponse;
(function(DescribeExportTasksResponse2) {
  DescribeExportTasksResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeExportTasksResponse || (DescribeExportTasksResponse = {}));
var DescribeLogGroupsRequest;
(function(DescribeLogGroupsRequest2) {
  DescribeLogGroupsRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeLogGroupsRequest || (DescribeLogGroupsRequest = {}));
var LogGroup;
(function(LogGroup2) {
  LogGroup2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(LogGroup || (LogGroup = {}));
var DescribeLogGroupsResponse;
(function(DescribeLogGroupsResponse2) {
  DescribeLogGroupsResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeLogGroupsResponse || (DescribeLogGroupsResponse = {}));
var OrderBy;
(function(OrderBy2) {
  OrderBy2["LastEventTime"] = "LastEventTime";
  OrderBy2["LogStreamName"] = "LogStreamName";
})(OrderBy || (OrderBy = {}));
var DescribeLogStreamsRequest;
(function(DescribeLogStreamsRequest2) {
  DescribeLogStreamsRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeLogStreamsRequest || (DescribeLogStreamsRequest = {}));
var LogStream;
(function(LogStream2) {
  LogStream2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(LogStream || (LogStream = {}));
var DescribeLogStreamsResponse;
(function(DescribeLogStreamsResponse2) {
  DescribeLogStreamsResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeLogStreamsResponse || (DescribeLogStreamsResponse = {}));
var DescribeMetricFiltersRequest;
(function(DescribeMetricFiltersRequest2) {
  DescribeMetricFiltersRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeMetricFiltersRequest || (DescribeMetricFiltersRequest = {}));
var MetricTransformation;
(function(MetricTransformation2) {
  MetricTransformation2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(MetricTransformation || (MetricTransformation = {}));
var MetricFilter;
(function(MetricFilter2) {
  MetricFilter2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(MetricFilter || (MetricFilter = {}));
var DescribeMetricFiltersResponse;
(function(DescribeMetricFiltersResponse2) {
  DescribeMetricFiltersResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeMetricFiltersResponse || (DescribeMetricFiltersResponse = {}));
var QueryStatus;
(function(QueryStatus2) {
  QueryStatus2["Cancelled"] = "Cancelled";
  QueryStatus2["Complete"] = "Complete";
  QueryStatus2["Failed"] = "Failed";
  QueryStatus2["Running"] = "Running";
  QueryStatus2["Scheduled"] = "Scheduled";
})(QueryStatus || (QueryStatus = {}));
var DescribeQueriesRequest;
(function(DescribeQueriesRequest2) {
  DescribeQueriesRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeQueriesRequest || (DescribeQueriesRequest = {}));
var QueryInfo;
(function(QueryInfo2) {
  QueryInfo2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(QueryInfo || (QueryInfo = {}));
var DescribeQueriesResponse;
(function(DescribeQueriesResponse2) {
  DescribeQueriesResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeQueriesResponse || (DescribeQueriesResponse = {}));
var DescribeQueryDefinitionsRequest;
(function(DescribeQueryDefinitionsRequest2) {
  DescribeQueryDefinitionsRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeQueryDefinitionsRequest || (DescribeQueryDefinitionsRequest = {}));
var QueryDefinition;
(function(QueryDefinition2) {
  QueryDefinition2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(QueryDefinition || (QueryDefinition = {}));
var DescribeQueryDefinitionsResponse;
(function(DescribeQueryDefinitionsResponse2) {
  DescribeQueryDefinitionsResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeQueryDefinitionsResponse || (DescribeQueryDefinitionsResponse = {}));
var DescribeResourcePoliciesRequest;
(function(DescribeResourcePoliciesRequest2) {
  DescribeResourcePoliciesRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeResourcePoliciesRequest || (DescribeResourcePoliciesRequest = {}));
var ResourcePolicy;
(function(ResourcePolicy2) {
  ResourcePolicy2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(ResourcePolicy || (ResourcePolicy = {}));
var DescribeResourcePoliciesResponse;
(function(DescribeResourcePoliciesResponse2) {
  DescribeResourcePoliciesResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeResourcePoliciesResponse || (DescribeResourcePoliciesResponse = {}));
var DescribeSubscriptionFiltersRequest;
(function(DescribeSubscriptionFiltersRequest2) {
  DescribeSubscriptionFiltersRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeSubscriptionFiltersRequest || (DescribeSubscriptionFiltersRequest = {}));
var Distribution;
(function(Distribution2) {
  Distribution2["ByLogStream"] = "ByLogStream";
  Distribution2["Random"] = "Random";
})(Distribution || (Distribution = {}));
var SubscriptionFilter;
(function(SubscriptionFilter2) {
  SubscriptionFilter2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(SubscriptionFilter || (SubscriptionFilter = {}));
var DescribeSubscriptionFiltersResponse;
(function(DescribeSubscriptionFiltersResponse2) {
  DescribeSubscriptionFiltersResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DescribeSubscriptionFiltersResponse || (DescribeSubscriptionFiltersResponse = {}));
var DisassociateKmsKeyRequest;
(function(DisassociateKmsKeyRequest2) {
  DisassociateKmsKeyRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(DisassociateKmsKeyRequest || (DisassociateKmsKeyRequest = {}));
var FilteredLogEvent;
(function(FilteredLogEvent2) {
  FilteredLogEvent2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(FilteredLogEvent || (FilteredLogEvent = {}));
var FilterLogEventsRequest;
(function(FilterLogEventsRequest2) {
  FilterLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(FilterLogEventsRequest || (FilterLogEventsRequest = {}));
var SearchedLogStream;
(function(SearchedLogStream2) {
  SearchedLogStream2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(SearchedLogStream || (SearchedLogStream = {}));
var FilterLogEventsResponse;
(function(FilterLogEventsResponse2) {
  FilterLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(FilterLogEventsResponse || (FilterLogEventsResponse = {}));
var GetLogEventsRequest;
(function(GetLogEventsRequest2) {
  GetLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(GetLogEventsRequest || (GetLogEventsRequest = {}));
var OutputLogEvent;
(function(OutputLogEvent2) {
  OutputLogEvent2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(OutputLogEvent || (OutputLogEvent = {}));
var GetLogEventsResponse;
(function(GetLogEventsResponse2) {
  GetLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(GetLogEventsResponse || (GetLogEventsResponse = {}));
var GetLogGroupFieldsRequest;
(function(GetLogGroupFieldsRequest2) {
  GetLogGroupFieldsRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(GetLogGroupFieldsRequest || (GetLogGroupFieldsRequest = {}));
var LogGroupField;
(function(LogGroupField2) {
  LogGroupField2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(LogGroupField || (LogGroupField = {}));
var GetLogGroupFieldsResponse;
(function(GetLogGroupFieldsResponse2) {
  GetLogGroupFieldsResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(GetLogGroupFieldsResponse || (GetLogGroupFieldsResponse = {}));
var GetLogRecordRequest;
(function(GetLogRecordRequest2) {
  GetLogRecordRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(GetLogRecordRequest || (GetLogRecordRequest = {}));
var GetLogRecordResponse;
(function(GetLogRecordResponse2) {
  GetLogRecordResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(GetLogRecordResponse || (GetLogRecordResponse = {}));
var GetQueryResultsRequest;
(function(GetQueryResultsRequest2) {
  GetQueryResultsRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(GetQueryResultsRequest || (GetQueryResultsRequest = {}));
var ResultField;
(function(ResultField2) {
  ResultField2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(ResultField || (ResultField = {}));
var QueryStatistics;
(function(QueryStatistics2) {
  QueryStatistics2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(QueryStatistics || (QueryStatistics = {}));
var GetQueryResultsResponse;
(function(GetQueryResultsResponse2) {
  GetQueryResultsResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(GetQueryResultsResponse || (GetQueryResultsResponse = {}));
var InputLogEvent;
(function(InputLogEvent2) {
  InputLogEvent2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(InputLogEvent || (InputLogEvent = {}));
var InvalidSequenceTokenException;
(function(InvalidSequenceTokenException2) {
  InvalidSequenceTokenException2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(InvalidSequenceTokenException || (InvalidSequenceTokenException = {}));
var ListTagsLogGroupRequest;
(function(ListTagsLogGroupRequest2) {
  ListTagsLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(ListTagsLogGroupRequest || (ListTagsLogGroupRequest = {}));
var ListTagsLogGroupResponse;
(function(ListTagsLogGroupResponse2) {
  ListTagsLogGroupResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(ListTagsLogGroupResponse || (ListTagsLogGroupResponse = {}));
var PutDestinationRequest;
(function(PutDestinationRequest2) {
  PutDestinationRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(PutDestinationRequest || (PutDestinationRequest = {}));
var PutDestinationResponse;
(function(PutDestinationResponse2) {
  PutDestinationResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(PutDestinationResponse || (PutDestinationResponse = {}));
var PutDestinationPolicyRequest;
(function(PutDestinationPolicyRequest2) {
  PutDestinationPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(PutDestinationPolicyRequest || (PutDestinationPolicyRequest = {}));
var PutLogEventsRequest;
(function(PutLogEventsRequest2) {
  PutLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(PutLogEventsRequest || (PutLogEventsRequest = {}));
var RejectedLogEventsInfo;
(function(RejectedLogEventsInfo2) {
  RejectedLogEventsInfo2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(RejectedLogEventsInfo || (RejectedLogEventsInfo = {}));
var PutLogEventsResponse;
(function(PutLogEventsResponse2) {
  PutLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(PutLogEventsResponse || (PutLogEventsResponse = {}));
var UnrecognizedClientException;
(function(UnrecognizedClientException2) {
  UnrecognizedClientException2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(UnrecognizedClientException || (UnrecognizedClientException = {}));
var PutMetricFilterRequest;
(function(PutMetricFilterRequest2) {
  PutMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(PutMetricFilterRequest || (PutMetricFilterRequest = {}));
var PutQueryDefinitionRequest;
(function(PutQueryDefinitionRequest2) {
  PutQueryDefinitionRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(PutQueryDefinitionRequest || (PutQueryDefinitionRequest = {}));
var PutQueryDefinitionResponse;
(function(PutQueryDefinitionResponse2) {
  PutQueryDefinitionResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(PutQueryDefinitionResponse || (PutQueryDefinitionResponse = {}));
var PutResourcePolicyRequest;
(function(PutResourcePolicyRequest2) {
  PutResourcePolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(PutResourcePolicyRequest || (PutResourcePolicyRequest = {}));
var PutResourcePolicyResponse;
(function(PutResourcePolicyResponse2) {
  PutResourcePolicyResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(PutResourcePolicyResponse || (PutResourcePolicyResponse = {}));
var PutRetentionPolicyRequest;
(function(PutRetentionPolicyRequest2) {
  PutRetentionPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(PutRetentionPolicyRequest || (PutRetentionPolicyRequest = {}));
var PutSubscriptionFilterRequest;
(function(PutSubscriptionFilterRequest2) {
  PutSubscriptionFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(PutSubscriptionFilterRequest || (PutSubscriptionFilterRequest = {}));
var QueryCompileErrorLocation;
(function(QueryCompileErrorLocation2) {
  QueryCompileErrorLocation2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(QueryCompileErrorLocation || (QueryCompileErrorLocation = {}));
var QueryCompileError;
(function(QueryCompileError2) {
  QueryCompileError2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(QueryCompileError || (QueryCompileError = {}));
var MalformedQueryException;
(function(MalformedQueryException2) {
  MalformedQueryException2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(MalformedQueryException || (MalformedQueryException = {}));
var StartQueryRequest;
(function(StartQueryRequest2) {
  StartQueryRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(StartQueryRequest || (StartQueryRequest = {}));
var StartQueryResponse;
(function(StartQueryResponse2) {
  StartQueryResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(StartQueryResponse || (StartQueryResponse = {}));
var StopQueryRequest;
(function(StopQueryRequest2) {
  StopQueryRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(StopQueryRequest || (StopQueryRequest = {}));
var StopQueryResponse;
(function(StopQueryResponse2) {
  StopQueryResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(StopQueryResponse || (StopQueryResponse = {}));
var TagLogGroupRequest;
(function(TagLogGroupRequest2) {
  TagLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(TagLogGroupRequest || (TagLogGroupRequest = {}));
var TestMetricFilterRequest;
(function(TestMetricFilterRequest2) {
  TestMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(TestMetricFilterRequest || (TestMetricFilterRequest = {}));
var MetricFilterMatchRecord;
(function(MetricFilterMatchRecord2) {
  MetricFilterMatchRecord2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(MetricFilterMatchRecord || (MetricFilterMatchRecord = {}));
var TestMetricFilterResponse;
(function(TestMetricFilterResponse2) {
  TestMetricFilterResponse2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(TestMetricFilterResponse || (TestMetricFilterResponse = {}));
var UntagLogGroupRequest;
(function(UntagLogGroupRequest2) {
  UntagLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign4({}, obj);
  };
})(UntagLogGroupRequest || (UntagLogGroupRequest = {}));

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/protocols/Aws_json1_1.js
var serializeAws_json1_1AssociateKmsKeyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.AssociateKmsKey"
      };
      body = JSON.stringify(serializeAws_json1_1AssociateKmsKeyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CancelExportTaskCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CancelExportTask"
      };
      body = JSON.stringify(serializeAws_json1_1CancelExportTaskRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateExportTaskCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateExportTask"
      };
      body = JSON.stringify(serializeAws_json1_1CreateExportTaskRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateLogGroupCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1CreateLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateLogStreamCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateLogStream"
      };
      body = JSON.stringify(serializeAws_json1_1CreateLogStreamRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteDestinationCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteDestination"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteDestinationRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteLogGroupCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteLogStreamCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteLogStream"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteLogStreamRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteMetricFilterCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteQueryDefinitionCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteQueryDefinition"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteQueryDefinitionRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteResourcePolicyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteResourcePolicy"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteResourcePolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteRetentionPolicyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteRetentionPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteRetentionPolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteSubscriptionFilterCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteSubscriptionFilter"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteSubscriptionFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeDestinationsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeDestinations"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeDestinationsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeExportTasksCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeExportTasks"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeExportTasksRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeLogGroupsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeLogGroups"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeLogGroupsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeLogStreamsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeLogStreams"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeLogStreamsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeMetricFiltersCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeMetricFilters"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeMetricFiltersRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeQueriesCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeQueries"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeQueriesRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeQueryDefinitionsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeQueryDefinitions"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeQueryDefinitionsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeResourcePoliciesCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeResourcePolicies"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeResourcePoliciesRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeSubscriptionFiltersCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeSubscriptionFilters"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeSubscriptionFiltersRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DisassociateKmsKeyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DisassociateKmsKey"
      };
      body = JSON.stringify(serializeAws_json1_1DisassociateKmsKeyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1FilterLogEventsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.FilterLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1FilterLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogEventsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogGroupFieldsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogGroupFields"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogGroupFieldsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogRecordCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogRecord"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogRecordRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetQueryResultsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetQueryResults"
      };
      body = JSON.stringify(serializeAws_json1_1GetQueryResultsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListTagsLogGroupCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.ListTagsLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1ListTagsLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutDestinationCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutDestination"
      };
      body = JSON.stringify(serializeAws_json1_1PutDestinationRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutDestinationPolicyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutDestinationPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutDestinationPolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutLogEventsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1PutLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutMetricFilterCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1PutMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutQueryDefinitionCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutQueryDefinition"
      };
      body = JSON.stringify(serializeAws_json1_1PutQueryDefinitionRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutResourcePolicyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutResourcePolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutResourcePolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutRetentionPolicyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutRetentionPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutRetentionPolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutSubscriptionFilterCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutSubscriptionFilter"
      };
      body = JSON.stringify(serializeAws_json1_1PutSubscriptionFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1StartQueryCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.StartQuery"
      };
      body = JSON.stringify(serializeAws_json1_1StartQueryRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1StopQueryCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.StopQuery"
      };
      body = JSON.stringify(serializeAws_json1_1StopQueryRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1TagLogGroupCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.TagLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1TagLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1TestMetricFilterCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.TestMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1TestMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UntagLogGroupCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.UntagLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1UntagLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var deserializeAws_json1_1AssociateKmsKeyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1AssociateKmsKeyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1AssociateKmsKeyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign4({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CancelExportTaskCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CancelExportTaskCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CancelExportTaskCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign4({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidOperationException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidOperationException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidOperationExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateExportTaskCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateExportTaskCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1CreateExportTaskResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateExportTaskCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator3(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign4({}, output)];
          _j = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceAlreadyExistsException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 10];
            case "ServiceUnavailableException":
              return [3, 12];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogGroupCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogGroupCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator3(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign4({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceAlreadyExistsException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogStreamCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateLogStreamCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogStreamCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign4({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceAlreadyExistsException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteDestinationCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteDestinationCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteDestinationCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign4({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogGroupCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogGroupCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign4({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogStreamCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteLogStreamCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogStreamCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign4({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteMetricFilterCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteMetricFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteMetricFilterCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign4({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteQueryDefinitionCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteQueryDefinitionCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DeleteQueryDefinitionResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteQueryDefinitionCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteResourcePolicyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteResourcePolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteResourcePolicyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteRetentionPolicyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteRetentionPolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteRetentionPolicyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign4({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteSubscriptionFilterCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteSubscriptionFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteSubscriptionFilterCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign4({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeDestinationsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeDestinationsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeDestinationsResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeDestinationsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign4({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeExportTasksCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeExportTasksCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeExportTasksResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeExportTasksCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign4({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogGroupsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeLogGroupsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeLogGroupsResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogGroupsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign4({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogStreamsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeLogStreamsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeLogStreamsResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogStreamsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeMetricFiltersCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeMetricFiltersCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeMetricFiltersResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeMetricFiltersCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueriesCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeQueriesCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeQueriesResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueriesCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueryDefinitionsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeQueryDefinitionsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeQueryDefinitionsResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueryDefinitionsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign4({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeResourcePoliciesCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeResourcePoliciesCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeResourcePoliciesResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeResourcePoliciesCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign4({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeSubscriptionFiltersCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeSubscriptionFiltersCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeSubscriptionFiltersResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeSubscriptionFiltersCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DisassociateKmsKeyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DisassociateKmsKeyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DisassociateKmsKeyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign4({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1FilterLogEventsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1FilterLogEventsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1FilterLogEventsResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1FilterLogEventsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogEventsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogEventsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogEventsResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogEventsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogGroupFieldsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogGroupFieldsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogGroupFieldsResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogGroupFieldsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign4({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogRecordCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogRecordCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogRecordResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogRecordCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign4({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetQueryResultsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetQueryResultsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetQueryResultsResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetQueryResultsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsLogGroupCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListTagsLogGroupCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListTagsLogGroupResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsLogGroupCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign4({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ResourceNotFoundException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutDestinationCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutDestinationResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationPolicyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutDestinationPolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationPolicyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutLogEventsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutLogEventsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutLogEventsResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutLogEventsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator3(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign4({}, output)];
          _j = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "DataAlreadyAcceptedException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#DataAlreadyAcceptedException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 4];
            case "InvalidSequenceTokenException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#InvalidSequenceTokenException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
            case "UnrecognizedClientException":
              return [3, 12];
            case "com.amazonaws.cloudwatchlogs#UnrecognizedClientException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1DataAlreadyAcceptedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidSequenceTokenExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1UnrecognizedClientExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutMetricFilterCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutMetricFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutMetricFilterCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator3(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign4({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutQueryDefinitionCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutQueryDefinitionCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutQueryDefinitionResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutQueryDefinitionCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutResourcePolicyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutResourcePolicyCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutResourcePolicyResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutResourcePolicyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutRetentionPolicyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutRetentionPolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutRetentionPolicyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign4({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutSubscriptionFilterCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutSubscriptionFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutSubscriptionFilterCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator3(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign4({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1StartQueryCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1StartQueryCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1StartQueryResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1StartQueryCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator3(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign4({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "MalformedQueryException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#MalformedQueryException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1MalformedQueryExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1StopQueryCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1StopQueryCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1StopQueryResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1StopQueryCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign4({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1TagLogGroupCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1TagLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1TagLogGroupCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign4({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1TestMetricFilterCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1TestMetricFilterCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1TestMetricFilterResponse(data, context);
          response = __assign4({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1TestMetricFilterCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign4({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UntagLogGroupCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UntagLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UntagLogGroupCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator3(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign4({}, output)];
          _d = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign4.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ResourceNotFoundException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign4.apply(void 0, [__assign4.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign4(__assign4({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DataAlreadyAcceptedExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1DataAlreadyAcceptedException(body, context);
      contents = __assign4({ name: "DataAlreadyAcceptedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidOperationExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidOperationException(body, context);
      contents = __assign4({ name: "InvalidOperationException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidParameterExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
      contents = __assign4({ name: "InvalidParameterException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidSequenceTokenExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidSequenceTokenException(body, context);
      contents = __assign4({ name: "InvalidSequenceTokenException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1LimitExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1LimitExceededException(body, context);
      contents = __assign4({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1MalformedQueryExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1MalformedQueryException(body, context);
      contents = __assign4({ name: "MalformedQueryException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1OperationAbortedExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1OperationAbortedException(body, context);
      contents = __assign4({ name: "OperationAbortedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceAlreadyExistsException(body, context);
      contents = __assign4({ name: "ResourceAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
      contents = __assign4({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ServiceUnavailableExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ServiceUnavailableException(body, context);
      contents = __assign4({ name: "ServiceUnavailableException", $fault: "server", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1UnrecognizedClientExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1UnrecognizedClientException(body, context);
      contents = __assign4({ name: "UnrecognizedClientException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var serializeAws_json1_1AssociateKmsKeyRequest = function(input, context) {
  return __assign4(__assign4({}, input.kmsKeyId !== void 0 && input.kmsKeyId !== null && { kmsKeyId: input.kmsKeyId }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1CancelExportTaskRequest = function(input, context) {
  return __assign4({}, input.taskId !== void 0 && input.taskId !== null && { taskId: input.taskId });
};
var serializeAws_json1_1CreateExportTaskRequest = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4(__assign4(__assign4(__assign4({}, input.destination !== void 0 && input.destination !== null && { destination: input.destination }), input.destinationPrefix !== void 0 && input.destinationPrefix !== null && { destinationPrefix: input.destinationPrefix }), input.from !== void 0 && input.from !== null && { from: input.from }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.taskName !== void 0 && input.taskName !== null && { taskName: input.taskName }), input.to !== void 0 && input.to !== null && { to: input.to });
};
var serializeAws_json1_1CreateLogGroupRequest = function(input, context) {
  return __assign4(__assign4(__assign4({}, input.kmsKeyId !== void 0 && input.kmsKeyId !== null && { kmsKeyId: input.kmsKeyId }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1Tags(input.tags, context) });
};
var serializeAws_json1_1CreateLogStreamRequest = function(input, context) {
  return __assign4(__assign4({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName });
};
var serializeAws_json1_1DeleteDestinationRequest = function(input, context) {
  return __assign4({}, input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName });
};
var serializeAws_json1_1DeleteLogGroupRequest = function(input, context) {
  return __assign4({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteLogStreamRequest = function(input, context) {
  return __assign4(__assign4({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName });
};
var serializeAws_json1_1DeleteMetricFilterRequest = function(input, context) {
  return __assign4(__assign4({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteQueryDefinitionRequest = function(input, context) {
  return __assign4({}, input.queryDefinitionId !== void 0 && input.queryDefinitionId !== null && { queryDefinitionId: input.queryDefinitionId });
};
var serializeAws_json1_1DeleteResourcePolicyRequest = function(input, context) {
  return __assign4({}, input.policyName !== void 0 && input.policyName !== null && { policyName: input.policyName });
};
var serializeAws_json1_1DeleteRetentionPolicyRequest = function(input, context) {
  return __assign4({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteSubscriptionFilterRequest = function(input, context) {
  return __assign4(__assign4({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DescribeDestinationsRequest = function(input, context) {
  return __assign4(__assign4(__assign4({}, input.DestinationNamePrefix !== void 0 && input.DestinationNamePrefix !== null && { DestinationNamePrefix: input.DestinationNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeExportTasksRequest = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.statusCode !== void 0 && input.statusCode !== null && { statusCode: input.statusCode }), input.taskId !== void 0 && input.taskId !== null && { taskId: input.taskId });
};
var serializeAws_json1_1DescribeLogGroupsRequest = function(input, context) {
  return __assign4(__assign4(__assign4({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupNamePrefix !== void 0 && input.logGroupNamePrefix !== null && { logGroupNamePrefix: input.logGroupNamePrefix }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeLogStreamsRequest = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4(__assign4(__assign4({}, input.descending !== void 0 && input.descending !== null && { descending: input.descending }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.orderBy !== void 0 && input.orderBy !== null && { orderBy: input.orderBy });
};
var serializeAws_json1_1DescribeMetricFiltersRequest = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4(__assign4(__assign4({}, input.filterNamePrefix !== void 0 && input.filterNamePrefix !== null && { filterNamePrefix: input.filterNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.metricName !== void 0 && input.metricName !== null && { metricName: input.metricName }), input.metricNamespace !== void 0 && input.metricNamespace !== null && { metricNamespace: input.metricNamespace }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeQueriesRequest = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.maxResults !== void 0 && input.maxResults !== null && { maxResults: input.maxResults }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.status !== void 0 && input.status !== null && { status: input.status });
};
var serializeAws_json1_1DescribeQueryDefinitionsRequest = function(input, context) {
  return __assign4(__assign4(__assign4({}, input.maxResults !== void 0 && input.maxResults !== null && { maxResults: input.maxResults }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.queryDefinitionNamePrefix !== void 0 && input.queryDefinitionNamePrefix !== null && { queryDefinitionNamePrefix: input.queryDefinitionNamePrefix });
};
var serializeAws_json1_1DescribeResourcePoliciesRequest = function(input, context) {
  return __assign4(__assign4({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeSubscriptionFiltersRequest = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4({}, input.filterNamePrefix !== void 0 && input.filterNamePrefix !== null && { filterNamePrefix: input.filterNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DisassociateKmsKeyRequest = function(input, context) {
  return __assign4({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1FilterLogEventsRequest = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4(__assign4(__assign4(__assign4(__assign4(__assign4({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.interleaved !== void 0 && input.interleaved !== null && { interleaved: input.interleaved }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.logStreamNames !== void 0 && input.logStreamNames !== null && {
    logStreamNames: serializeAws_json1_1InputLogStreamNames(input.logStreamNames, context)
  }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1GetLogEventsRequest = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4(__assign4(__assign4(__assign4({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.startFromHead !== void 0 && input.startFromHead !== null && { startFromHead: input.startFromHead }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1GetLogGroupFieldsRequest = function(input, context) {
  return __assign4(__assign4({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.time !== void 0 && input.time !== null && { time: input.time });
};
var serializeAws_json1_1GetLogRecordRequest = function(input, context) {
  return __assign4({}, input.logRecordPointer !== void 0 && input.logRecordPointer !== null && { logRecordPointer: input.logRecordPointer });
};
var serializeAws_json1_1GetQueryResultsRequest = function(input, context) {
  return __assign4({}, input.queryId !== void 0 && input.queryId !== null && { queryId: input.queryId });
};
var serializeAws_json1_1InputLogEvent = function(input, context) {
  return __assign4(__assign4({}, input.message !== void 0 && input.message !== null && { message: input.message }), input.timestamp !== void 0 && input.timestamp !== null && { timestamp: input.timestamp });
};
var serializeAws_json1_1InputLogEvents = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1InputLogEvent(entry, context);
  });
};
var serializeAws_json1_1InputLogStreamNames = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1ListTagsLogGroupRequest = function(input, context) {
  return __assign4({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1LogGroupNames = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1MetricTransformation = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4({}, input.defaultValue !== void 0 && input.defaultValue !== null && { defaultValue: input.defaultValue }), input.metricName !== void 0 && input.metricName !== null && { metricName: input.metricName }), input.metricNamespace !== void 0 && input.metricNamespace !== null && { metricNamespace: input.metricNamespace }), input.metricValue !== void 0 && input.metricValue !== null && { metricValue: input.metricValue });
};
var serializeAws_json1_1MetricTransformations = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1MetricTransformation(entry, context);
  });
};
var serializeAws_json1_1PutDestinationPolicyRequest = function(input, context) {
  return __assign4(__assign4({}, input.accessPolicy !== void 0 && input.accessPolicy !== null && { accessPolicy: input.accessPolicy }), input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName });
};
var serializeAws_json1_1PutDestinationRequest = function(input, context) {
  return __assign4(__assign4(__assign4({}, input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName }), input.roleArn !== void 0 && input.roleArn !== null && { roleArn: input.roleArn }), input.targetArn !== void 0 && input.targetArn !== null && { targetArn: input.targetArn });
};
var serializeAws_json1_1PutLogEventsRequest = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4({}, input.logEvents !== void 0 && input.logEvents !== null && { logEvents: serializeAws_json1_1InputLogEvents(input.logEvents, context) }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName }), input.sequenceToken !== void 0 && input.sequenceToken !== null && { sequenceToken: input.sequenceToken });
};
var serializeAws_json1_1PutMetricFilterRequest = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.metricTransformations !== void 0 && input.metricTransformations !== null && {
    metricTransformations: serializeAws_json1_1MetricTransformations(input.metricTransformations, context)
  });
};
var serializeAws_json1_1PutQueryDefinitionRequest = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4({}, input.logGroupNames !== void 0 && input.logGroupNames !== null && {
    logGroupNames: serializeAws_json1_1LogGroupNames(input.logGroupNames, context)
  }), input.name !== void 0 && input.name !== null && { name: input.name }), input.queryDefinitionId !== void 0 && input.queryDefinitionId !== null && { queryDefinitionId: input.queryDefinitionId }), input.queryString !== void 0 && input.queryString !== null && { queryString: input.queryString });
};
var serializeAws_json1_1PutResourcePolicyRequest = function(input, context) {
  return __assign4(__assign4({}, input.policyDocument !== void 0 && input.policyDocument !== null && { policyDocument: input.policyDocument }), input.policyName !== void 0 && input.policyName !== null && { policyName: input.policyName });
};
var serializeAws_json1_1PutRetentionPolicyRequest = function(input, context) {
  return __assign4(__assign4({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.retentionInDays !== void 0 && input.retentionInDays !== null && { retentionInDays: input.retentionInDays });
};
var serializeAws_json1_1PutSubscriptionFilterRequest = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4(__assign4(__assign4({}, input.destinationArn !== void 0 && input.destinationArn !== null && { destinationArn: input.destinationArn }), input.distribution !== void 0 && input.distribution !== null && { distribution: input.distribution }), input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.roleArn !== void 0 && input.roleArn !== null && { roleArn: input.roleArn });
};
var serializeAws_json1_1StartQueryRequest = function(input, context) {
  return __assign4(__assign4(__assign4(__assign4(__assign4(__assign4({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logGroupNames !== void 0 && input.logGroupNames !== null && {
    logGroupNames: serializeAws_json1_1LogGroupNames(input.logGroupNames, context)
  }), input.queryString !== void 0 && input.queryString !== null && { queryString: input.queryString }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1StopQueryRequest = function(input, context) {
  return __assign4({}, input.queryId !== void 0 && input.queryId !== null && { queryId: input.queryId });
};
var serializeAws_json1_1TagList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1TagLogGroupRequest = function(input, context) {
  return __assign4(__assign4({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1Tags(input.tags, context) });
};
var serializeAws_json1_1Tags = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read6(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign4(__assign4({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1TestEventMessages = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1TestMetricFilterRequest = function(input, context) {
  return __assign4(__assign4({}, input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logEventMessages !== void 0 && input.logEventMessages !== null && {
    logEventMessages: serializeAws_json1_1TestEventMessages(input.logEventMessages, context)
  });
};
var serializeAws_json1_1UntagLogGroupRequest = function(input, context) {
  return __assign4(__assign4({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1TagList(input.tags, context) });
};
var deserializeAws_json1_1CreateExportTaskResponse = function(output, context) {
  return {
    taskId: output.taskId !== void 0 && output.taskId !== null ? output.taskId : void 0
  };
};
var deserializeAws_json1_1DataAlreadyAcceptedException = function(output, context) {
  return {
    expectedSequenceToken: output.expectedSequenceToken !== void 0 && output.expectedSequenceToken !== null ? output.expectedSequenceToken : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1DeleteQueryDefinitionResponse = function(output, context) {
  return {
    success: output.success !== void 0 && output.success !== null ? output.success : void 0
  };
};
var deserializeAws_json1_1DescribeDestinationsResponse = function(output, context) {
  return {
    destinations: output.destinations !== void 0 && output.destinations !== null ? deserializeAws_json1_1Destinations(output.destinations, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeExportTasksResponse = function(output, context) {
  return {
    exportTasks: output.exportTasks !== void 0 && output.exportTasks !== null ? deserializeAws_json1_1ExportTasks(output.exportTasks, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeLogGroupsResponse = function(output, context) {
  return {
    logGroups: output.logGroups !== void 0 && output.logGroups !== null ? deserializeAws_json1_1LogGroups(output.logGroups, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeLogStreamsResponse = function(output, context) {
  return {
    logStreams: output.logStreams !== void 0 && output.logStreams !== null ? deserializeAws_json1_1LogStreams(output.logStreams, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeMetricFiltersResponse = function(output, context) {
  return {
    metricFilters: output.metricFilters !== void 0 && output.metricFilters !== null ? deserializeAws_json1_1MetricFilters(output.metricFilters, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeQueriesResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    queries: output.queries !== void 0 && output.queries !== null ? deserializeAws_json1_1QueryInfoList(output.queries, context) : void 0
  };
};
var deserializeAws_json1_1DescribeQueryDefinitionsResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    queryDefinitions: output.queryDefinitions !== void 0 && output.queryDefinitions !== null ? deserializeAws_json1_1QueryDefinitionList(output.queryDefinitions, context) : void 0
  };
};
var deserializeAws_json1_1DescribeResourcePoliciesResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    resourcePolicies: output.resourcePolicies !== void 0 && output.resourcePolicies !== null ? deserializeAws_json1_1ResourcePolicies(output.resourcePolicies, context) : void 0
  };
};
var deserializeAws_json1_1DescribeSubscriptionFiltersResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    subscriptionFilters: output.subscriptionFilters !== void 0 && output.subscriptionFilters !== null ? deserializeAws_json1_1SubscriptionFilters(output.subscriptionFilters, context) : void 0
  };
};
var deserializeAws_json1_1Destination = function(output, context) {
  return {
    accessPolicy: output.accessPolicy !== void 0 && output.accessPolicy !== null ? output.accessPolicy : void 0,
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    destinationName: output.destinationName !== void 0 && output.destinationName !== null ? output.destinationName : void 0,
    roleArn: output.roleArn !== void 0 && output.roleArn !== null ? output.roleArn : void 0,
    targetArn: output.targetArn !== void 0 && output.targetArn !== null ? output.targetArn : void 0
  };
};
var deserializeAws_json1_1Destinations = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1Destination(entry, context);
  });
};
var deserializeAws_json1_1ExportTask = function(output, context) {
  return {
    destination: output.destination !== void 0 && output.destination !== null ? output.destination : void 0,
    destinationPrefix: output.destinationPrefix !== void 0 && output.destinationPrefix !== null ? output.destinationPrefix : void 0,
    executionInfo: output.executionInfo !== void 0 && output.executionInfo !== null ? deserializeAws_json1_1ExportTaskExecutionInfo(output.executionInfo, context) : void 0,
    from: output.from !== void 0 && output.from !== null ? output.from : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    status: output.status !== void 0 && output.status !== null ? deserializeAws_json1_1ExportTaskStatus(output.status, context) : void 0,
    taskId: output.taskId !== void 0 && output.taskId !== null ? output.taskId : void 0,
    taskName: output.taskName !== void 0 && output.taskName !== null ? output.taskName : void 0,
    to: output.to !== void 0 && output.to !== null ? output.to : void 0
  };
};
var deserializeAws_json1_1ExportTaskExecutionInfo = function(output, context) {
  return {
    completionTime: output.completionTime !== void 0 && output.completionTime !== null ? output.completionTime : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0
  };
};
var deserializeAws_json1_1ExportTasks = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ExportTask(entry, context);
  });
};
var deserializeAws_json1_1ExportTaskStatus = function(output, context) {
  return {
    code: output.code !== void 0 && output.code !== null ? output.code : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ExtractedValues = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read6(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign4(__assign4({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1FilteredLogEvent = function(output, context) {
  return {
    eventId: output.eventId !== void 0 && output.eventId !== null ? output.eventId : void 0,
    ingestionTime: output.ingestionTime !== void 0 && output.ingestionTime !== null ? output.ingestionTime : void 0,
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    timestamp: output.timestamp !== void 0 && output.timestamp !== null ? output.timestamp : void 0
  };
};
var deserializeAws_json1_1FilteredLogEvents = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1FilteredLogEvent(entry, context);
  });
};
var deserializeAws_json1_1FilterLogEventsResponse = function(output, context) {
  return {
    events: output.events !== void 0 && output.events !== null ? deserializeAws_json1_1FilteredLogEvents(output.events, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    searchedLogStreams: output.searchedLogStreams !== void 0 && output.searchedLogStreams !== null ? deserializeAws_json1_1SearchedLogStreams(output.searchedLogStreams, context) : void 0
  };
};
var deserializeAws_json1_1GetLogEventsResponse = function(output, context) {
  return {
    events: output.events !== void 0 && output.events !== null ? deserializeAws_json1_1OutputLogEvents(output.events, context) : void 0,
    nextBackwardToken: output.nextBackwardToken !== void 0 && output.nextBackwardToken !== null ? output.nextBackwardToken : void 0,
    nextForwardToken: output.nextForwardToken !== void 0 && output.nextForwardToken !== null ? output.nextForwardToken : void 0
  };
};
var deserializeAws_json1_1GetLogGroupFieldsResponse = function(output, context) {
  return {
    logGroupFields: output.logGroupFields !== void 0 && output.logGroupFields !== null ? deserializeAws_json1_1LogGroupFieldList(output.logGroupFields, context) : void 0
  };
};
var deserializeAws_json1_1GetLogRecordResponse = function(output, context) {
  return {
    logRecord: output.logRecord !== void 0 && output.logRecord !== null ? deserializeAws_json1_1LogRecord(output.logRecord, context) : void 0
  };
};
var deserializeAws_json1_1GetQueryResultsResponse = function(output, context) {
  return {
    results: output.results !== void 0 && output.results !== null ? deserializeAws_json1_1QueryResults(output.results, context) : void 0,
    statistics: output.statistics !== void 0 && output.statistics !== null ? deserializeAws_json1_1QueryStatistics(output.statistics, context) : void 0,
    status: output.status !== void 0 && output.status !== null ? output.status : void 0
  };
};
var deserializeAws_json1_1InvalidOperationException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidParameterException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidSequenceTokenException = function(output, context) {
  return {
    expectedSequenceToken: output.expectedSequenceToken !== void 0 && output.expectedSequenceToken !== null ? output.expectedSequenceToken : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1LimitExceededException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ListTagsLogGroupResponse = function(output, context) {
  return {
    tags: output.tags !== void 0 && output.tags !== null ? deserializeAws_json1_1Tags(output.tags, context) : void 0
  };
};
var deserializeAws_json1_1LogGroup = function(output, context) {
  return {
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    kmsKeyId: output.kmsKeyId !== void 0 && output.kmsKeyId !== null ? output.kmsKeyId : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    metricFilterCount: output.metricFilterCount !== void 0 && output.metricFilterCount !== null ? output.metricFilterCount : void 0,
    retentionInDays: output.retentionInDays !== void 0 && output.retentionInDays !== null ? output.retentionInDays : void 0,
    storedBytes: output.storedBytes !== void 0 && output.storedBytes !== null ? output.storedBytes : void 0
  };
};
var deserializeAws_json1_1LogGroupField = function(output, context) {
  return {
    name: output.name !== void 0 && output.name !== null ? output.name : void 0,
    percent: output.percent !== void 0 && output.percent !== null ? output.percent : void 0
  };
};
var deserializeAws_json1_1LogGroupFieldList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogGroupField(entry, context);
  });
};
var deserializeAws_json1_1LogGroupNames = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1LogGroups = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogGroup(entry, context);
  });
};
var deserializeAws_json1_1LogRecord = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read6(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign4(__assign4({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1LogStream = function(output, context) {
  return {
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    firstEventTimestamp: output.firstEventTimestamp !== void 0 && output.firstEventTimestamp !== null ? output.firstEventTimestamp : void 0,
    lastEventTimestamp: output.lastEventTimestamp !== void 0 && output.lastEventTimestamp !== null ? output.lastEventTimestamp : void 0,
    lastIngestionTime: output.lastIngestionTime !== void 0 && output.lastIngestionTime !== null ? output.lastIngestionTime : void 0,
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    storedBytes: output.storedBytes !== void 0 && output.storedBytes !== null ? output.storedBytes : void 0,
    uploadSequenceToken: output.uploadSequenceToken !== void 0 && output.uploadSequenceToken !== null ? output.uploadSequenceToken : void 0
  };
};
var deserializeAws_json1_1LogStreams = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogStream(entry, context);
  });
};
var deserializeAws_json1_1MalformedQueryException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    queryCompileError: output.queryCompileError !== void 0 && output.queryCompileError !== null ? deserializeAws_json1_1QueryCompileError(output.queryCompileError, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilter = function(output, context) {
  return {
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    filterName: output.filterName !== void 0 && output.filterName !== null ? output.filterName : void 0,
    filterPattern: output.filterPattern !== void 0 && output.filterPattern !== null ? output.filterPattern : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    metricTransformations: output.metricTransformations !== void 0 && output.metricTransformations !== null ? deserializeAws_json1_1MetricTransformations(output.metricTransformations, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilterMatches = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricFilterMatchRecord(entry, context);
  });
};
var deserializeAws_json1_1MetricFilterMatchRecord = function(output, context) {
  return {
    eventMessage: output.eventMessage !== void 0 && output.eventMessage !== null ? output.eventMessage : void 0,
    eventNumber: output.eventNumber !== void 0 && output.eventNumber !== null ? output.eventNumber : void 0,
    extractedValues: output.extractedValues !== void 0 && output.extractedValues !== null ? deserializeAws_json1_1ExtractedValues(output.extractedValues, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilters = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricFilter(entry, context);
  });
};
var deserializeAws_json1_1MetricTransformation = function(output, context) {
  return {
    defaultValue: output.defaultValue !== void 0 && output.defaultValue !== null ? output.defaultValue : void 0,
    metricName: output.metricName !== void 0 && output.metricName !== null ? output.metricName : void 0,
    metricNamespace: output.metricNamespace !== void 0 && output.metricNamespace !== null ? output.metricNamespace : void 0,
    metricValue: output.metricValue !== void 0 && output.metricValue !== null ? output.metricValue : void 0
  };
};
var deserializeAws_json1_1MetricTransformations = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricTransformation(entry, context);
  });
};
var deserializeAws_json1_1OperationAbortedException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1OutputLogEvent = function(output, context) {
  return {
    ingestionTime: output.ingestionTime !== void 0 && output.ingestionTime !== null ? output.ingestionTime : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    timestamp: output.timestamp !== void 0 && output.timestamp !== null ? output.timestamp : void 0
  };
};
var deserializeAws_json1_1OutputLogEvents = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1OutputLogEvent(entry, context);
  });
};
var deserializeAws_json1_1PutDestinationResponse = function(output, context) {
  return {
    destination: output.destination !== void 0 && output.destination !== null ? deserializeAws_json1_1Destination(output.destination, context) : void 0
  };
};
var deserializeAws_json1_1PutLogEventsResponse = function(output, context) {
  return {
    nextSequenceToken: output.nextSequenceToken !== void 0 && output.nextSequenceToken !== null ? output.nextSequenceToken : void 0,
    rejectedLogEventsInfo: output.rejectedLogEventsInfo !== void 0 && output.rejectedLogEventsInfo !== null ? deserializeAws_json1_1RejectedLogEventsInfo(output.rejectedLogEventsInfo, context) : void 0
  };
};
var deserializeAws_json1_1PutQueryDefinitionResponse = function(output, context) {
  return {
    queryDefinitionId: output.queryDefinitionId !== void 0 && output.queryDefinitionId !== null ? output.queryDefinitionId : void 0
  };
};
var deserializeAws_json1_1PutResourcePolicyResponse = function(output, context) {
  return {
    resourcePolicy: output.resourcePolicy !== void 0 && output.resourcePolicy !== null ? deserializeAws_json1_1ResourcePolicy(output.resourcePolicy, context) : void 0
  };
};
var deserializeAws_json1_1QueryCompileError = function(output, context) {
  return {
    location: output.location !== void 0 && output.location !== null ? deserializeAws_json1_1QueryCompileErrorLocation(output.location, context) : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1QueryCompileErrorLocation = function(output, context) {
  return {
    endCharOffset: output.endCharOffset !== void 0 && output.endCharOffset !== null ? output.endCharOffset : void 0,
    startCharOffset: output.startCharOffset !== void 0 && output.startCharOffset !== null ? output.startCharOffset : void 0
  };
};
var deserializeAws_json1_1QueryDefinition = function(output, context) {
  return {
    lastModified: output.lastModified !== void 0 && output.lastModified !== null ? output.lastModified : void 0,
    logGroupNames: output.logGroupNames !== void 0 && output.logGroupNames !== null ? deserializeAws_json1_1LogGroupNames(output.logGroupNames, context) : void 0,
    name: output.name !== void 0 && output.name !== null ? output.name : void 0,
    queryDefinitionId: output.queryDefinitionId !== void 0 && output.queryDefinitionId !== null ? output.queryDefinitionId : void 0,
    queryString: output.queryString !== void 0 && output.queryString !== null ? output.queryString : void 0
  };
};
var deserializeAws_json1_1QueryDefinitionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1QueryDefinition(entry, context);
  });
};
var deserializeAws_json1_1QueryInfo = function(output, context) {
  return {
    createTime: output.createTime !== void 0 && output.createTime !== null ? output.createTime : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    queryId: output.queryId !== void 0 && output.queryId !== null ? output.queryId : void 0,
    queryString: output.queryString !== void 0 && output.queryString !== null ? output.queryString : void 0,
    status: output.status !== void 0 && output.status !== null ? output.status : void 0
  };
};
var deserializeAws_json1_1QueryInfoList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1QueryInfo(entry, context);
  });
};
var deserializeAws_json1_1QueryResults = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResultRows(entry, context);
  });
};
var deserializeAws_json1_1QueryStatistics = function(output, context) {
  return {
    bytesScanned: output.bytesScanned !== void 0 && output.bytesScanned !== null ? output.bytesScanned : void 0,
    recordsMatched: output.recordsMatched !== void 0 && output.recordsMatched !== null ? output.recordsMatched : void 0,
    recordsScanned: output.recordsScanned !== void 0 && output.recordsScanned !== null ? output.recordsScanned : void 0
  };
};
var deserializeAws_json1_1RejectedLogEventsInfo = function(output, context) {
  return {
    expiredLogEventEndIndex: output.expiredLogEventEndIndex !== void 0 && output.expiredLogEventEndIndex !== null ? output.expiredLogEventEndIndex : void 0,
    tooNewLogEventStartIndex: output.tooNewLogEventStartIndex !== void 0 && output.tooNewLogEventStartIndex !== null ? output.tooNewLogEventStartIndex : void 0,
    tooOldLogEventEndIndex: output.tooOldLogEventEndIndex !== void 0 && output.tooOldLogEventEndIndex !== null ? output.tooOldLogEventEndIndex : void 0
  };
};
var deserializeAws_json1_1ResourceAlreadyExistsException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ResourceNotFoundException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ResourcePolicies = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResourcePolicy(entry, context);
  });
};
var deserializeAws_json1_1ResourcePolicy = function(output, context) {
  return {
    lastUpdatedTime: output.lastUpdatedTime !== void 0 && output.lastUpdatedTime !== null ? output.lastUpdatedTime : void 0,
    policyDocument: output.policyDocument !== void 0 && output.policyDocument !== null ? output.policyDocument : void 0,
    policyName: output.policyName !== void 0 && output.policyName !== null ? output.policyName : void 0
  };
};
var deserializeAws_json1_1ResultField = function(output, context) {
  return {
    field: output.field !== void 0 && output.field !== null ? output.field : void 0,
    value: output.value !== void 0 && output.value !== null ? output.value : void 0
  };
};
var deserializeAws_json1_1ResultRows = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResultField(entry, context);
  });
};
var deserializeAws_json1_1SearchedLogStream = function(output, context) {
  return {
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    searchedCompletely: output.searchedCompletely !== void 0 && output.searchedCompletely !== null ? output.searchedCompletely : void 0
  };
};
var deserializeAws_json1_1SearchedLogStreams = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1SearchedLogStream(entry, context);
  });
};
var deserializeAws_json1_1ServiceUnavailableException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1StartQueryResponse = function(output, context) {
  return {
    queryId: output.queryId !== void 0 && output.queryId !== null ? output.queryId : void 0
  };
};
var deserializeAws_json1_1StopQueryResponse = function(output, context) {
  return {
    success: output.success !== void 0 && output.success !== null ? output.success : void 0
  };
};
var deserializeAws_json1_1SubscriptionFilter = function(output, context) {
  return {
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    destinationArn: output.destinationArn !== void 0 && output.destinationArn !== null ? output.destinationArn : void 0,
    distribution: output.distribution !== void 0 && output.distribution !== null ? output.distribution : void 0,
    filterName: output.filterName !== void 0 && output.filterName !== null ? output.filterName : void 0,
    filterPattern: output.filterPattern !== void 0 && output.filterPattern !== null ? output.filterPattern : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    roleArn: output.roleArn !== void 0 && output.roleArn !== null ? output.roleArn : void 0
  };
};
var deserializeAws_json1_1SubscriptionFilters = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1SubscriptionFilter(entry, context);
  });
};
var deserializeAws_json1_1Tags = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read6(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign4(__assign4({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1TestMetricFilterResponse = function(output, context) {
  return {
    matches: output.matches !== void 0 && output.matches !== null ? deserializeAws_json1_1MetricFilterMatches(output.matches, context) : void 0
  };
};
var deserializeAws_json1_1UnrecognizedClientException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeMetadata = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function(streamBody, context) {
  return collectBody(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var buildHttpRpcRequest = function(context, headers, path, resolvedHostname, body) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, contents;
    return __generator3(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
          contents = {
            protocol,
            hostname,
            port,
            method: "POST",
            path,
            headers
          };
          if (resolvedHostname !== void 0) {
            contents.hostname = resolvedHostname;
          }
          if (body !== void 0) {
            contents.body = body;
          }
          return [2, new HttpRequest(contents)];
      }
    });
  });
};
var parseBody = function(streamBody, context) {
  return collectBodyString(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });
};
var loadRestJsonErrorCode = function(output, data) {
  var findKey = function(object, key) {
    return Object.keys(object).find(function(k) {
      return k.toLowerCase() === key.toLowerCase();
    });
  };
  var sanitizeErrorCode = function(rawValue) {
    var cleanValue = rawValue;
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  var headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
  return "";
};

// node_modules/@aws-sdk/middleware-serde/dist/es/deserializerMiddleware.js
var deserializerMiddleware = function(options, deserializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter4(void 0, void 0, void 0, function() {
        var response, parsed;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, next(args)];
            case 1:
              response = _a.sent().response;
              return [4, deserializer(response, options)];
            case 2:
              parsed = _a.sent();
              return [2, {
                response,
                output: parsed
              }];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/middleware-serde/dist/es/serializerMiddleware.js
var serializerMiddleware = function(options, serializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter4(void 0, void 0, void 0, function() {
        var request;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, serializer(args.input, options)];
            case 1:
              request = _a.sent();
              return [2, next(__assign5(__assign5({}, args), { request }))];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/middleware-serde/dist/es/serdePlugin.js
var deserializerMiddlewareOption = {
  name: "deserializerMiddleware",
  step: "deserialize",
  tags: ["DESERIALIZER"],
  override: true
};
var serializerMiddlewareOption = {
  name: "serializerMiddleware",
  step: "serialize",
  tags: ["SERIALIZER"],
  override: true
};
function getSerdePlugin(config, serializer, deserializer) {
  return {
    applyToStack: function(commandStack) {
      commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
      commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
    }
  };
}

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/AssociateKmsKeyCommand.js
var AssociateKmsKeyCommand = function(_super) {
  __extends3(AssociateKmsKeyCommand2, _super);
  function AssociateKmsKeyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  AssociateKmsKeyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "AssociateKmsKeyCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: AssociateKmsKeyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  AssociateKmsKeyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1AssociateKmsKeyCommand(input, context);
  };
  AssociateKmsKeyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1AssociateKmsKeyCommand(output, context);
  };
  return AssociateKmsKeyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CancelExportTaskCommand.js
var CancelExportTaskCommand = function(_super) {
  __extends3(CancelExportTaskCommand2, _super);
  function CancelExportTaskCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CancelExportTaskCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "CancelExportTaskCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: CancelExportTaskRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CancelExportTaskCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CancelExportTaskCommand(input, context);
  };
  CancelExportTaskCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CancelExportTaskCommand(output, context);
  };
  return CancelExportTaskCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateExportTaskCommand.js
var CreateExportTaskCommand = function(_super) {
  __extends3(CreateExportTaskCommand2, _super);
  function CreateExportTaskCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateExportTaskCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "CreateExportTaskCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateExportTaskRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateExportTaskResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateExportTaskCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CreateExportTaskCommand(input, context);
  };
  CreateExportTaskCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CreateExportTaskCommand(output, context);
  };
  return CreateExportTaskCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateLogGroupCommand.js
var CreateLogGroupCommand = function(_super) {
  __extends3(CreateLogGroupCommand2, _super);
  function CreateLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "CreateLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CreateLogGroupCommand(input, context);
  };
  CreateLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CreateLogGroupCommand(output, context);
  };
  return CreateLogGroupCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateLogStreamCommand.js
var CreateLogStreamCommand = function(_super) {
  __extends3(CreateLogStreamCommand2, _super);
  function CreateLogStreamCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateLogStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "CreateLogStreamCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateLogStreamRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateLogStreamCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CreateLogStreamCommand(input, context);
  };
  CreateLogStreamCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CreateLogStreamCommand(output, context);
  };
  return CreateLogStreamCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteDestinationCommand.js
var DeleteDestinationCommand = function(_super) {
  __extends3(DeleteDestinationCommand2, _super);
  function DeleteDestinationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteDestinationCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteDestinationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteDestinationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteDestinationCommand(input, context);
  };
  DeleteDestinationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteDestinationCommand(output, context);
  };
  return DeleteDestinationCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteLogGroupCommand.js
var DeleteLogGroupCommand = function(_super) {
  __extends3(DeleteLogGroupCommand2, _super);
  function DeleteLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteLogGroupCommand(input, context);
  };
  DeleteLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteLogGroupCommand(output, context);
  };
  return DeleteLogGroupCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteLogStreamCommand.js
var DeleteLogStreamCommand = function(_super) {
  __extends3(DeleteLogStreamCommand2, _super);
  function DeleteLogStreamCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteLogStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteLogStreamCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteLogStreamRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteLogStreamCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteLogStreamCommand(input, context);
  };
  DeleteLogStreamCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteLogStreamCommand(output, context);
  };
  return DeleteLogStreamCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteMetricFilterCommand.js
var DeleteMetricFilterCommand = function(_super) {
  __extends3(DeleteMetricFilterCommand2, _super);
  function DeleteMetricFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteMetricFilterCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteMetricFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteMetricFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteMetricFilterCommand(input, context);
  };
  DeleteMetricFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteMetricFilterCommand(output, context);
  };
  return DeleteMetricFilterCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteQueryDefinitionCommand.js
var DeleteQueryDefinitionCommand = function(_super) {
  __extends3(DeleteQueryDefinitionCommand2, _super);
  function DeleteQueryDefinitionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteQueryDefinitionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteQueryDefinitionCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteQueryDefinitionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteQueryDefinitionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteQueryDefinitionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteQueryDefinitionCommand(input, context);
  };
  DeleteQueryDefinitionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteQueryDefinitionCommand(output, context);
  };
  return DeleteQueryDefinitionCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteResourcePolicyCommand.js
var DeleteResourcePolicyCommand = function(_super) {
  __extends3(DeleteResourcePolicyCommand2, _super);
  function DeleteResourcePolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteResourcePolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteResourcePolicyCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteResourcePolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteResourcePolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteResourcePolicyCommand(input, context);
  };
  DeleteResourcePolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteResourcePolicyCommand(output, context);
  };
  return DeleteResourcePolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteRetentionPolicyCommand.js
var DeleteRetentionPolicyCommand = function(_super) {
  __extends3(DeleteRetentionPolicyCommand2, _super);
  function DeleteRetentionPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteRetentionPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteRetentionPolicyCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteRetentionPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteRetentionPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteRetentionPolicyCommand(input, context);
  };
  DeleteRetentionPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteRetentionPolicyCommand(output, context);
  };
  return DeleteRetentionPolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteSubscriptionFilterCommand.js
var DeleteSubscriptionFilterCommand = function(_super) {
  __extends3(DeleteSubscriptionFilterCommand2, _super);
  function DeleteSubscriptionFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteSubscriptionFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteSubscriptionFilterCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteSubscriptionFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteSubscriptionFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteSubscriptionFilterCommand(input, context);
  };
  DeleteSubscriptionFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteSubscriptionFilterCommand(output, context);
  };
  return DeleteSubscriptionFilterCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeDestinationsCommand.js
var DescribeDestinationsCommand = function(_super) {
  __extends3(DescribeDestinationsCommand2, _super);
  function DescribeDestinationsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeDestinationsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeDestinationsCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeDestinationsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeDestinationsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeDestinationsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeDestinationsCommand(input, context);
  };
  DescribeDestinationsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeDestinationsCommand(output, context);
  };
  return DescribeDestinationsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeExportTasksCommand.js
var DescribeExportTasksCommand = function(_super) {
  __extends3(DescribeExportTasksCommand2, _super);
  function DescribeExportTasksCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeExportTasksCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeExportTasksCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeExportTasksRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeExportTasksResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeExportTasksCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeExportTasksCommand(input, context);
  };
  DescribeExportTasksCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeExportTasksCommand(output, context);
  };
  return DescribeExportTasksCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeLogGroupsCommand.js
var DescribeLogGroupsCommand = function(_super) {
  __extends3(DescribeLogGroupsCommand2, _super);
  function DescribeLogGroupsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeLogGroupsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeLogGroupsCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeLogGroupsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeLogGroupsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeLogGroupsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeLogGroupsCommand(input, context);
  };
  DescribeLogGroupsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeLogGroupsCommand(output, context);
  };
  return DescribeLogGroupsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeLogStreamsCommand.js
var DescribeLogStreamsCommand = function(_super) {
  __extends3(DescribeLogStreamsCommand2, _super);
  function DescribeLogStreamsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeLogStreamsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeLogStreamsCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeLogStreamsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeLogStreamsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeLogStreamsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeLogStreamsCommand(input, context);
  };
  DescribeLogStreamsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeLogStreamsCommand(output, context);
  };
  return DescribeLogStreamsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeMetricFiltersCommand.js
var DescribeMetricFiltersCommand = function(_super) {
  __extends3(DescribeMetricFiltersCommand2, _super);
  function DescribeMetricFiltersCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeMetricFiltersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeMetricFiltersCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeMetricFiltersRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeMetricFiltersResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeMetricFiltersCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeMetricFiltersCommand(input, context);
  };
  DescribeMetricFiltersCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeMetricFiltersCommand(output, context);
  };
  return DescribeMetricFiltersCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeQueriesCommand.js
var DescribeQueriesCommand = function(_super) {
  __extends3(DescribeQueriesCommand2, _super);
  function DescribeQueriesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeQueriesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeQueriesCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeQueriesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeQueriesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeQueriesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeQueriesCommand(input, context);
  };
  DescribeQueriesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeQueriesCommand(output, context);
  };
  return DescribeQueriesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeQueryDefinitionsCommand.js
var DescribeQueryDefinitionsCommand = function(_super) {
  __extends3(DescribeQueryDefinitionsCommand2, _super);
  function DescribeQueryDefinitionsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeQueryDefinitionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeQueryDefinitionsCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeQueryDefinitionsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeQueryDefinitionsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeQueryDefinitionsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeQueryDefinitionsCommand(input, context);
  };
  DescribeQueryDefinitionsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeQueryDefinitionsCommand(output, context);
  };
  return DescribeQueryDefinitionsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeResourcePoliciesCommand.js
var DescribeResourcePoliciesCommand = function(_super) {
  __extends3(DescribeResourcePoliciesCommand2, _super);
  function DescribeResourcePoliciesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeResourcePoliciesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeResourcePoliciesCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeResourcePoliciesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeResourcePoliciesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeResourcePoliciesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeResourcePoliciesCommand(input, context);
  };
  DescribeResourcePoliciesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeResourcePoliciesCommand(output, context);
  };
  return DescribeResourcePoliciesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeSubscriptionFiltersCommand.js
var DescribeSubscriptionFiltersCommand = function(_super) {
  __extends3(DescribeSubscriptionFiltersCommand2, _super);
  function DescribeSubscriptionFiltersCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeSubscriptionFiltersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeSubscriptionFiltersCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeSubscriptionFiltersRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeSubscriptionFiltersResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeSubscriptionFiltersCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeSubscriptionFiltersCommand(input, context);
  };
  DescribeSubscriptionFiltersCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeSubscriptionFiltersCommand(output, context);
  };
  return DescribeSubscriptionFiltersCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DisassociateKmsKeyCommand.js
var DisassociateKmsKeyCommand = function(_super) {
  __extends3(DisassociateKmsKeyCommand2, _super);
  function DisassociateKmsKeyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DisassociateKmsKeyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DisassociateKmsKeyCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DisassociateKmsKeyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DisassociateKmsKeyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DisassociateKmsKeyCommand(input, context);
  };
  DisassociateKmsKeyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DisassociateKmsKeyCommand(output, context);
  };
  return DisassociateKmsKeyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/FilterLogEventsCommand.js
var FilterLogEventsCommand = function(_super) {
  __extends3(FilterLogEventsCommand2, _super);
  function FilterLogEventsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  FilterLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "FilterLogEventsCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: FilterLogEventsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: FilterLogEventsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  FilterLogEventsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1FilterLogEventsCommand(input, context);
  };
  FilterLogEventsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1FilterLogEventsCommand(output, context);
  };
  return FilterLogEventsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogEventsCommand.js
var GetLogEventsCommand = function(_super) {
  __extends3(GetLogEventsCommand2, _super);
  function GetLogEventsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "GetLogEventsCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetLogEventsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetLogEventsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetLogEventsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetLogEventsCommand(input, context);
  };
  GetLogEventsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetLogEventsCommand(output, context);
  };
  return GetLogEventsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogGroupFieldsCommand.js
var GetLogGroupFieldsCommand = function(_super) {
  __extends3(GetLogGroupFieldsCommand2, _super);
  function GetLogGroupFieldsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetLogGroupFieldsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "GetLogGroupFieldsCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetLogGroupFieldsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetLogGroupFieldsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetLogGroupFieldsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetLogGroupFieldsCommand(input, context);
  };
  GetLogGroupFieldsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetLogGroupFieldsCommand(output, context);
  };
  return GetLogGroupFieldsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogRecordCommand.js
var GetLogRecordCommand = function(_super) {
  __extends3(GetLogRecordCommand2, _super);
  function GetLogRecordCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetLogRecordCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "GetLogRecordCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetLogRecordRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetLogRecordResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetLogRecordCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetLogRecordCommand(input, context);
  };
  GetLogRecordCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetLogRecordCommand(output, context);
  };
  return GetLogRecordCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetQueryResultsCommand.js
var GetQueryResultsCommand = function(_super) {
  __extends3(GetQueryResultsCommand2, _super);
  function GetQueryResultsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetQueryResultsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "GetQueryResultsCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetQueryResultsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetQueryResultsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetQueryResultsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetQueryResultsCommand(input, context);
  };
  GetQueryResultsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetQueryResultsCommand(output, context);
  };
  return GetQueryResultsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/ListTagsLogGroupCommand.js
var ListTagsLogGroupCommand = function(_super) {
  __extends3(ListTagsLogGroupCommand2, _super);
  function ListTagsLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTagsLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "ListTagsLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTagsLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListTagsLogGroupResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTagsLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1ListTagsLogGroupCommand(input, context);
  };
  ListTagsLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1ListTagsLogGroupCommand(output, context);
  };
  return ListTagsLogGroupCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutDestinationCommand.js
var PutDestinationCommand = function(_super) {
  __extends3(PutDestinationCommand2, _super);
  function PutDestinationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutDestinationCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutDestinationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutDestinationResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutDestinationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutDestinationCommand(input, context);
  };
  PutDestinationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutDestinationCommand(output, context);
  };
  return PutDestinationCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutDestinationPolicyCommand.js
var PutDestinationPolicyCommand = function(_super) {
  __extends3(PutDestinationPolicyCommand2, _super);
  function PutDestinationPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutDestinationPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutDestinationPolicyCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutDestinationPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutDestinationPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutDestinationPolicyCommand(input, context);
  };
  PutDestinationPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutDestinationPolicyCommand(output, context);
  };
  return PutDestinationPolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutLogEventsCommand.js
var PutLogEventsCommand = function(_super) {
  __extends3(PutLogEventsCommand2, _super);
  function PutLogEventsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutLogEventsCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutLogEventsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutLogEventsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutLogEventsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutLogEventsCommand(input, context);
  };
  PutLogEventsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutLogEventsCommand(output, context);
  };
  return PutLogEventsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutMetricFilterCommand.js
var PutMetricFilterCommand = function(_super) {
  __extends3(PutMetricFilterCommand2, _super);
  function PutMetricFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutMetricFilterCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutMetricFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutMetricFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutMetricFilterCommand(input, context);
  };
  PutMetricFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutMetricFilterCommand(output, context);
  };
  return PutMetricFilterCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutQueryDefinitionCommand.js
var PutQueryDefinitionCommand = function(_super) {
  __extends3(PutQueryDefinitionCommand2, _super);
  function PutQueryDefinitionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutQueryDefinitionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutQueryDefinitionCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutQueryDefinitionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutQueryDefinitionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutQueryDefinitionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutQueryDefinitionCommand(input, context);
  };
  PutQueryDefinitionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutQueryDefinitionCommand(output, context);
  };
  return PutQueryDefinitionCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutResourcePolicyCommand.js
var PutResourcePolicyCommand = function(_super) {
  __extends3(PutResourcePolicyCommand2, _super);
  function PutResourcePolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutResourcePolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutResourcePolicyCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutResourcePolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutResourcePolicyResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutResourcePolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutResourcePolicyCommand(input, context);
  };
  PutResourcePolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutResourcePolicyCommand(output, context);
  };
  return PutResourcePolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutRetentionPolicyCommand.js
var PutRetentionPolicyCommand = function(_super) {
  __extends3(PutRetentionPolicyCommand2, _super);
  function PutRetentionPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutRetentionPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutRetentionPolicyCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutRetentionPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutRetentionPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutRetentionPolicyCommand(input, context);
  };
  PutRetentionPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutRetentionPolicyCommand(output, context);
  };
  return PutRetentionPolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutSubscriptionFilterCommand.js
var PutSubscriptionFilterCommand = function(_super) {
  __extends3(PutSubscriptionFilterCommand2, _super);
  function PutSubscriptionFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutSubscriptionFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutSubscriptionFilterCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutSubscriptionFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutSubscriptionFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutSubscriptionFilterCommand(input, context);
  };
  PutSubscriptionFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutSubscriptionFilterCommand(output, context);
  };
  return PutSubscriptionFilterCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/StartQueryCommand.js
var StartQueryCommand = function(_super) {
  __extends3(StartQueryCommand2, _super);
  function StartQueryCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  StartQueryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "StartQueryCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: StartQueryRequest.filterSensitiveLog,
      outputFilterSensitiveLog: StartQueryResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  StartQueryCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1StartQueryCommand(input, context);
  };
  StartQueryCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1StartQueryCommand(output, context);
  };
  return StartQueryCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/StopQueryCommand.js
var StopQueryCommand = function(_super) {
  __extends3(StopQueryCommand2, _super);
  function StopQueryCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  StopQueryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "StopQueryCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: StopQueryRequest.filterSensitiveLog,
      outputFilterSensitiveLog: StopQueryResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  StopQueryCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1StopQueryCommand(input, context);
  };
  StopQueryCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1StopQueryCommand(output, context);
  };
  return StopQueryCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/TagLogGroupCommand.js
var TagLogGroupCommand = function(_super) {
  __extends3(TagLogGroupCommand2, _super);
  function TagLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TagLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "TagLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: TagLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TagLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1TagLogGroupCommand(input, context);
  };
  TagLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1TagLogGroupCommand(output, context);
  };
  return TagLogGroupCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/TestMetricFilterCommand.js
var TestMetricFilterCommand = function(_super) {
  __extends3(TestMetricFilterCommand2, _super);
  function TestMetricFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TestMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "TestMetricFilterCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: TestMetricFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: TestMetricFilterResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TestMetricFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1TestMetricFilterCommand(input, context);
  };
  TestMetricFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1TestMetricFilterCommand(output, context);
  };
  return TestMetricFilterCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/UntagLogGroupCommand.js
var UntagLogGroupCommand = function(_super) {
  __extends3(UntagLogGroupCommand2, _super);
  function UntagLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UntagLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "UntagLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: UntagLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UntagLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1UntagLogGroupCommand(input, context);
  };
  UntagLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1UntagLogGroupCommand(output, context);
  };
  return UntagLogGroupCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/CloudWatchLogs.js
var CloudWatchLogs = function(_super) {
  __extends3(CloudWatchLogs2, _super);
  function CloudWatchLogs2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  CloudWatchLogs2.prototype.associateKmsKey = function(args, optionsOrCb, cb) {
    var command = new AssociateKmsKeyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.cancelExportTask = function(args, optionsOrCb, cb) {
    var command = new CancelExportTaskCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.createExportTask = function(args, optionsOrCb, cb) {
    var command = new CreateExportTaskCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.createLogGroup = function(args, optionsOrCb, cb) {
    var command = new CreateLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.createLogStream = function(args, optionsOrCb, cb) {
    var command = new CreateLogStreamCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteDestination = function(args, optionsOrCb, cb) {
    var command = new DeleteDestinationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteLogGroup = function(args, optionsOrCb, cb) {
    var command = new DeleteLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteLogStream = function(args, optionsOrCb, cb) {
    var command = new DeleteLogStreamCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteMetricFilter = function(args, optionsOrCb, cb) {
    var command = new DeleteMetricFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteQueryDefinition = function(args, optionsOrCb, cb) {
    var command = new DeleteQueryDefinitionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteResourcePolicy = function(args, optionsOrCb, cb) {
    var command = new DeleteResourcePolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteRetentionPolicy = function(args, optionsOrCb, cb) {
    var command = new DeleteRetentionPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteSubscriptionFilter = function(args, optionsOrCb, cb) {
    var command = new DeleteSubscriptionFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeDestinations = function(args, optionsOrCb, cb) {
    var command = new DescribeDestinationsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeExportTasks = function(args, optionsOrCb, cb) {
    var command = new DescribeExportTasksCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeLogGroups = function(args, optionsOrCb, cb) {
    var command = new DescribeLogGroupsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeLogStreams = function(args, optionsOrCb, cb) {
    var command = new DescribeLogStreamsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeMetricFilters = function(args, optionsOrCb, cb) {
    var command = new DescribeMetricFiltersCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeQueries = function(args, optionsOrCb, cb) {
    var command = new DescribeQueriesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeQueryDefinitions = function(args, optionsOrCb, cb) {
    var command = new DescribeQueryDefinitionsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeResourcePolicies = function(args, optionsOrCb, cb) {
    var command = new DescribeResourcePoliciesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeSubscriptionFilters = function(args, optionsOrCb, cb) {
    var command = new DescribeSubscriptionFiltersCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.disassociateKmsKey = function(args, optionsOrCb, cb) {
    var command = new DisassociateKmsKeyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.filterLogEvents = function(args, optionsOrCb, cb) {
    var command = new FilterLogEventsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.getLogEvents = function(args, optionsOrCb, cb) {
    var command = new GetLogEventsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.getLogGroupFields = function(args, optionsOrCb, cb) {
    var command = new GetLogGroupFieldsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.getLogRecord = function(args, optionsOrCb, cb) {
    var command = new GetLogRecordCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.getQueryResults = function(args, optionsOrCb, cb) {
    var command = new GetQueryResultsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.listTagsLogGroup = function(args, optionsOrCb, cb) {
    var command = new ListTagsLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putDestination = function(args, optionsOrCb, cb) {
    var command = new PutDestinationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putDestinationPolicy = function(args, optionsOrCb, cb) {
    var command = new PutDestinationPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putLogEvents = function(args, optionsOrCb, cb) {
    var command = new PutLogEventsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putMetricFilter = function(args, optionsOrCb, cb) {
    var command = new PutMetricFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putQueryDefinition = function(args, optionsOrCb, cb) {
    var command = new PutQueryDefinitionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putResourcePolicy = function(args, optionsOrCb, cb) {
    var command = new PutResourcePolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putRetentionPolicy = function(args, optionsOrCb, cb) {
    var command = new PutRetentionPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putSubscriptionFilter = function(args, optionsOrCb, cb) {
    var command = new PutSubscriptionFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.startQuery = function(args, optionsOrCb, cb) {
    var command = new StartQueryCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.stopQuery = function(args, optionsOrCb, cb) {
    var command = new StopQueryCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.tagLogGroup = function(args, optionsOrCb, cb) {
    var command = new TagLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.testMetricFilter = function(args, optionsOrCb, cb) {
    var command = new TestMetricFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.untagLogGroup = function(args, optionsOrCb, cb) {
    var command = new UntagLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  return CloudWatchLogs2;
}(CloudWatchLogsClient);

// node_modules/@aws-amplify/core/lib-esm/Providers/AWSCloudWatchProvider.js
var __awaiter5 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator5 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read8 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread6 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read8(arguments[i]));
  return ar;
};
var logger9 = new ConsoleLogger("AWSCloudWatch");
var AWSCloudWatchProvider = function() {
  function AWSCloudWatchProvider2(config) {
    this.configure(config);
    this._dataTracker = {
      eventUploadInProgress: false,
      logEvents: []
    };
    this._currentLogBatch = [];
    this._initiateLogPushInterval();
  }
  AWSCloudWatchProvider2.prototype.getProviderName = function() {
    return AWSCloudWatchProvider2.PROVIDER_NAME;
  };
  AWSCloudWatchProvider2.prototype.getCategoryName = function() {
    return AWSCloudWatchProvider2.CATEGORY;
  };
  AWSCloudWatchProvider2.prototype.getLogQueue = function() {
    return this._dataTracker.logEvents;
  };
  AWSCloudWatchProvider2.prototype.configure = function(config) {
    if (!config)
      return this._config || {};
    var conf = Object.assign({}, this._config, parseMobileHubConfig(config).Logging, config);
    this._config = conf;
    return this._config;
  };
  AWSCloudWatchProvider2.prototype.createLogGroup = function(params) {
    return __awaiter5(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_1;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger9.debug("creating new log group in CloudWatch - ", params.logGroupName);
            cmd = new CreateLogGroupCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_1 = _a.sent();
            logger9.error("error creating log group - " + error_1);
            throw error_1;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.getLogGroups = function(params) {
    return __awaiter5(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_2;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger9.debug("getting list of log groups");
            cmd = new DescribeLogGroupsCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_2 = _a.sent();
            logger9.error("error getting log group - " + error_2);
            throw error_2;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.createLogStream = function(params) {
    return __awaiter5(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_3;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger9.debug("creating new log stream in CloudWatch - ", params.logStreamName);
            cmd = new CreateLogStreamCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_3 = _a.sent();
            logger9.error("error creating log stream - " + error_3);
            throw error_3;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.getLogStreams = function(params) {
    return __awaiter5(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_4;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger9.debug("getting list of log streams");
            cmd = new DescribeLogStreamsCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_4 = _a.sent();
            logger9.error("error getting log stream - " + error_4);
            throw error_4;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.getLogEvents = function(params) {
    return __awaiter5(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_5;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger9.debug("getting log events from stream - ", params.logStreamName);
            cmd = new GetLogEventsCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_5 = _a.sent();
            logger9.error("error getting log events - " + error_5);
            throw error_5;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.pushLogs = function(logs) {
    logger9.debug("pushing log events to Cloudwatch...");
    this._dataTracker.logEvents = __spread6(this._dataTracker.logEvents, logs);
  };
  AWSCloudWatchProvider2.prototype._validateLogGroupExistsAndCreate = function(logGroupName) {
    return __awaiter5(this, void 0, void 0, function() {
      var credentialsOK, currGroups, foundGroups, err_1, errString;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (this._dataTracker.verifiedLogGroup) {
              return [2, this._dataTracker.verifiedLogGroup];
            }
            _a.label = 1;
          case 1:
            _a.trys.push([1, 5, , 6]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            return [4, this.getLogGroups({
              logGroupNamePrefix: logGroupName
            })];
          case 3:
            currGroups = _a.sent();
            if (!(typeof currGroups === "string") && currGroups.logGroups) {
              foundGroups = currGroups.logGroups.filter(function(group) {
                return group.logGroupName === logGroupName;
              });
              if (foundGroups.length > 0) {
                this._dataTracker.verifiedLogGroup = foundGroups[0];
                return [2, foundGroups[0]];
              }
            }
            return [4, this.createLogGroup({ logGroupName })];
          case 4:
            _a.sent();
            return [2, null];
          case 5:
            err_1 = _a.sent();
            errString = "failure during log group search: " + err_1;
            logger9.error(errString);
            throw err_1;
          case 6:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._validateLogStreamExists = function(logGroupName, logStreamName) {
    return __awaiter5(this, void 0, void 0, function() {
      var credentialsOK, currStreams, foundStreams, err_2, errString;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 1:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            return [4, this.getLogStreams({
              logGroupName,
              logStreamNamePrefix: logStreamName
            })];
          case 2:
            currStreams = _a.sent();
            if (currStreams.logStreams) {
              foundStreams = currStreams.logStreams.filter(function(stream) {
                return stream.logStreamName === logStreamName;
              });
              if (foundStreams.length > 0) {
                this._nextSequenceToken = foundStreams[0].uploadSequenceToken;
                return [2, foundStreams[0]];
              }
            }
            return [4, this.createLogStream({
              logGroupName,
              logStreamName
            })];
          case 3:
            _a.sent();
            return [2, null];
          case 4:
            err_2 = _a.sent();
            errString = "failure during log stream search: " + err_2;
            logger9.error(errString);
            throw err_2;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._sendLogEvents = function(params) {
    return __awaiter5(this, void 0, void 0, function() {
      var credentialsOK, cmd, client, output, err_3, errString;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 3, , 4]);
            return [4, this._ensureCredentials()];
          case 1:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            logger9.debug("sending log events to stream - ", params.logStreamName);
            cmd = new PutLogEventsCommand(params);
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 2:
            output = _a.sent();
            return [2, output];
          case 3:
            err_3 = _a.sent();
            errString = "failure during log push: " + err_3;
            logger9.error(errString);
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._initCloudWatchLogs = function() {
    return new CloudWatchLogsClient({
      region: this._config.region,
      credentials: this._config.credentials,
      customUserAgent: getAmplifyUserAgent(),
      endpoint: this._config.endpoint
    });
  };
  AWSCloudWatchProvider2.prototype._ensureCredentials = function() {
    return __awaiter5(this, void 0, void 0, function() {
      var _this = this;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, Credentials.get().then(function(credentials) {
              if (!credentials)
                return false;
              var cred = Credentials.shear(credentials);
              logger9.debug("set credentials for logging", cred);
              _this._config.credentials = cred;
              return true;
            }).catch(function(error) {
              logger9.warn("ensure credentials error", error);
              return false;
            })];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._getNextSequenceToken = function() {
    return __awaiter5(this, void 0, void 0, function() {
      var logStream, err_4;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (this._nextSequenceToken && this._nextSequenceToken.length > 0) {
              return [2, this._nextSequenceToken];
            }
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._validateLogGroupExistsAndCreate(this._config.logGroupName)];
          case 2:
            _a.sent();
            this._nextSequenceToken = void 0;
            return [4, this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)];
          case 3:
            logStream = _a.sent();
            if (logStream) {
              this._nextSequenceToken = logStream.uploadSequenceToken;
            }
            return [2, this._nextSequenceToken];
          case 4:
            err_4 = _a.sent();
            logger9.error("failure while getting next sequence token: " + err_4);
            throw err_4;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._safeUploadLogEvents = function() {
    return __awaiter5(this, void 0, void 0, function() {
      var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 3, , 4]);
            return [4, this._getNextSequenceToken()];
          case 1:
            seqToken = _a.sent();
            logBatch = this._currentLogBatch.length === 0 ? this._getBufferedBatchOfLogs() : this._currentLogBatch;
            putLogsPayload = {
              logGroupName: this._config.logGroupName,
              logStreamName: this._config.logStreamName,
              logEvents: logBatch,
              sequenceToken: seqToken
            };
            this._dataTracker.eventUploadInProgress = true;
            return [4, this._sendLogEvents(putLogsPayload)];
          case 2:
            sendLogEventsResponse = _a.sent();
            this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;
            this._dataTracker.eventUploadInProgress = false;
            this._currentLogBatch = [];
            return [2, sendLogEventsResponse];
          case 3:
            err_5 = _a.sent();
            logger9.error("error during _safeUploadLogEvents: " + err_5);
            if (RETRY_ERROR_CODES.includes(err_5.name)) {
              this._getNewSequenceTokenAndSubmit({
                logEvents: this._currentLogBatch,
                logGroupName: this._config.logGroupName,
                logStreamName: this._config.logStreamName
              });
            } else {
              this._dataTracker.eventUploadInProgress = false;
              throw err_5;
            }
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._getBufferedBatchOfLogs = function() {
    var currentEventIdx = 0;
    var totalByteSize = 0;
    while (currentEventIdx < this._dataTracker.logEvents.length) {
      var currentEvent = this._dataTracker.logEvents[currentEventIdx];
      var eventSize = currentEvent ? new TextEncoder().encode(currentEvent.message).length + AWS_CLOUDWATCH_BASE_BUFFER_SIZE : 0;
      if (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {
        var errString = "Log entry exceeds maximum size for CloudWatch logs. Log size: " + eventSize + ". Truncating log message.";
        logger9.warn(errString);
        currentEvent.message = currentEvent.message.substring(0, eventSize);
      }
      if (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE)
        break;
      totalByteSize += eventSize;
      currentEventIdx++;
    }
    this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);
    return this._currentLogBatch;
  };
  AWSCloudWatchProvider2.prototype._getNewSequenceTokenAndSubmit = function(payload) {
    return __awaiter5(this, void 0, void 0, function() {
      var seqToken, sendLogEventsRepsonse, err_6;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 3, , 4]);
            this._nextSequenceToken = void 0;
            this._dataTracker.eventUploadInProgress = true;
            return [4, this._getNextSequenceToken()];
          case 1:
            seqToken = _a.sent();
            payload.sequenceToken = seqToken;
            return [4, this._sendLogEvents(payload)];
          case 2:
            sendLogEventsRepsonse = _a.sent();
            this._dataTracker.eventUploadInProgress = false;
            this._currentLogBatch = [];
            return [2, sendLogEventsRepsonse];
          case 3:
            err_6 = _a.sent();
            logger9.error("error when retrying log submission with new sequence token: " + err_6);
            this._dataTracker.eventUploadInProgress = false;
            throw err_6;
          case 4:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._initiateLogPushInterval = function() {
    var _this = this;
    if (this._timer) {
      clearInterval(this._timer);
    }
    this._timer = setInterval(function() {
      return __awaiter5(_this, void 0, void 0, function() {
        var err_7;
        return __generator5(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 3, , 4]);
              if (!this._getDocUploadPermissibility())
                return [3, 2];
              return [4, this._safeUploadLogEvents()];
            case 1:
              _a.sent();
              _a.label = 2;
            case 2:
              return [3, 4];
            case 3:
              err_7 = _a.sent();
              logger9.error("error when calling _safeUploadLogEvents in the timer interval - " + err_7);
              return [3, 4];
            case 4:
              return [2];
          }
        });
      });
    }, 2e3);
  };
  AWSCloudWatchProvider2.prototype._getDocUploadPermissibility = function() {
    return (this._dataTracker.logEvents.length !== 0 || this._currentLogBatch.length !== 0) && !this._dataTracker.eventUploadInProgress;
  };
  AWSCloudWatchProvider2.PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;
  AWSCloudWatchProvider2.CATEGORY = AWS_CLOUDWATCH_CATEGORY;
  return AWSCloudWatchProvider2;
}();

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/GoogleOAuth.js
var __awaiter6 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator6 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var logger10 = new ConsoleLogger("CognitoCredentials");
var waitForInit = new Promise(function(res, rej) {
  if (!browserOrNode().isBrowser) {
    logger10.debug("not in the browser, directly resolved");
    return res();
  }
  var ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
  if (ga) {
    logger10.debug("google api already loaded");
    return res();
  } else {
    setTimeout(function() {
      return res();
    }, 2e3);
  }
});
var GoogleOAuth = function() {
  function GoogleOAuth3() {
    this.initialized = false;
    this.refreshGoogleToken = this.refreshGoogleToken.bind(this);
    this._refreshGoogleTokenImpl = this._refreshGoogleTokenImpl.bind(this);
  }
  GoogleOAuth3.prototype.refreshGoogleToken = function() {
    return __awaiter6(this, void 0, void 0, function() {
      return __generator6(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!!this.initialized)
              return [3, 2];
            logger10.debug("need to wait for the Google SDK loaded");
            return [4, waitForInit];
          case 1:
            _a.sent();
            this.initialized = true;
            logger10.debug("finish waiting");
            _a.label = 2;
          case 2:
            return [2, this._refreshGoogleTokenImpl()];
        }
      });
    });
  };
  GoogleOAuth3.prototype._refreshGoogleTokenImpl = function() {
    var ga = null;
    if (browserOrNode().isBrowser)
      ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
    if (!ga) {
      logger10.debug("no gapi auth2 available");
      return Promise.reject("no gapi auth2 available");
    }
    return new Promise(function(res, rej) {
      ga.getAuthInstance().then(function(googleAuth) {
        if (!googleAuth) {
          logger10.debug("google Auth undefined");
          rej(new NonRetryableError("google Auth undefined"));
        }
        var googleUser = googleAuth.currentUser.get();
        if (googleUser.isSignedIn()) {
          logger10.debug("refreshing the google access token");
          googleUser.reloadAuthResponse().then(function(authResponse) {
            var id_token = authResponse.id_token, expires_at = authResponse.expires_at;
            res({ token: id_token, expires_at });
          }).catch(function(err) {
            if (err && err.error === "network_error") {
              rej("Network error reloading google auth response");
            } else {
              rej(new NonRetryableError("Failed to reload google auth response"));
            }
          });
        } else {
          rej(new NonRetryableError("User is not signed in with Google"));
        }
      }).catch(function(err) {
        logger10.debug("Failed to refresh google token", err);
        rej(new NonRetryableError("Failed to refresh google token"));
      });
    });
  };
  return GoogleOAuth3;
}();

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/FacebookOAuth.js
var __awaiter7 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator7 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var logger11 = new ConsoleLogger("CognitoCredentials");
var waitForInit2 = new Promise(function(res, rej) {
  if (!browserOrNode().isBrowser) {
    logger11.debug("not in the browser, directly resolved");
    return res();
  }
  var fb = window["FB"];
  if (fb) {
    logger11.debug("FB SDK already loaded");
    return res();
  } else {
    setTimeout(function() {
      return res();
    }, 2e3);
  }
});
var FacebookOAuth = function() {
  function FacebookOAuth3() {
    this.initialized = false;
    this.refreshFacebookToken = this.refreshFacebookToken.bind(this);
    this._refreshFacebookTokenImpl = this._refreshFacebookTokenImpl.bind(this);
  }
  FacebookOAuth3.prototype.refreshFacebookToken = function() {
    return __awaiter7(this, void 0, void 0, function() {
      return __generator7(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!!this.initialized)
              return [3, 2];
            logger11.debug("need to wait for the Facebook SDK loaded");
            return [4, waitForInit2];
          case 1:
            _a.sent();
            this.initialized = true;
            logger11.debug("finish waiting");
            _a.label = 2;
          case 2:
            return [2, this._refreshFacebookTokenImpl()];
        }
      });
    });
  };
  FacebookOAuth3.prototype._refreshFacebookTokenImpl = function() {
    var fb = null;
    if (browserOrNode().isBrowser)
      fb = window["FB"];
    if (!fb) {
      var errorMessage = "no fb sdk available";
      logger11.debug(errorMessage);
      return Promise.reject(new NonRetryableError(errorMessage));
    }
    return new Promise(function(res, rej) {
      fb.getLoginStatus(function(fbResponse) {
        if (!fbResponse || !fbResponse.authResponse) {
          var errorMessage2 = "no response from facebook when refreshing the jwt token";
          logger11.debug(errorMessage2);
          rej(new NonRetryableError(errorMessage2));
        } else {
          var response = fbResponse.authResponse;
          var accessToken = response.accessToken, expiresIn = response.expiresIn;
          var date = new Date();
          var expires_at = expiresIn * 1e3 + date.getTime();
          if (!accessToken) {
            var errorMessage2 = "the jwtToken is undefined";
            logger11.debug(errorMessage2);
            rej(new NonRetryableError(errorMessage2));
          }
          res({
            token: accessToken,
            expires_at
          });
        }
      }, { scope: "public_profile,email" });
    });
  };
  return FacebookOAuth3;
}();

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/index.js
var GoogleOAuth2 = new GoogleOAuth();
var FacebookOAuth2 = new FacebookOAuth();

// node_modules/@aws-amplify/core/lib-esm/StorageHelper/index.js
var dataMemory = {};
var MemoryStorage = function() {
  function MemoryStorage2() {
  }
  MemoryStorage2.setItem = function(key, value) {
    dataMemory[key] = value;
    return dataMemory[key];
  };
  MemoryStorage2.getItem = function(key) {
    return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : void 0;
  };
  MemoryStorage2.removeItem = function(key) {
    return delete dataMemory[key];
  };
  MemoryStorage2.clear = function() {
    dataMemory = {};
    return dataMemory;
  };
  return MemoryStorage2;
}();
var StorageHelper = function() {
  function StorageHelper2() {
    try {
      this.storageWindow = window.localStorage;
      this.storageWindow.setItem("aws.amplify.test-ls", 1);
      this.storageWindow.removeItem("aws.amplify.test-ls");
    } catch (exception) {
      this.storageWindow = MemoryStorage;
    }
  }
  StorageHelper2.prototype.getStorage = function() {
    return this.storageWindow;
  };
  return StorageHelper2;
}();

// node_modules/@aws-amplify/core/lib-esm/RNComponents/index.js
var Linking = {};
var AppState = {
  addEventListener: function(action, handler) {
    return void 0;
  }
};
var AsyncStorage = browserOrNode().isBrowser ? new StorageHelper().getStorage() : void 0;

// node_modules/@aws-sdk/client-cognito-identity/node_modules/tslib/tslib.es6.js
var extendStatics3 = function(d, b) {
  extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics3(d, b);
};
function __extends5(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics3(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign6 = function() {
  __assign6 = Object.assign || function __assign10(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
function __awaiter8(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator8(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read9(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/@aws-sdk/client-cognito-identity/dist/es/package.json
var package_default2 = {
  name: "@aws-sdk/client-cognito-identity",
  description: "AWS SDK for JavaScript Cognito Identity Client for Node.js, Browser and React Native",
  version: "3.6.1",
  scripts: {
    clean: "yarn remove-definitions && yarn remove-dist && yarn remove-documentation",
    "build-documentation": "yarn remove-documentation && typedoc ./",
    prepublishOnly: "yarn build",
    pretest: "yarn build:cjs",
    "remove-definitions": "rimraf ./types",
    "remove-dist": "rimraf ./dist",
    "remove-documentation": "rimraf ./docs",
    "test:unit": "mocha **/cjs/**/*.spec.js",
    "test:e2e": "mocha **/cjs/**/*.ispec.js && karma start karma.conf.js",
    test: "yarn test:unit",
    "build:cjs": "tsc -p tsconfig.json",
    "build:es": "tsc -p tsconfig.es.json",
    build: "yarn build:cjs && yarn build:es",
    postbuild: "downlevel-dts types types/ts3.4"
  },
  main: "./dist/cjs/index.js",
  types: "./types/index.d.ts",
  module: "./dist/es/index.js",
  browser: {
    "./runtimeConfig": "./runtimeConfig.browser"
  },
  "react-native": {
    "./runtimeConfig": "./runtimeConfig.native"
  },
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "^1.0.0",
    "@aws-crypto/sha256-js": "^1.0.0",
    "@aws-sdk/config-resolver": "3.6.1",
    "@aws-sdk/credential-provider-node": "3.6.1",
    "@aws-sdk/fetch-http-handler": "3.6.1",
    "@aws-sdk/hash-node": "3.6.1",
    "@aws-sdk/invalid-dependency": "3.6.1",
    "@aws-sdk/middleware-content-length": "3.6.1",
    "@aws-sdk/middleware-host-header": "3.6.1",
    "@aws-sdk/middleware-logger": "3.6.1",
    "@aws-sdk/middleware-retry": "3.6.1",
    "@aws-sdk/middleware-serde": "3.6.1",
    "@aws-sdk/middleware-signing": "3.6.1",
    "@aws-sdk/middleware-stack": "3.6.1",
    "@aws-sdk/middleware-user-agent": "3.6.1",
    "@aws-sdk/node-config-provider": "3.6.1",
    "@aws-sdk/node-http-handler": "3.6.1",
    "@aws-sdk/protocol-http": "3.6.1",
    "@aws-sdk/smithy-client": "3.6.1",
    "@aws-sdk/types": "3.6.1",
    "@aws-sdk/url-parser": "3.6.1",
    "@aws-sdk/url-parser-native": "3.6.1",
    "@aws-sdk/util-base64-browser": "3.6.1",
    "@aws-sdk/util-base64-node": "3.6.1",
    "@aws-sdk/util-body-length-browser": "3.6.1",
    "@aws-sdk/util-body-length-node": "3.6.1",
    "@aws-sdk/util-user-agent-browser": "3.6.1",
    "@aws-sdk/util-user-agent-node": "3.6.1",
    "@aws-sdk/util-utf8-browser": "3.6.1",
    "@aws-sdk/util-utf8-node": "3.6.1",
    tslib: "^2.0.0"
  },
  devDependencies: {
    "@aws-sdk/client-documentation-generator": "3.6.1",
    "@aws-sdk/client-iam": "3.6.1",
    "@types/chai": "^4.2.11",
    "@types/mocha": "^8.0.4",
    "@types/node": "^12.7.5",
    "downlevel-dts": "0.7.0",
    jest: "^26.1.0",
    rimraf: "^3.0.0",
    typedoc: "^0.19.2",
    typescript: "~4.1.2"
  },
  engines: {
    node: ">=10.0.0"
  },
  typesVersions: {
    "<4.0": {
      "types/*": [
        "types/ts3.4/*"
      ]
    }
  },
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cognito-identity",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-cognito-identity"
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist/es/runtimeConfig.browser.js
var import_sha256_browser2 = __toESM(require_build6());
init_es2();

// node_modules/@aws-sdk/client-cognito-identity/dist/es/endpoints.js
var AWS_TEMPLATE2 = "cognito-identity.{region}.amazonaws.com";
var AWS_CN_TEMPLATE2 = "cognito-identity.{region}.amazonaws.com.cn";
var AWS_ISO_TEMPLATE2 = "cognito-identity.{region}.c2s.ic.gov";
var AWS_ISO_B_TEMPLATE2 = "cognito-identity.{region}.sc2s.sgov.gov";
var AWS_US_GOV_TEMPLATE2 = "cognito-identity.{region}.amazonaws.com";
var AWS_REGIONS2 = /* @__PURE__ */ new Set([
  "af-south-1",
  "ap-east-1",
  "ap-northeast-1",
  "ap-northeast-2",
  "ap-south-1",
  "ap-southeast-1",
  "ap-southeast-2",
  "ca-central-1",
  "eu-central-1",
  "eu-north-1",
  "eu-south-1",
  "eu-west-1",
  "eu-west-2",
  "eu-west-3",
  "me-south-1",
  "sa-east-1",
  "us-east-1",
  "us-east-2",
  "us-west-1",
  "us-west-2"
]);
var AWS_CN_REGIONS2 = /* @__PURE__ */ new Set(["cn-north-1", "cn-northwest-1"]);
var AWS_ISO_REGIONS2 = /* @__PURE__ */ new Set(["us-iso-east-1"]);
var AWS_ISO_B_REGIONS2 = /* @__PURE__ */ new Set(["us-isob-east-1"]);
var AWS_US_GOV_REGIONS2 = /* @__PURE__ */ new Set(["us-gov-east-1", "us-gov-west-1"]);
var defaultRegionInfoProvider2 = function(region, options) {
  var regionInfo = void 0;
  switch (region) {
    case "ap-northeast-1":
      regionInfo = {
        hostname: "cognito-identity.ap-northeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-northeast-2":
      regionInfo = {
        hostname: "cognito-identity.ap-northeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-south-1":
      regionInfo = {
        hostname: "cognito-identity.ap-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-1":
      regionInfo = {
        hostname: "cognito-identity.ap-southeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-2":
      regionInfo = {
        hostname: "cognito-identity.ap-southeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ca-central-1":
      regionInfo = {
        hostname: "cognito-identity.ca-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "cn-north-1":
      regionInfo = {
        hostname: "cognito-identity.cn-north-1.amazonaws.com.cn",
        partition: "aws-cn"
      };
      break;
    case "eu-central-1":
      regionInfo = {
        hostname: "cognito-identity.eu-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-north-1":
      regionInfo = {
        hostname: "cognito-identity.eu-north-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-1":
      regionInfo = {
        hostname: "cognito-identity.eu-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-2":
      regionInfo = {
        hostname: "cognito-identity.eu-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-3":
      regionInfo = {
        hostname: "cognito-identity.eu-west-3.amazonaws.com",
        partition: "aws"
      };
      break;
    case "fips-us-east-1":
      regionInfo = {
        hostname: "cognito-identity-fips.us-east-1.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-1"
      };
      break;
    case "fips-us-east-2":
      regionInfo = {
        hostname: "cognito-identity-fips.us-east-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-2"
      };
      break;
    case "fips-us-gov-west-1":
      regionInfo = {
        hostname: "cognito-identity-fips.us-gov-west-1.amazonaws.com",
        partition: "aws-us-gov",
        signingRegion: "us-gov-west-1"
      };
      break;
    case "fips-us-west-2":
      regionInfo = {
        hostname: "cognito-identity-fips.us-west-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-west-2"
      };
      break;
    case "sa-east-1":
      regionInfo = {
        hostname: "cognito-identity.sa-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-1":
      regionInfo = {
        hostname: "cognito-identity.us-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-2":
      regionInfo = {
        hostname: "cognito-identity.us-east-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-gov-west-1":
      regionInfo = {
        hostname: "cognito-identity.us-gov-west-1.amazonaws.com",
        partition: "aws-us-gov"
      };
      break;
    case "us-west-1":
      regionInfo = {
        hostname: "cognito-identity.us-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-west-2":
      regionInfo = {
        hostname: "cognito-identity.us-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    default:
      if (AWS_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_TEMPLATE2.replace("{region}", region),
          partition: "aws"
        };
      }
      if (AWS_CN_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_CN_TEMPLATE2.replace("{region}", region),
          partition: "aws-cn"
        };
      }
      if (AWS_ISO_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_TEMPLATE2.replace("{region}", region),
          partition: "aws-iso"
        };
      }
      if (AWS_ISO_B_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_B_TEMPLATE2.replace("{region}", region),
          partition: "aws-iso-b"
        };
      }
      if (AWS_US_GOV_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_US_GOV_TEMPLATE2.replace("{region}", region),
          partition: "aws-us-gov"
        };
      }
      if (regionInfo === void 0) {
        regionInfo = {
          hostname: AWS_TEMPLATE2.replace("{region}", region),
          partition: "aws"
        };
      }
  }
  return Promise.resolve(__assign6({ signingService: "cognito-identity" }, regionInfo));
};

// node_modules/@aws-sdk/client-cognito-identity/dist/es/runtimeConfig.shared.js
var ClientSharedValues2 = {
  apiVersion: "2014-06-30",
  disableHostPrefix: false,
  logger: {},
  regionInfoProvider: defaultRegionInfoProvider2,
  serviceId: "Cognito Identity",
  urlParser: parseUrl
};

// node_modules/@aws-sdk/client-cognito-identity/dist/es/runtimeConfig.browser.js
var ClientDefaultValues2 = __assign6(__assign6({}, ClientSharedValues2), { runtime: "browser", base64Decoder: fromBase64, base64Encoder: toBase64, bodyLengthChecker: calculateBodyLength, credentialDefaultProvider: function(_) {
  return function() {
    return Promise.reject(new Error("Credential is missing"));
  };
}, defaultUserAgentProvider: defaultUserAgent({
  serviceId: ClientSharedValues2.serviceId,
  clientVersion: package_default2.version
}), maxAttempts: DEFAULT_MAX_ATTEMPTS, region: invalidProvider("Region is missing"), requestHandler: new FetchHttpHandler(), sha256: import_sha256_browser2.Sha256, streamCollector, utf8Decoder: fromUtf86, utf8Encoder: toUtf86 });

// node_modules/@aws-sdk/client-cognito-identity/dist/es/CognitoIdentityClient.js
var CognitoIdentityClient = function(_super) {
  __extends5(CognitoIdentityClient2, _super);
  function CognitoIdentityClient2(configuration) {
    var _this = this;
    var _config_0 = __assign6(__assign6({}, ClientDefaultValues2), configuration);
    var _config_1 = resolveRegionConfig(_config_0);
    var _config_2 = resolveEndpointsConfig(_config_1);
    var _config_3 = resolveAwsAuthConfig(_config_2);
    var _config_4 = resolveRetryConfig(_config_3);
    var _config_5 = resolveHostHeaderConfig(_config_4);
    var _config_6 = resolveUserAgentConfig(_config_5);
    _this = _super.call(this, _config_6) || this;
    _this.config = _config_6;
    _this.middlewareStack.use(getRetryPlugin(_this.config));
    _this.middlewareStack.use(getContentLengthPlugin(_this.config));
    _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
    _this.middlewareStack.use(getLoggerPlugin(_this.config));
    _this.middlewareStack.use(getUserAgentPlugin(_this.config));
    return _this;
  }
  CognitoIdentityClient2.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
  };
  return CognitoIdentityClient2;
}(Client);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/models/models_0.js
var AmbiguousRoleResolutionType;
(function(AmbiguousRoleResolutionType2) {
  AmbiguousRoleResolutionType2["AUTHENTICATED_ROLE"] = "AuthenticatedRole";
  AmbiguousRoleResolutionType2["DENY"] = "Deny";
})(AmbiguousRoleResolutionType || (AmbiguousRoleResolutionType = {}));
var CognitoIdentityProvider;
(function(CognitoIdentityProvider2) {
  CognitoIdentityProvider2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(CognitoIdentityProvider || (CognitoIdentityProvider = {}));
var CreateIdentityPoolInput;
(function(CreateIdentityPoolInput2) {
  CreateIdentityPoolInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(CreateIdentityPoolInput || (CreateIdentityPoolInput = {}));
var IdentityPool;
(function(IdentityPool2) {
  IdentityPool2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(IdentityPool || (IdentityPool = {}));
var InternalErrorException;
(function(InternalErrorException2) {
  InternalErrorException2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(InternalErrorException || (InternalErrorException = {}));
var InvalidParameterException2;
(function(InvalidParameterException3) {
  InvalidParameterException3.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(InvalidParameterException2 || (InvalidParameterException2 = {}));
var LimitExceededException2;
(function(LimitExceededException3) {
  LimitExceededException3.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(LimitExceededException2 || (LimitExceededException2 = {}));
var NotAuthorizedException;
(function(NotAuthorizedException2) {
  NotAuthorizedException2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(NotAuthorizedException || (NotAuthorizedException = {}));
var ResourceConflictException;
(function(ResourceConflictException2) {
  ResourceConflictException2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(ResourceConflictException || (ResourceConflictException = {}));
var TooManyRequestsException;
(function(TooManyRequestsException2) {
  TooManyRequestsException2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(TooManyRequestsException || (TooManyRequestsException = {}));
var DeleteIdentitiesInput;
(function(DeleteIdentitiesInput2) {
  DeleteIdentitiesInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(DeleteIdentitiesInput || (DeleteIdentitiesInput = {}));
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["ACCESS_DENIED"] = "AccessDenied";
  ErrorCode2["INTERNAL_SERVER_ERROR"] = "InternalServerError";
})(ErrorCode || (ErrorCode = {}));
var UnprocessedIdentityId;
(function(UnprocessedIdentityId2) {
  UnprocessedIdentityId2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(UnprocessedIdentityId || (UnprocessedIdentityId = {}));
var DeleteIdentitiesResponse;
(function(DeleteIdentitiesResponse2) {
  DeleteIdentitiesResponse2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(DeleteIdentitiesResponse || (DeleteIdentitiesResponse = {}));
var DeleteIdentityPoolInput;
(function(DeleteIdentityPoolInput2) {
  DeleteIdentityPoolInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(DeleteIdentityPoolInput || (DeleteIdentityPoolInput = {}));
var ResourceNotFoundException2;
(function(ResourceNotFoundException3) {
  ResourceNotFoundException3.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(ResourceNotFoundException2 || (ResourceNotFoundException2 = {}));
var DescribeIdentityInput;
(function(DescribeIdentityInput2) {
  DescribeIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(DescribeIdentityInput || (DescribeIdentityInput = {}));
var IdentityDescription;
(function(IdentityDescription2) {
  IdentityDescription2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(IdentityDescription || (IdentityDescription = {}));
var DescribeIdentityPoolInput;
(function(DescribeIdentityPoolInput2) {
  DescribeIdentityPoolInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(DescribeIdentityPoolInput || (DescribeIdentityPoolInput = {}));
var ExternalServiceException;
(function(ExternalServiceException2) {
  ExternalServiceException2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(ExternalServiceException || (ExternalServiceException = {}));
var GetCredentialsForIdentityInput;
(function(GetCredentialsForIdentityInput2) {
  GetCredentialsForIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(GetCredentialsForIdentityInput || (GetCredentialsForIdentityInput = {}));
var Credentials2;
(function(Credentials3) {
  Credentials3.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(Credentials2 || (Credentials2 = {}));
var GetCredentialsForIdentityResponse;
(function(GetCredentialsForIdentityResponse2) {
  GetCredentialsForIdentityResponse2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(GetCredentialsForIdentityResponse || (GetCredentialsForIdentityResponse = {}));
var InvalidIdentityPoolConfigurationException;
(function(InvalidIdentityPoolConfigurationException2) {
  InvalidIdentityPoolConfigurationException2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(InvalidIdentityPoolConfigurationException || (InvalidIdentityPoolConfigurationException = {}));
var GetIdInput;
(function(GetIdInput2) {
  GetIdInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(GetIdInput || (GetIdInput = {}));
var GetIdResponse;
(function(GetIdResponse2) {
  GetIdResponse2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(GetIdResponse || (GetIdResponse = {}));
var GetIdentityPoolRolesInput;
(function(GetIdentityPoolRolesInput2) {
  GetIdentityPoolRolesInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(GetIdentityPoolRolesInput || (GetIdentityPoolRolesInput = {}));
var MappingRuleMatchType;
(function(MappingRuleMatchType2) {
  MappingRuleMatchType2["CONTAINS"] = "Contains";
  MappingRuleMatchType2["EQUALS"] = "Equals";
  MappingRuleMatchType2["NOT_EQUAL"] = "NotEqual";
  MappingRuleMatchType2["STARTS_WITH"] = "StartsWith";
})(MappingRuleMatchType || (MappingRuleMatchType = {}));
var MappingRule;
(function(MappingRule2) {
  MappingRule2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(MappingRule || (MappingRule = {}));
var RulesConfigurationType;
(function(RulesConfigurationType2) {
  RulesConfigurationType2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(RulesConfigurationType || (RulesConfigurationType = {}));
var RoleMappingType;
(function(RoleMappingType2) {
  RoleMappingType2["RULES"] = "Rules";
  RoleMappingType2["TOKEN"] = "Token";
})(RoleMappingType || (RoleMappingType = {}));
var RoleMapping;
(function(RoleMapping2) {
  RoleMapping2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(RoleMapping || (RoleMapping = {}));
var GetIdentityPoolRolesResponse;
(function(GetIdentityPoolRolesResponse2) {
  GetIdentityPoolRolesResponse2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(GetIdentityPoolRolesResponse || (GetIdentityPoolRolesResponse = {}));
var GetOpenIdTokenInput;
(function(GetOpenIdTokenInput2) {
  GetOpenIdTokenInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(GetOpenIdTokenInput || (GetOpenIdTokenInput = {}));
var GetOpenIdTokenResponse;
(function(GetOpenIdTokenResponse2) {
  GetOpenIdTokenResponse2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(GetOpenIdTokenResponse || (GetOpenIdTokenResponse = {}));
var DeveloperUserAlreadyRegisteredException;
(function(DeveloperUserAlreadyRegisteredException2) {
  DeveloperUserAlreadyRegisteredException2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(DeveloperUserAlreadyRegisteredException || (DeveloperUserAlreadyRegisteredException = {}));
var GetOpenIdTokenForDeveloperIdentityInput;
(function(GetOpenIdTokenForDeveloperIdentityInput2) {
  GetOpenIdTokenForDeveloperIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(GetOpenIdTokenForDeveloperIdentityInput || (GetOpenIdTokenForDeveloperIdentityInput = {}));
var GetOpenIdTokenForDeveloperIdentityResponse;
(function(GetOpenIdTokenForDeveloperIdentityResponse2) {
  GetOpenIdTokenForDeveloperIdentityResponse2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(GetOpenIdTokenForDeveloperIdentityResponse || (GetOpenIdTokenForDeveloperIdentityResponse = {}));
var ListIdentitiesInput;
(function(ListIdentitiesInput2) {
  ListIdentitiesInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(ListIdentitiesInput || (ListIdentitiesInput = {}));
var ListIdentitiesResponse;
(function(ListIdentitiesResponse2) {
  ListIdentitiesResponse2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(ListIdentitiesResponse || (ListIdentitiesResponse = {}));
var ListIdentityPoolsInput;
(function(ListIdentityPoolsInput2) {
  ListIdentityPoolsInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(ListIdentityPoolsInput || (ListIdentityPoolsInput = {}));
var IdentityPoolShortDescription;
(function(IdentityPoolShortDescription2) {
  IdentityPoolShortDescription2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(IdentityPoolShortDescription || (IdentityPoolShortDescription = {}));
var ListIdentityPoolsResponse;
(function(ListIdentityPoolsResponse2) {
  ListIdentityPoolsResponse2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(ListIdentityPoolsResponse || (ListIdentityPoolsResponse = {}));
var ListTagsForResourceInput;
(function(ListTagsForResourceInput2) {
  ListTagsForResourceInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(ListTagsForResourceInput || (ListTagsForResourceInput = {}));
var ListTagsForResourceResponse;
(function(ListTagsForResourceResponse2) {
  ListTagsForResourceResponse2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(ListTagsForResourceResponse || (ListTagsForResourceResponse = {}));
var LookupDeveloperIdentityInput;
(function(LookupDeveloperIdentityInput2) {
  LookupDeveloperIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(LookupDeveloperIdentityInput || (LookupDeveloperIdentityInput = {}));
var LookupDeveloperIdentityResponse;
(function(LookupDeveloperIdentityResponse2) {
  LookupDeveloperIdentityResponse2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(LookupDeveloperIdentityResponse || (LookupDeveloperIdentityResponse = {}));
var MergeDeveloperIdentitiesInput;
(function(MergeDeveloperIdentitiesInput2) {
  MergeDeveloperIdentitiesInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(MergeDeveloperIdentitiesInput || (MergeDeveloperIdentitiesInput = {}));
var MergeDeveloperIdentitiesResponse;
(function(MergeDeveloperIdentitiesResponse2) {
  MergeDeveloperIdentitiesResponse2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(MergeDeveloperIdentitiesResponse || (MergeDeveloperIdentitiesResponse = {}));
var ConcurrentModificationException;
(function(ConcurrentModificationException2) {
  ConcurrentModificationException2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(ConcurrentModificationException || (ConcurrentModificationException = {}));
var SetIdentityPoolRolesInput;
(function(SetIdentityPoolRolesInput2) {
  SetIdentityPoolRolesInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(SetIdentityPoolRolesInput || (SetIdentityPoolRolesInput = {}));
var TagResourceInput;
(function(TagResourceInput2) {
  TagResourceInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(TagResourceInput || (TagResourceInput = {}));
var TagResourceResponse;
(function(TagResourceResponse2) {
  TagResourceResponse2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(TagResourceResponse || (TagResourceResponse = {}));
var UnlinkDeveloperIdentityInput;
(function(UnlinkDeveloperIdentityInput2) {
  UnlinkDeveloperIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(UnlinkDeveloperIdentityInput || (UnlinkDeveloperIdentityInput = {}));
var UnlinkIdentityInput;
(function(UnlinkIdentityInput2) {
  UnlinkIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(UnlinkIdentityInput || (UnlinkIdentityInput = {}));
var UntagResourceInput;
(function(UntagResourceInput2) {
  UntagResourceInput2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(UntagResourceInput || (UntagResourceInput = {}));
var UntagResourceResponse;
(function(UntagResourceResponse2) {
  UntagResourceResponse2.filterSensitiveLog = function(obj) {
    return __assign6({}, obj);
  };
})(UntagResourceResponse || (UntagResourceResponse = {}));

// node_modules/@aws-sdk/client-cognito-identity/dist/es/protocols/Aws_json1_1.js
var serializeAws_json1_1CreateIdentityPoolCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.CreateIdentityPool"
      };
      body = JSON.stringify(serializeAws_json1_1CreateIdentityPoolInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteIdentitiesCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DeleteIdentities"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteIdentitiesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteIdentityPoolCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DeleteIdentityPool"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteIdentityPoolInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeIdentityCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DescribeIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeIdentityPoolCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DescribeIdentityPool"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeIdentityPoolInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetCredentialsForIdentityCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetCredentialsForIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1GetCredentialsForIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetIdCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetId"
      };
      body = JSON.stringify(serializeAws_json1_1GetIdInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetIdentityPoolRolesCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetIdentityPoolRoles"
      };
      body = JSON.stringify(serializeAws_json1_1GetIdentityPoolRolesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetOpenIdTokenCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetOpenIdToken"
      };
      body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListIdentitiesCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListIdentities"
      };
      body = JSON.stringify(serializeAws_json1_1ListIdentitiesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListIdentityPoolsCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListIdentityPools"
      };
      body = JSON.stringify(serializeAws_json1_1ListIdentityPoolsInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListTagsForResourceCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListTagsForResource"
      };
      body = JSON.stringify(serializeAws_json1_1ListTagsForResourceInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1LookupDeveloperIdentityCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.LookupDeveloperIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1LookupDeveloperIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1MergeDeveloperIdentitiesCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.MergeDeveloperIdentities"
      };
      body = JSON.stringify(serializeAws_json1_1MergeDeveloperIdentitiesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1SetIdentityPoolRolesCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.SetIdentityPoolRoles"
      };
      body = JSON.stringify(serializeAws_json1_1SetIdentityPoolRolesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1TagResourceCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.TagResource"
      };
      body = JSON.stringify(serializeAws_json1_1TagResourceInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UnlinkDeveloperIdentityCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UnlinkDeveloperIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1UnlinkDeveloperIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UnlinkIdentityCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UnlinkIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1UnlinkIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UntagResourceCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UntagResource"
      };
      body = JSON.stringify(serializeAws_json1_1UntagResourceInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UpdateIdentityPoolCommand = function(input, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator8(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UpdateIdentityPool"
      };
      body = JSON.stringify(serializeAws_json1_1IdentityPool(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var deserializeAws_json1_1CreateIdentityPoolCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateIdentityPoolCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1IdentityPool(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateIdentityPoolCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator8(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign6({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#LimitExceededException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteIdentitiesCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteIdentitiesCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DeleteIdentitiesResponse(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteIdentitiesCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator8(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign6({}, output)];
          _f = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "TooManyRequestsException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteIdentityPoolCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteIdentityPoolCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteIdentityPoolCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator8(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign6({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeIdentityCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeIdentityCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1IdentityDescription(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeIdentityCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator8(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign6({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeIdentityPoolCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeIdentityPoolCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1IdentityPool(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeIdentityPoolCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator8(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign6({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetCredentialsForIdentityCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetCredentialsForIdentityCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetCredentialsForIdentityResponse(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetCredentialsForIdentityCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator8(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign6({}, output)];
          _l = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExternalServiceException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ExternalServiceException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidIdentityPoolConfigurationException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidIdentityPoolConfigurationException":
              return [3, 6];
            case "InvalidParameterException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 8];
            case "NotAuthorizedException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 10];
            case "ResourceConflictException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 12];
            case "ResourceNotFoundException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 14];
            case "TooManyRequestsException":
              return [3, 16];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 15:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetIdCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetIdCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetIdResponse(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetIdCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator8(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign6({}, output)];
          _l = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExternalServiceException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ExternalServiceException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "LimitExceededException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#LimitExceededException":
              return [3, 8];
            case "NotAuthorizedException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 10];
            case "ResourceConflictException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 12];
            case "ResourceNotFoundException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 14];
            case "TooManyRequestsException":
              return [3, 16];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 15:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetIdentityPoolRolesCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetIdentityPoolRolesCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetIdentityPoolRolesResponse(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetIdentityPoolRolesCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator8(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign6({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceConflictException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetOpenIdTokenCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetOpenIdTokenCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetOpenIdTokenResponse(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetOpenIdTokenCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator8(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign6({}, output)];
          _k = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExternalServiceException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ExternalServiceException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 12];
            case "TooManyRequestsException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 13:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator8(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign6({}, output)];
          _k = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "DeveloperUserAlreadyRegisteredException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#DeveloperUserAlreadyRegisteredException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 12];
            case "TooManyRequestsException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 13:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListIdentitiesCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListIdentitiesCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListIdentitiesResponse(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListIdentitiesCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator8(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign6({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListIdentityPoolsCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListIdentityPoolsCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListIdentityPoolsResponse(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListIdentityPoolsCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator8(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign6({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsForResourceCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListTagsForResourceCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsForResourceCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator8(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign6({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1LookupDeveloperIdentityCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1LookupDeveloperIdentityCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1LookupDeveloperIdentityResponse(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1LookupDeveloperIdentityCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator8(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign6({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceConflictException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1MergeDeveloperIdentitiesCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1MergeDeveloperIdentitiesResponse(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator8(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign6({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceConflictException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1SetIdentityPoolRolesCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1SetIdentityPoolRolesCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1SetIdentityPoolRolesCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator8(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign6({}, output)];
          _k = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConcurrentModificationException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 12];
            case "TooManyRequestsException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 13:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1TagResourceCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1TagResourceCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1TagResourceResponse(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1TagResourceCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator8(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign6({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UnlinkDeveloperIdentityCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UnlinkDeveloperIdentityCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UnlinkDeveloperIdentityCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator8(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign6({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceConflictException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UnlinkIdentityCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UnlinkIdentityCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UnlinkIdentityCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator8(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign6({}, output)];
          _k = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExternalServiceException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ExternalServiceException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 12];
            case "TooManyRequestsException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 13:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UntagResourceCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UntagResourceCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1UntagResourceResponse(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UntagResourceCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator8(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign6({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UpdateIdentityPoolCommand = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator8(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UpdateIdentityPoolCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1IdentityPool(data, context);
          response = __assign6({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UpdateIdentityPoolCommandError = function(output, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator8(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign6({}, output)];
          _l = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign6.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConcurrentModificationException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "LimitExceededException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#LimitExceededException":
              return [3, 8];
            case "NotAuthorizedException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 10];
            case "ResourceConflictException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 12];
            case "ResourceNotFoundException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 14];
            case "TooManyRequestsException":
              return [3, 16];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 15:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign6.apply(void 0, [__assign6.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign6(__assign6({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ConcurrentModificationExceptionResponse = function(parsedOutput, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator8(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ConcurrentModificationException(body, context);
      contents = __assign6({ name: "ConcurrentModificationException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse = function(parsedOutput, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator8(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1DeveloperUserAlreadyRegisteredException(body, context);
      contents = __assign6({ name: "DeveloperUserAlreadyRegisteredException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ExternalServiceExceptionResponse = function(parsedOutput, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator8(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ExternalServiceException(body, context);
      contents = __assign6({ name: "ExternalServiceException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InternalErrorExceptionResponse = function(parsedOutput, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator8(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InternalErrorException(body, context);
      contents = __assign6({ name: "InternalErrorException", $fault: "server", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse = function(parsedOutput, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator8(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidIdentityPoolConfigurationException(body, context);
      contents = __assign6({ name: "InvalidIdentityPoolConfigurationException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidParameterExceptionResponse2 = function(parsedOutput, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator8(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidParameterException2(body, context);
      contents = __assign6({ name: "InvalidParameterException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1LimitExceededExceptionResponse2 = function(parsedOutput, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator8(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1LimitExceededException2(body, context);
      contents = __assign6({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1NotAuthorizedExceptionResponse = function(parsedOutput, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator8(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1NotAuthorizedException(body, context);
      contents = __assign6({ name: "NotAuthorizedException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceConflictExceptionResponse = function(parsedOutput, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator8(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceConflictException(body, context);
      contents = __assign6({ name: "ResourceConflictException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceNotFoundExceptionResponse2 = function(parsedOutput, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator8(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceNotFoundException2(body, context);
      contents = __assign6({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1TooManyRequestsExceptionResponse = function(parsedOutput, context) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator8(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1TooManyRequestsException(body, context);
      contents = __assign6({ name: "TooManyRequestsException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var serializeAws_json1_1CognitoIdentityProvider = function(input, context) {
  return __assign6(__assign6(__assign6({}, input.ClientId !== void 0 && input.ClientId !== null && { ClientId: input.ClientId }), input.ProviderName !== void 0 && input.ProviderName !== null && { ProviderName: input.ProviderName }), input.ServerSideTokenCheck !== void 0 && input.ServerSideTokenCheck !== null && { ServerSideTokenCheck: input.ServerSideTokenCheck });
};
var serializeAws_json1_1CognitoIdentityProviderList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1CognitoIdentityProvider(entry, context);
  });
};
var serializeAws_json1_1CreateIdentityPoolInput = function(input, context) {
  return __assign6(__assign6(__assign6(__assign6(__assign6(__assign6(__assign6(__assign6(__assign6({}, input.AllowClassicFlow !== void 0 && input.AllowClassicFlow !== null && { AllowClassicFlow: input.AllowClassicFlow }), input.AllowUnauthenticatedIdentities !== void 0 && input.AllowUnauthenticatedIdentities !== null && {
    AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities
  }), input.CognitoIdentityProviders !== void 0 && input.CognitoIdentityProviders !== null && {
    CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context)
  }), input.DeveloperProviderName !== void 0 && input.DeveloperProviderName !== null && { DeveloperProviderName: input.DeveloperProviderName }), input.IdentityPoolName !== void 0 && input.IdentityPoolName !== null && { IdentityPoolName: input.IdentityPoolName }), input.IdentityPoolTags !== void 0 && input.IdentityPoolTags !== null && {
    IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context)
  }), input.OpenIdConnectProviderARNs !== void 0 && input.OpenIdConnectProviderARNs !== null && {
    OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context)
  }), input.SamlProviderARNs !== void 0 && input.SamlProviderARNs !== null && {
    SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context)
  }), input.SupportedLoginProviders !== void 0 && input.SupportedLoginProviders !== null && {
    SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context)
  });
};
var serializeAws_json1_1DeleteIdentitiesInput = function(input, context) {
  return __assign6({}, input.IdentityIdsToDelete !== void 0 && input.IdentityIdsToDelete !== null && {
    IdentityIdsToDelete: serializeAws_json1_1IdentityIdList(input.IdentityIdsToDelete, context)
  });
};
var serializeAws_json1_1DeleteIdentityPoolInput = function(input, context) {
  return __assign6({}, input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId });
};
var serializeAws_json1_1DescribeIdentityInput = function(input, context) {
  return __assign6({}, input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId });
};
var serializeAws_json1_1DescribeIdentityPoolInput = function(input, context) {
  return __assign6({}, input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId });
};
var serializeAws_json1_1GetCredentialsForIdentityInput = function(input, context) {
  return __assign6(__assign6(__assign6({}, input.CustomRoleArn !== void 0 && input.CustomRoleArn !== null && { CustomRoleArn: input.CustomRoleArn }), input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) });
};
var serializeAws_json1_1GetIdentityPoolRolesInput = function(input, context) {
  return __assign6({}, input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId });
};
var serializeAws_json1_1GetIdInput = function(input, context) {
  return __assign6(__assign6(__assign6({}, input.AccountId !== void 0 && input.AccountId !== null && { AccountId: input.AccountId }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) });
};
var serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput = function(input, context) {
  return __assign6(__assign6(__assign6(__assign6({}, input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) }), input.TokenDuration !== void 0 && input.TokenDuration !== null && { TokenDuration: input.TokenDuration });
};
var serializeAws_json1_1GetOpenIdTokenInput = function(input, context) {
  return __assign6(__assign6({}, input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) });
};
var serializeAws_json1_1IdentityIdList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1IdentityPool = function(input, context) {
  return __assign6(__assign6(__assign6(__assign6(__assign6(__assign6(__assign6(__assign6(__assign6(__assign6({}, input.AllowClassicFlow !== void 0 && input.AllowClassicFlow !== null && { AllowClassicFlow: input.AllowClassicFlow }), input.AllowUnauthenticatedIdentities !== void 0 && input.AllowUnauthenticatedIdentities !== null && {
    AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities
  }), input.CognitoIdentityProviders !== void 0 && input.CognitoIdentityProviders !== null && {
    CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context)
  }), input.DeveloperProviderName !== void 0 && input.DeveloperProviderName !== null && { DeveloperProviderName: input.DeveloperProviderName }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.IdentityPoolName !== void 0 && input.IdentityPoolName !== null && { IdentityPoolName: input.IdentityPoolName }), input.IdentityPoolTags !== void 0 && input.IdentityPoolTags !== null && {
    IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context)
  }), input.OpenIdConnectProviderARNs !== void 0 && input.OpenIdConnectProviderARNs !== null && {
    OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context)
  }), input.SamlProviderARNs !== void 0 && input.SamlProviderARNs !== null && {
    SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context)
  }), input.SupportedLoginProviders !== void 0 && input.SupportedLoginProviders !== null && {
    SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context)
  });
};
var serializeAws_json1_1IdentityPoolTagsListType = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1IdentityPoolTagsType = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read9(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign6(__assign6({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1IdentityProviders = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read9(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign6(__assign6({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1ListIdentitiesInput = function(input, context) {
  return __assign6(__assign6(__assign6(__assign6({}, input.HideDisabled !== void 0 && input.HideDisabled !== null && { HideDisabled: input.HideDisabled }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken });
};
var serializeAws_json1_1ListIdentityPoolsInput = function(input, context) {
  return __assign6(__assign6({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken });
};
var serializeAws_json1_1ListTagsForResourceInput = function(input, context) {
  return __assign6({}, input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn });
};
var serializeAws_json1_1LoginsList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1LoginsMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read9(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign6(__assign6({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1LookupDeveloperIdentityInput = function(input, context) {
  return __assign6(__assign6(__assign6(__assign6(__assign6({}, input.DeveloperUserIdentifier !== void 0 && input.DeveloperUserIdentifier !== null && { DeveloperUserIdentifier: input.DeveloperUserIdentifier }), input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken });
};
var serializeAws_json1_1MappingRule = function(input, context) {
  return __assign6(__assign6(__assign6(__assign6({}, input.Claim !== void 0 && input.Claim !== null && { Claim: input.Claim }), input.MatchType !== void 0 && input.MatchType !== null && { MatchType: input.MatchType }), input.RoleARN !== void 0 && input.RoleARN !== null && { RoleARN: input.RoleARN }), input.Value !== void 0 && input.Value !== null && { Value: input.Value });
};
var serializeAws_json1_1MappingRulesList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1MappingRule(entry, context);
  });
};
var serializeAws_json1_1MergeDeveloperIdentitiesInput = function(input, context) {
  return __assign6(__assign6(__assign6(__assign6({}, input.DestinationUserIdentifier !== void 0 && input.DestinationUserIdentifier !== null && { DestinationUserIdentifier: input.DestinationUserIdentifier }), input.DeveloperProviderName !== void 0 && input.DeveloperProviderName !== null && { DeveloperProviderName: input.DeveloperProviderName }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.SourceUserIdentifier !== void 0 && input.SourceUserIdentifier !== null && { SourceUserIdentifier: input.SourceUserIdentifier });
};
var serializeAws_json1_1OIDCProviderList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1RoleMapping = function(input, context) {
  return __assign6(__assign6(__assign6({}, input.AmbiguousRoleResolution !== void 0 && input.AmbiguousRoleResolution !== null && { AmbiguousRoleResolution: input.AmbiguousRoleResolution }), input.RulesConfiguration !== void 0 && input.RulesConfiguration !== null && {
    RulesConfiguration: serializeAws_json1_1RulesConfigurationType(input.RulesConfiguration, context)
  }), input.Type !== void 0 && input.Type !== null && { Type: input.Type });
};
var serializeAws_json1_1RoleMappingMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read9(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign6(__assign6({}, acc), (_b = {}, _b[key] = serializeAws_json1_1RoleMapping(value, context), _b));
  }, {});
};
var serializeAws_json1_1RolesMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read9(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign6(__assign6({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1RulesConfigurationType = function(input, context) {
  return __assign6({}, input.Rules !== void 0 && input.Rules !== null && { Rules: serializeAws_json1_1MappingRulesList(input.Rules, context) });
};
var serializeAws_json1_1SAMLProviderList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1SetIdentityPoolRolesInput = function(input, context) {
  return __assign6(__assign6(__assign6({}, input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.RoleMappings !== void 0 && input.RoleMappings !== null && { RoleMappings: serializeAws_json1_1RoleMappingMap(input.RoleMappings, context) }), input.Roles !== void 0 && input.Roles !== null && { Roles: serializeAws_json1_1RolesMap(input.Roles, context) });
};
var serializeAws_json1_1TagResourceInput = function(input, context) {
  return __assign6(__assign6({}, input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }), input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1IdentityPoolTagsType(input.Tags, context) });
};
var serializeAws_json1_1UnlinkDeveloperIdentityInput = function(input, context) {
  return __assign6(__assign6(__assign6(__assign6({}, input.DeveloperProviderName !== void 0 && input.DeveloperProviderName !== null && { DeveloperProviderName: input.DeveloperProviderName }), input.DeveloperUserIdentifier !== void 0 && input.DeveloperUserIdentifier !== null && { DeveloperUserIdentifier: input.DeveloperUserIdentifier }), input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId });
};
var serializeAws_json1_1UnlinkIdentityInput = function(input, context) {
  return __assign6(__assign6(__assign6({}, input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) }), input.LoginsToRemove !== void 0 && input.LoginsToRemove !== null && {
    LoginsToRemove: serializeAws_json1_1LoginsList(input.LoginsToRemove, context)
  });
};
var serializeAws_json1_1UntagResourceInput = function(input, context) {
  return __assign6(__assign6({}, input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }), input.TagKeys !== void 0 && input.TagKeys !== null && { TagKeys: serializeAws_json1_1IdentityPoolTagsListType(input.TagKeys, context) });
};
var deserializeAws_json1_1CognitoIdentityProvider = function(output, context) {
  return {
    ClientId: output.ClientId !== void 0 && output.ClientId !== null ? output.ClientId : void 0,
    ProviderName: output.ProviderName !== void 0 && output.ProviderName !== null ? output.ProviderName : void 0,
    ServerSideTokenCheck: output.ServerSideTokenCheck !== void 0 && output.ServerSideTokenCheck !== null ? output.ServerSideTokenCheck : void 0
  };
};
var deserializeAws_json1_1CognitoIdentityProviderList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1CognitoIdentityProvider(entry, context);
  });
};
var deserializeAws_json1_1ConcurrentModificationException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1Credentials = function(output, context) {
  return {
    AccessKeyId: output.AccessKeyId !== void 0 && output.AccessKeyId !== null ? output.AccessKeyId : void 0,
    Expiration: output.Expiration !== void 0 && output.Expiration !== null ? new Date(Math.round(output.Expiration * 1e3)) : void 0,
    SecretKey: output.SecretKey !== void 0 && output.SecretKey !== null ? output.SecretKey : void 0,
    SessionToken: output.SessionToken !== void 0 && output.SessionToken !== null ? output.SessionToken : void 0
  };
};
var deserializeAws_json1_1DeleteIdentitiesResponse = function(output, context) {
  return {
    UnprocessedIdentityIds: output.UnprocessedIdentityIds !== void 0 && output.UnprocessedIdentityIds !== null ? deserializeAws_json1_1UnprocessedIdentityIdList(output.UnprocessedIdentityIds, context) : void 0
  };
};
var deserializeAws_json1_1DeveloperUserAlreadyRegisteredException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1DeveloperUserIdentifierList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1ExternalServiceException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1GetCredentialsForIdentityResponse = function(output, context) {
  return {
    Credentials: output.Credentials !== void 0 && output.Credentials !== null ? deserializeAws_json1_1Credentials(output.Credentials, context) : void 0,
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0
  };
};
var deserializeAws_json1_1GetIdentityPoolRolesResponse = function(output, context) {
  return {
    IdentityPoolId: output.IdentityPoolId !== void 0 && output.IdentityPoolId !== null ? output.IdentityPoolId : void 0,
    RoleMappings: output.RoleMappings !== void 0 && output.RoleMappings !== null ? deserializeAws_json1_1RoleMappingMap(output.RoleMappings, context) : void 0,
    Roles: output.Roles !== void 0 && output.Roles !== null ? deserializeAws_json1_1RolesMap(output.Roles, context) : void 0
  };
};
var deserializeAws_json1_1GetIdResponse = function(output, context) {
  return {
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0
  };
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse = function(output, context) {
  return {
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
    Token: output.Token !== void 0 && output.Token !== null ? output.Token : void 0
  };
};
var deserializeAws_json1_1GetOpenIdTokenResponse = function(output, context) {
  return {
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
    Token: output.Token !== void 0 && output.Token !== null ? output.Token : void 0
  };
};
var deserializeAws_json1_1IdentitiesList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1IdentityDescription(entry, context);
  });
};
var deserializeAws_json1_1IdentityDescription = function(output, context) {
  return {
    CreationDate: output.CreationDate !== void 0 && output.CreationDate !== null ? new Date(Math.round(output.CreationDate * 1e3)) : void 0,
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
    LastModifiedDate: output.LastModifiedDate !== void 0 && output.LastModifiedDate !== null ? new Date(Math.round(output.LastModifiedDate * 1e3)) : void 0,
    Logins: output.Logins !== void 0 && output.Logins !== null ? deserializeAws_json1_1LoginsList(output.Logins, context) : void 0
  };
};
var deserializeAws_json1_1IdentityPool = function(output, context) {
  return {
    AllowClassicFlow: output.AllowClassicFlow !== void 0 && output.AllowClassicFlow !== null ? output.AllowClassicFlow : void 0,
    AllowUnauthenticatedIdentities: output.AllowUnauthenticatedIdentities !== void 0 && output.AllowUnauthenticatedIdentities !== null ? output.AllowUnauthenticatedIdentities : void 0,
    CognitoIdentityProviders: output.CognitoIdentityProviders !== void 0 && output.CognitoIdentityProviders !== null ? deserializeAws_json1_1CognitoIdentityProviderList(output.CognitoIdentityProviders, context) : void 0,
    DeveloperProviderName: output.DeveloperProviderName !== void 0 && output.DeveloperProviderName !== null ? output.DeveloperProviderName : void 0,
    IdentityPoolId: output.IdentityPoolId !== void 0 && output.IdentityPoolId !== null ? output.IdentityPoolId : void 0,
    IdentityPoolName: output.IdentityPoolName !== void 0 && output.IdentityPoolName !== null ? output.IdentityPoolName : void 0,
    IdentityPoolTags: output.IdentityPoolTags !== void 0 && output.IdentityPoolTags !== null ? deserializeAws_json1_1IdentityPoolTagsType(output.IdentityPoolTags, context) : void 0,
    OpenIdConnectProviderARNs: output.OpenIdConnectProviderARNs !== void 0 && output.OpenIdConnectProviderARNs !== null ? deserializeAws_json1_1OIDCProviderList(output.OpenIdConnectProviderARNs, context) : void 0,
    SamlProviderARNs: output.SamlProviderARNs !== void 0 && output.SamlProviderARNs !== null ? deserializeAws_json1_1SAMLProviderList(output.SamlProviderARNs, context) : void 0,
    SupportedLoginProviders: output.SupportedLoginProviders !== void 0 && output.SupportedLoginProviders !== null ? deserializeAws_json1_1IdentityProviders(output.SupportedLoginProviders, context) : void 0
  };
};
var deserializeAws_json1_1IdentityPoolShortDescription = function(output, context) {
  return {
    IdentityPoolId: output.IdentityPoolId !== void 0 && output.IdentityPoolId !== null ? output.IdentityPoolId : void 0,
    IdentityPoolName: output.IdentityPoolName !== void 0 && output.IdentityPoolName !== null ? output.IdentityPoolName : void 0
  };
};
var deserializeAws_json1_1IdentityPoolsList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1IdentityPoolShortDescription(entry, context);
  });
};
var deserializeAws_json1_1IdentityPoolTagsType = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read9(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign6(__assign6({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1IdentityProviders = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read9(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign6(__assign6({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1InternalErrorException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidIdentityPoolConfigurationException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidParameterException2 = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1LimitExceededException2 = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ListIdentitiesResponse = function(output, context) {
  return {
    Identities: output.Identities !== void 0 && output.Identities !== null ? deserializeAws_json1_1IdentitiesList(output.Identities, context) : void 0,
    IdentityPoolId: output.IdentityPoolId !== void 0 && output.IdentityPoolId !== null ? output.IdentityPoolId : void 0,
    NextToken: output.NextToken !== void 0 && output.NextToken !== null ? output.NextToken : void 0
  };
};
var deserializeAws_json1_1ListIdentityPoolsResponse = function(output, context) {
  return {
    IdentityPools: output.IdentityPools !== void 0 && output.IdentityPools !== null ? deserializeAws_json1_1IdentityPoolsList(output.IdentityPools, context) : void 0,
    NextToken: output.NextToken !== void 0 && output.NextToken !== null ? output.NextToken : void 0
  };
};
var deserializeAws_json1_1ListTagsForResourceResponse = function(output, context) {
  return {
    Tags: output.Tags !== void 0 && output.Tags !== null ? deserializeAws_json1_1IdentityPoolTagsType(output.Tags, context) : void 0
  };
};
var deserializeAws_json1_1LoginsList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1LookupDeveloperIdentityResponse = function(output, context) {
  return {
    DeveloperUserIdentifierList: output.DeveloperUserIdentifierList !== void 0 && output.DeveloperUserIdentifierList !== null ? deserializeAws_json1_1DeveloperUserIdentifierList(output.DeveloperUserIdentifierList, context) : void 0,
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
    NextToken: output.NextToken !== void 0 && output.NextToken !== null ? output.NextToken : void 0
  };
};
var deserializeAws_json1_1MappingRule = function(output, context) {
  return {
    Claim: output.Claim !== void 0 && output.Claim !== null ? output.Claim : void 0,
    MatchType: output.MatchType !== void 0 && output.MatchType !== null ? output.MatchType : void 0,
    RoleARN: output.RoleARN !== void 0 && output.RoleARN !== null ? output.RoleARN : void 0,
    Value: output.Value !== void 0 && output.Value !== null ? output.Value : void 0
  };
};
var deserializeAws_json1_1MappingRulesList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MappingRule(entry, context);
  });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesResponse = function(output, context) {
  return {
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0
  };
};
var deserializeAws_json1_1NotAuthorizedException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1OIDCProviderList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1ResourceConflictException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ResourceNotFoundException2 = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1RoleMapping = function(output, context) {
  return {
    AmbiguousRoleResolution: output.AmbiguousRoleResolution !== void 0 && output.AmbiguousRoleResolution !== null ? output.AmbiguousRoleResolution : void 0,
    RulesConfiguration: output.RulesConfiguration !== void 0 && output.RulesConfiguration !== null ? deserializeAws_json1_1RulesConfigurationType(output.RulesConfiguration, context) : void 0,
    Type: output.Type !== void 0 && output.Type !== null ? output.Type : void 0
  };
};
var deserializeAws_json1_1RoleMappingMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read9(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign6(__assign6({}, acc), (_b = {}, _b[key] = deserializeAws_json1_1RoleMapping(value, context), _b));
  }, {});
};
var deserializeAws_json1_1RolesMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read9(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign6(__assign6({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1RulesConfigurationType = function(output, context) {
  return {
    Rules: output.Rules !== void 0 && output.Rules !== null ? deserializeAws_json1_1MappingRulesList(output.Rules, context) : void 0
  };
};
var deserializeAws_json1_1SAMLProviderList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1TagResourceResponse = function(output, context) {
  return {};
};
var deserializeAws_json1_1TooManyRequestsException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1UnprocessedIdentityId = function(output, context) {
  return {
    ErrorCode: output.ErrorCode !== void 0 && output.ErrorCode !== null ? output.ErrorCode : void 0,
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0
  };
};
var deserializeAws_json1_1UnprocessedIdentityIdList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1UnprocessedIdentityId(entry, context);
  });
};
var deserializeAws_json1_1UntagResourceResponse = function(output, context) {
  return {};
};
var deserializeMetadata2 = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody2 = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString2 = function(streamBody, context) {
  return collectBody2(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var buildHttpRpcRequest2 = function(context, headers, path, resolvedHostname, body) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, contents;
    return __generator8(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
          contents = {
            protocol,
            hostname,
            port,
            method: "POST",
            path,
            headers
          };
          if (resolvedHostname !== void 0) {
            contents.hostname = resolvedHostname;
          }
          if (body !== void 0) {
            contents.body = body;
          }
          return [2, new HttpRequest(contents)];
      }
    });
  });
};
var parseBody2 = function(streamBody, context) {
  return collectBodyString2(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });
};
var loadRestJsonErrorCode2 = function(output, data) {
  var findKey = function(object, key) {
    return Object.keys(object).find(function(k) {
      return k.toLowerCase() === key.toLowerCase();
    });
  };
  var sanitizeErrorCode = function(rawValue) {
    var cleanValue = rawValue;
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  var headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
  return "";
};

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/CreateIdentityPoolCommand.js
var CreateIdentityPoolCommand = function(_super) {
  __extends5(CreateIdentityPoolCommand2, _super);
  function CreateIdentityPoolCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateIdentityPoolCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "CreateIdentityPoolCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateIdentityPoolInput.filterSensitiveLog,
      outputFilterSensitiveLog: IdentityPool.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateIdentityPoolCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CreateIdentityPoolCommand(input, context);
  };
  CreateIdentityPoolCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CreateIdentityPoolCommand(output, context);
  };
  return CreateIdentityPoolCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/DeleteIdentitiesCommand.js
var DeleteIdentitiesCommand = function(_super) {
  __extends5(DeleteIdentitiesCommand2, _super);
  function DeleteIdentitiesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteIdentitiesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "DeleteIdentitiesCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteIdentitiesInput.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteIdentitiesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteIdentitiesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteIdentitiesCommand(input, context);
  };
  DeleteIdentitiesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteIdentitiesCommand(output, context);
  };
  return DeleteIdentitiesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/DeleteIdentityPoolCommand.js
var DeleteIdentityPoolCommand = function(_super) {
  __extends5(DeleteIdentityPoolCommand2, _super);
  function DeleteIdentityPoolCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteIdentityPoolCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "DeleteIdentityPoolCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteIdentityPoolInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteIdentityPoolCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteIdentityPoolCommand(input, context);
  };
  DeleteIdentityPoolCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteIdentityPoolCommand(output, context);
  };
  return DeleteIdentityPoolCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/DescribeIdentityCommand.js
var DescribeIdentityCommand = function(_super) {
  __extends5(DescribeIdentityCommand2, _super);
  function DescribeIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "DescribeIdentityCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeIdentityInput.filterSensitiveLog,
      outputFilterSensitiveLog: IdentityDescription.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeIdentityCommand(input, context);
  };
  DescribeIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeIdentityCommand(output, context);
  };
  return DescribeIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/DescribeIdentityPoolCommand.js
var DescribeIdentityPoolCommand = function(_super) {
  __extends5(DescribeIdentityPoolCommand2, _super);
  function DescribeIdentityPoolCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeIdentityPoolCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "DescribeIdentityPoolCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeIdentityPoolInput.filterSensitiveLog,
      outputFilterSensitiveLog: IdentityPool.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeIdentityPoolCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeIdentityPoolCommand(input, context);
  };
  DescribeIdentityPoolCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeIdentityPoolCommand(output, context);
  };
  return DescribeIdentityPoolCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetCredentialsForIdentityCommand.js
var GetCredentialsForIdentityCommand = function(_super) {
  __extends5(GetCredentialsForIdentityCommand2, _super);
  function GetCredentialsForIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetCredentialsForIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "GetCredentialsForIdentityCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetCredentialsForIdentityInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetCredentialsForIdentityResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetCredentialsForIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetCredentialsForIdentityCommand(input, context);
  };
  GetCredentialsForIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetCredentialsForIdentityCommand(output, context);
  };
  return GetCredentialsForIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetIdCommand.js
var GetIdCommand = function(_super) {
  __extends5(GetIdCommand2, _super);
  function GetIdCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetIdCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "GetIdCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetIdInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetIdResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetIdCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetIdCommand(input, context);
  };
  GetIdCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetIdCommand(output, context);
  };
  return GetIdCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetIdentityPoolRolesCommand.js
var GetIdentityPoolRolesCommand = function(_super) {
  __extends5(GetIdentityPoolRolesCommand2, _super);
  function GetIdentityPoolRolesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetIdentityPoolRolesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "GetIdentityPoolRolesCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetIdentityPoolRolesInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetIdentityPoolRolesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetIdentityPoolRolesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetIdentityPoolRolesCommand(input, context);
  };
  GetIdentityPoolRolesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetIdentityPoolRolesCommand(output, context);
  };
  return GetIdentityPoolRolesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetOpenIdTokenCommand.js
var GetOpenIdTokenCommand = function(_super) {
  __extends5(GetOpenIdTokenCommand2, _super);
  function GetOpenIdTokenCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetOpenIdTokenCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "GetOpenIdTokenCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetOpenIdTokenInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetOpenIdTokenResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetOpenIdTokenCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetOpenIdTokenCommand(input, context);
  };
  GetOpenIdTokenCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetOpenIdTokenCommand(output, context);
  };
  return GetOpenIdTokenCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetOpenIdTokenForDeveloperIdentityCommand.js
var GetOpenIdTokenForDeveloperIdentityCommand = function(_super) {
  __extends5(GetOpenIdTokenForDeveloperIdentityCommand2, _super);
  function GetOpenIdTokenForDeveloperIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetOpenIdTokenForDeveloperIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "GetOpenIdTokenForDeveloperIdentityCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetOpenIdTokenForDeveloperIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(input, context);
  };
  GetOpenIdTokenForDeveloperIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(output, context);
  };
  return GetOpenIdTokenForDeveloperIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/ListIdentitiesCommand.js
var ListIdentitiesCommand = function(_super) {
  __extends5(ListIdentitiesCommand2, _super);
  function ListIdentitiesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListIdentitiesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "ListIdentitiesCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListIdentitiesInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListIdentitiesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListIdentitiesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1ListIdentitiesCommand(input, context);
  };
  ListIdentitiesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1ListIdentitiesCommand(output, context);
  };
  return ListIdentitiesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/ListIdentityPoolsCommand.js
var ListIdentityPoolsCommand = function(_super) {
  __extends5(ListIdentityPoolsCommand2, _super);
  function ListIdentityPoolsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListIdentityPoolsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "ListIdentityPoolsCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListIdentityPoolsInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListIdentityPoolsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListIdentityPoolsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1ListIdentityPoolsCommand(input, context);
  };
  ListIdentityPoolsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1ListIdentityPoolsCommand(output, context);
  };
  return ListIdentityPoolsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/ListTagsForResourceCommand.js
var ListTagsForResourceCommand = function(_super) {
  __extends5(ListTagsForResourceCommand2, _super);
  function ListTagsForResourceCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTagsForResourceCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "ListTagsForResourceCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTagsForResourceInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListTagsForResourceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTagsForResourceCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1ListTagsForResourceCommand(input, context);
  };
  ListTagsForResourceCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1ListTagsForResourceCommand(output, context);
  };
  return ListTagsForResourceCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/LookupDeveloperIdentityCommand.js
var LookupDeveloperIdentityCommand = function(_super) {
  __extends5(LookupDeveloperIdentityCommand2, _super);
  function LookupDeveloperIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  LookupDeveloperIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "LookupDeveloperIdentityCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: LookupDeveloperIdentityInput.filterSensitiveLog,
      outputFilterSensitiveLog: LookupDeveloperIdentityResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  LookupDeveloperIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1LookupDeveloperIdentityCommand(input, context);
  };
  LookupDeveloperIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1LookupDeveloperIdentityCommand(output, context);
  };
  return LookupDeveloperIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/MergeDeveloperIdentitiesCommand.js
var MergeDeveloperIdentitiesCommand = function(_super) {
  __extends5(MergeDeveloperIdentitiesCommand2, _super);
  function MergeDeveloperIdentitiesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  MergeDeveloperIdentitiesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "MergeDeveloperIdentitiesCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: MergeDeveloperIdentitiesInput.filterSensitiveLog,
      outputFilterSensitiveLog: MergeDeveloperIdentitiesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  MergeDeveloperIdentitiesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1MergeDeveloperIdentitiesCommand(input, context);
  };
  MergeDeveloperIdentitiesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1MergeDeveloperIdentitiesCommand(output, context);
  };
  return MergeDeveloperIdentitiesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/SetIdentityPoolRolesCommand.js
var SetIdentityPoolRolesCommand = function(_super) {
  __extends5(SetIdentityPoolRolesCommand2, _super);
  function SetIdentityPoolRolesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetIdentityPoolRolesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "SetIdentityPoolRolesCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetIdentityPoolRolesInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetIdentityPoolRolesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1SetIdentityPoolRolesCommand(input, context);
  };
  SetIdentityPoolRolesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1SetIdentityPoolRolesCommand(output, context);
  };
  return SetIdentityPoolRolesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/TagResourceCommand.js
var TagResourceCommand = function(_super) {
  __extends5(TagResourceCommand2, _super);
  function TagResourceCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TagResourceCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "TagResourceCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: TagResourceInput.filterSensitiveLog,
      outputFilterSensitiveLog: TagResourceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TagResourceCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1TagResourceCommand(input, context);
  };
  TagResourceCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1TagResourceCommand(output, context);
  };
  return TagResourceCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/UnlinkDeveloperIdentityCommand.js
var UnlinkDeveloperIdentityCommand = function(_super) {
  __extends5(UnlinkDeveloperIdentityCommand2, _super);
  function UnlinkDeveloperIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UnlinkDeveloperIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "UnlinkDeveloperIdentityCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: UnlinkDeveloperIdentityInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UnlinkDeveloperIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1UnlinkDeveloperIdentityCommand(input, context);
  };
  UnlinkDeveloperIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1UnlinkDeveloperIdentityCommand(output, context);
  };
  return UnlinkDeveloperIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/UnlinkIdentityCommand.js
var UnlinkIdentityCommand = function(_super) {
  __extends5(UnlinkIdentityCommand2, _super);
  function UnlinkIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UnlinkIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "UnlinkIdentityCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: UnlinkIdentityInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UnlinkIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1UnlinkIdentityCommand(input, context);
  };
  UnlinkIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1UnlinkIdentityCommand(output, context);
  };
  return UnlinkIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/UntagResourceCommand.js
var UntagResourceCommand = function(_super) {
  __extends5(UntagResourceCommand2, _super);
  function UntagResourceCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UntagResourceCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "UntagResourceCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: UntagResourceInput.filterSensitiveLog,
      outputFilterSensitiveLog: UntagResourceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UntagResourceCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1UntagResourceCommand(input, context);
  };
  UntagResourceCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1UntagResourceCommand(output, context);
  };
  return UntagResourceCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/UpdateIdentityPoolCommand.js
var UpdateIdentityPoolCommand = function(_super) {
  __extends5(UpdateIdentityPoolCommand2, _super);
  function UpdateIdentityPoolCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateIdentityPoolCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger13 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "UpdateIdentityPoolCommand";
    var handlerExecutionContext = {
      logger: logger13,
      clientName,
      commandName,
      inputFilterSensitiveLog: IdentityPool.filterSensitiveLog,
      outputFilterSensitiveLog: IdentityPool.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateIdentityPoolCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1UpdateIdentityPoolCommand(input, context);
  };
  UpdateIdentityPoolCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1UpdateIdentityPoolCommand(output, context);
  };
  return UpdateIdentityPoolCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/CognitoIdentity.js
var CognitoIdentity = function(_super) {
  __extends5(CognitoIdentity2, _super);
  function CognitoIdentity2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  CognitoIdentity2.prototype.createIdentityPool = function(args, optionsOrCb, cb) {
    var command = new CreateIdentityPoolCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.deleteIdentities = function(args, optionsOrCb, cb) {
    var command = new DeleteIdentitiesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.deleteIdentityPool = function(args, optionsOrCb, cb) {
    var command = new DeleteIdentityPoolCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.describeIdentity = function(args, optionsOrCb, cb) {
    var command = new DescribeIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.describeIdentityPool = function(args, optionsOrCb, cb) {
    var command = new DescribeIdentityPoolCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.getCredentialsForIdentity = function(args, optionsOrCb, cb) {
    var command = new GetCredentialsForIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.getId = function(args, optionsOrCb, cb) {
    var command = new GetIdCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.getIdentityPoolRoles = function(args, optionsOrCb, cb) {
    var command = new GetIdentityPoolRolesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.getOpenIdToken = function(args, optionsOrCb, cb) {
    var command = new GetOpenIdTokenCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.getOpenIdTokenForDeveloperIdentity = function(args, optionsOrCb, cb) {
    var command = new GetOpenIdTokenForDeveloperIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.listIdentities = function(args, optionsOrCb, cb) {
    var command = new ListIdentitiesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.listIdentityPools = function(args, optionsOrCb, cb) {
    var command = new ListIdentityPoolsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.listTagsForResource = function(args, optionsOrCb, cb) {
    var command = new ListTagsForResourceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.lookupDeveloperIdentity = function(args, optionsOrCb, cb) {
    var command = new LookupDeveloperIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.mergeDeveloperIdentities = function(args, optionsOrCb, cb) {
    var command = new MergeDeveloperIdentitiesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.setIdentityPoolRoles = function(args, optionsOrCb, cb) {
    var command = new SetIdentityPoolRolesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.tagResource = function(args, optionsOrCb, cb) {
    var command = new TagResourceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.unlinkDeveloperIdentity = function(args, optionsOrCb, cb) {
    var command = new UnlinkDeveloperIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.unlinkIdentity = function(args, optionsOrCb, cb) {
    var command = new UnlinkIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.untagResource = function(args, optionsOrCb, cb) {
    var command = new UntagResourceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.updateIdentityPool = function(args, optionsOrCb, cb) {
    var command = new UpdateIdentityPoolCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  return CognitoIdentity2;
}(CognitoIdentityClient);

// node_modules/@aws-sdk/property-provider/dist/es/ProviderError.js
var ProviderError = function(_super) {
  __extends4(ProviderError2, _super);
  function ProviderError2(message, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    var _this = _super.call(this, message) || this;
    _this.tryNextLink = tryNextLink;
    return _this;
  }
  return ProviderError2;
}(Error);

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/resolveLogins.js
function resolveLogins(logins) {
  return Promise.all(Object.keys(logins).reduce(function(arr, name) {
    var tokenOrProvider = logins[name];
    if (typeof tokenOrProvider === "string") {
      arr.push([name, tokenOrProvider]);
    } else {
      arr.push(tokenOrProvider().then(function(token) {
        return [name, token];
      }));
    }
    return arr;
  }, [])).then(function(resolvedPairs) {
    return resolvedPairs.reduce(function(logins2, _a) {
      var _b = __read7(_a, 2), key = _b[0], value = _b[1];
      logins2[key] = value;
      return logins2;
    }, {});
  });
}

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/fromCognitoIdentity.js
function fromCognitoIdentity(parameters) {
  var _this = this;
  return function() {
    return __awaiter4(_this, void 0, void 0, function() {
      var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;
      var _j;
      return __generator4(this, function(_k) {
        switch (_k.label) {
          case 0:
            _f = (_e = parameters.client).send;
            _g = GetCredentialsForIdentityCommand.bind;
            _j = {
              CustomRoleArn: parameters.customRoleArn,
              IdentityId: parameters.identityId
            };
            if (!parameters.logins)
              return [3, 2];
            return [4, resolveLogins(parameters.logins)];
          case 1:
            _h = _k.sent();
            return [3, 3];
          case 2:
            _h = void 0;
            _k.label = 3;
          case 3:
            return [4, _f.apply(_e, [new (_g.apply(GetCredentialsForIdentityCommand, [void 0, (_j.Logins = _h, _j)]))()])];
          case 4:
            _a = _k.sent().Credentials, _b = _a === void 0 ? throwOnMissingCredentials() : _a, _c = _b.AccessKeyId, AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c, Expiration = _b.Expiration, _d = _b.SecretKey, SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d, SessionToken = _b.SessionToken;
            return [2, {
              identityId: parameters.identityId,
              accessKeyId: AccessKeyId,
              secretAccessKey: SecretKey,
              sessionToken: SessionToken,
              expiration: Expiration
            }];
        }
      });
    });
  };
}
function throwOnMissingAccessKeyId() {
  throw new ProviderError("Response from Amazon Cognito contained no access key ID");
}
function throwOnMissingCredentials() {
  throw new ProviderError("Response from Amazon Cognito contained no credentials");
}
function throwOnMissingSecretKey() {
  throw new ProviderError("Response from Amazon Cognito contained no secret key");
}

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/IndexedDbStorage.js
var STORE_NAME = "IdentityIds";
var IndexedDbStorage = function() {
  function IndexedDbStorage2(dbName) {
    if (dbName === void 0) {
      dbName = "aws:cognito-identity-ids";
    }
    this.dbName = dbName;
  }
  IndexedDbStorage2.prototype.getItem = function(key) {
    return this.withObjectStore("readonly", function(store) {
      var req = store.get(key);
      return new Promise(function(resolve) {
        req.onerror = function() {
          return resolve(null);
        };
        req.onsuccess = function() {
          return resolve(req.result ? req.result.value : null);
        };
      });
    }).catch(function() {
      return null;
    });
  };
  IndexedDbStorage2.prototype.removeItem = function(key) {
    return this.withObjectStore("readwrite", function(store) {
      var req = store.delete(key);
      return new Promise(function(resolve, reject) {
        req.onerror = function() {
          return reject(req.error);
        };
        req.onsuccess = function() {
          return resolve();
        };
      });
    });
  };
  IndexedDbStorage2.prototype.setItem = function(id, value) {
    return this.withObjectStore("readwrite", function(store) {
      var req = store.put({ id, value });
      return new Promise(function(resolve, reject) {
        req.onerror = function() {
          return reject(req.error);
        };
        req.onsuccess = function() {
          return resolve();
        };
      });
    });
  };
  IndexedDbStorage2.prototype.getDb = function() {
    var openDbRequest = self.indexedDB.open(this.dbName, 1);
    return new Promise(function(resolve, reject) {
      openDbRequest.onsuccess = function() {
        resolve(openDbRequest.result);
      };
      openDbRequest.onerror = function() {
        reject(openDbRequest.error);
      };
      openDbRequest.onblocked = function() {
        reject(new Error("Unable to access DB"));
      };
      openDbRequest.onupgradeneeded = function() {
        var db = openDbRequest.result;
        db.onerror = function() {
          reject(new Error("Failed to create object store"));
        };
        db.createObjectStore(STORE_NAME, { keyPath: "id" });
      };
    });
  };
  IndexedDbStorage2.prototype.withObjectStore = function(mode, action) {
    return this.getDb().then(function(db) {
      var tx = db.transaction(STORE_NAME, mode);
      tx.oncomplete = function() {
        return db.close();
      };
      return new Promise(function(resolve, reject) {
        tx.onerror = function() {
          return reject(tx.error);
        };
        resolve(action(tx.objectStore(STORE_NAME)));
      }).catch(function(err) {
        db.close();
        throw err;
      });
    });
  };
  return IndexedDbStorage2;
}();

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/InMemoryStorage.js
var InMemoryStorage = function() {
  function InMemoryStorage2(store) {
    if (store === void 0) {
      store = {};
    }
    this.store = store;
  }
  InMemoryStorage2.prototype.getItem = function(key) {
    if (key in this.store) {
      return this.store[key];
    }
    return null;
  };
  InMemoryStorage2.prototype.removeItem = function(key) {
    delete this.store[key];
  };
  InMemoryStorage2.prototype.setItem = function(key, value) {
    this.store[key] = value;
  };
  return InMemoryStorage2;
}();

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/localStorage.js
var inMemoryStorage = new InMemoryStorage();
function localStorage() {
  if (typeof self === "object" && self.indexedDB) {
    return new IndexedDbStorage();
  }
  if (typeof window === "object" && window.localStorage) {
    return window.localStorage;
  }
  return inMemoryStorage;
}

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/fromCognitoIdentityPool.js
function fromCognitoIdentityPool(_a) {
  var _this = this;
  var accountId = _a.accountId, _b = _a.cache, cache = _b === void 0 ? localStorage() : _b, client = _a.client, customRoleArn = _a.customRoleArn, identityPoolId = _a.identityPoolId, logins = _a.logins, _c = _a.userIdentifier, userIdentifier = _c === void 0 ? !logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : void 0 : _c;
  var cacheKey = userIdentifier ? "aws:cognito-identity-credentials:" + identityPoolId + ":" + userIdentifier : void 0;
  var provider = function() {
    return __awaiter4(_this, void 0, void 0, function() {
      var identityId, _a2, _b2, IdentityId, _c2, _d, _e, _f;
      var _g;
      return __generator4(this, function(_h) {
        switch (_h.label) {
          case 0:
            _a2 = cacheKey;
            if (!_a2)
              return [3, 2];
            return [4, cache.getItem(cacheKey)];
          case 1:
            _a2 = _h.sent();
            _h.label = 2;
          case 2:
            identityId = _a2;
            if (!!identityId)
              return [3, 7];
            _d = (_c2 = client).send;
            _e = GetIdCommand.bind;
            _g = {
              AccountId: accountId,
              IdentityPoolId: identityPoolId
            };
            if (!logins)
              return [3, 4];
            return [4, resolveLogins(logins)];
          case 3:
            _f = _h.sent();
            return [3, 5];
          case 4:
            _f = void 0;
            _h.label = 5;
          case 5:
            return [4, _d.apply(_c2, [new (_e.apply(GetIdCommand, [void 0, (_g.Logins = _f, _g)]))()])];
          case 6:
            _b2 = _h.sent().IdentityId, IdentityId = _b2 === void 0 ? throwOnMissingId() : _b2;
            identityId = IdentityId;
            if (cacheKey) {
              Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function() {
              });
            }
            _h.label = 7;
          case 7:
            provider = fromCognitoIdentity({
              client,
              customRoleArn,
              logins,
              identityId
            });
            return [2, provider()];
        }
      });
    });
  };
  return function() {
    return provider().catch(function(err) {
      return __awaiter4(_this, void 0, void 0, function() {
        return __generator4(this, function(_a2) {
          if (cacheKey) {
            Promise.resolve(cache.removeItem(cacheKey)).catch(function() {
            });
          }
          throw err;
        });
      });
    });
  };
}
function throwOnMissingId() {
  throw new ProviderError("Response from Amazon Cognito contained no identity ID");
}

// node_modules/@aws-amplify/core/lib-esm/Util/CognitoIdentityClient.js
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
function createCognitoIdentityClient(config) {
  var client = new CognitoIdentityClient({
    region: config.region,
    customUserAgent: getAmplifyUserAgent()
  });
  client.middlewareStack.add(function(next, _) {
    return function(args) {
      return next(middlewareArgs(args));
    };
  }, {
    step: "build",
    name: "cacheControlMiddleWare"
  });
  return client;
}
function middlewareArgs(args) {
  return __assign7(__assign7({}, args), { request: __assign7(__assign7({}, args.request), { headers: __assign7(__assign7({}, args.request.headers), { "cache-control": "no-store" }) }) });
}

// node_modules/@aws-amplify/core/lib-esm/Credentials.js
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var __awaiter9 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator9 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var logger12 = new ConsoleLogger("Credentials");
var CREDENTIALS_TTL = 50 * 60 * 1e3;
var COGNITO_IDENTITY_KEY_PREFIX = "CognitoIdentityId-";
var CredentialsClass = function() {
  function CredentialsClass2(config) {
    this._gettingCredPromise = null;
    this._refreshHandlers = {};
    this.Auth = void 0;
    this.configure(config);
    this._refreshHandlers["google"] = GoogleOAuth2.refreshGoogleToken;
    this._refreshHandlers["facebook"] = FacebookOAuth2.refreshFacebookToken;
  }
  CredentialsClass2.prototype.getModuleName = function() {
    return "Credentials";
  };
  CredentialsClass2.prototype.getCredSource = function() {
    return this._credentials_source;
  };
  CredentialsClass2.prototype.configure = function(config) {
    if (!config)
      return this._config || {};
    this._config = Object.assign({}, this._config, config);
    var refreshHandlers = this._config.refreshHandlers;
    if (refreshHandlers) {
      this._refreshHandlers = __assign8(__assign8({}, this._refreshHandlers), refreshHandlers);
    }
    this._storage = this._config.storage;
    if (!this._storage) {
      this._storage = new StorageHelper().getStorage();
    }
    this._storageSync = Promise.resolve();
    if (typeof this._storage["sync"] === "function") {
      this._storageSync = this._storage["sync"]();
    }
    return this._config;
  };
  CredentialsClass2.prototype.get = function() {
    logger12.debug("getting credentials");
    return this._pickupCredentials();
  };
  CredentialsClass2.prototype._getCognitoIdentityIdStorageKey = function(identityPoolId) {
    return "" + COGNITO_IDENTITY_KEY_PREFIX + identityPoolId;
  };
  CredentialsClass2.prototype._pickupCredentials = function() {
    logger12.debug("picking up credentials");
    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {
      logger12.debug("getting new cred promise");
      this._gettingCredPromise = makeQuerablePromise(this._keepAlive());
    } else {
      logger12.debug("getting old cred promise");
    }
    return this._gettingCredPromise;
  };
  CredentialsClass2.prototype._keepAlive = function() {
    return __awaiter9(this, void 0, void 0, function() {
      var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;
      return __generator9(this, function(_b) {
        switch (_b.label) {
          case 0:
            logger12.debug("checking if credentials exists and not expired");
            cred = this._credentials;
            if (cred && !this._isExpired(cred) && !this._isPastTTL()) {
              logger12.debug("credentials not changed and not expired, directly return");
              return [2, Promise.resolve(cred)];
            }
            logger12.debug("need to get a new credential or refresh the existing one");
            _a = this.Auth, Auth = _a === void 0 ? Amplify.Auth : _a;
            if (!Auth || typeof Auth.currentUserCredentials !== "function") {
              return [2, Promise.reject("No Auth module registered in Amplify")];
            }
            if (!(!this._isExpired(cred) && this._isPastTTL()))
              return [3, 6];
            logger12.debug("ttl has passed but token is not yet expired");
            _b.label = 1;
          case 1:
            _b.trys.push([1, 5, , 6]);
            return [4, Auth.currentUserPoolUser()];
          case 2:
            user_1 = _b.sent();
            return [4, Auth.currentSession()];
          case 3:
            session = _b.sent();
            refreshToken_1 = session.refreshToken;
            refreshRequest = new Promise(function(res, rej) {
              user_1.refreshSession(refreshToken_1, function(err, data) {
                return err ? rej(err) : res(data);
              });
            });
            return [4, refreshRequest];
          case 4:
            _b.sent();
            return [3, 6];
          case 5:
            err_1 = _b.sent();
            logger12.debug("Error attempting to refreshing the session", err_1);
            return [3, 6];
          case 6:
            return [2, Auth.currentUserCredentials()];
        }
      });
    });
  };
  CredentialsClass2.prototype.refreshFederatedToken = function(federatedInfo) {
    logger12.debug("Getting federated credentials");
    var provider = federatedInfo.provider, user = federatedInfo.user, token = federatedInfo.token, identity_id = federatedInfo.identity_id;
    var expires_at = federatedInfo.expires_at;
    expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1e3 : expires_at;
    var that = this;
    logger12.debug("checking if federated jwt token expired");
    if (expires_at > new Date().getTime()) {
      logger12.debug("token not expired");
      return this._setCredentialsFromFederation({
        provider,
        token,
        user,
        identity_id,
        expires_at
      });
    } else {
      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === "function") {
        logger12.debug("getting refreshed jwt token from federation provider");
        return this._providerRefreshWithRetry({
          refreshHandler: that._refreshHandlers[provider],
          provider,
          user
        });
      } else {
        logger12.debug("no refresh handler for provider:", provider);
        this.clear();
        return Promise.reject("no refresh handler for provider");
      }
    }
  };
  CredentialsClass2.prototype._providerRefreshWithRetry = function(_a) {
    var _this = this;
    var refreshHandler = _a.refreshHandler, provider = _a.provider, user = _a.user;
    var MAX_DELAY_MS2 = 10 * 1e3;
    return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS2).then(function(data) {
      logger12.debug("refresh federated token sucessfully", data);
      return _this._setCredentialsFromFederation({
        provider,
        token: data.token,
        user,
        identity_id: data.identity_id,
        expires_at: data.expires_at
      });
    }).catch(function(e) {
      var isNetworkError = typeof e === "string" && e.toLowerCase().lastIndexOf("network error", e.length) === 0;
      if (!isNetworkError) {
        _this.clear();
      }
      logger12.debug("refresh federated token failed", e);
      return Promise.reject("refreshing federation token failed: " + e);
    });
  };
  CredentialsClass2.prototype._isExpired = function(credentials) {
    if (!credentials) {
      logger12.debug("no credentials for expiration check");
      return true;
    }
    logger12.debug("are these credentials expired?", credentials);
    var ts = Date.now();
    var expiration = credentials.expiration;
    return expiration.getTime() <= ts;
  };
  CredentialsClass2.prototype._isPastTTL = function() {
    return this._nextCredentialsRefresh <= Date.now();
  };
  CredentialsClass2.prototype._setCredentialsForGuest = function() {
    return __awaiter9(this, void 0, void 0, function() {
      var _a, identityPoolId, region, mandatorySignIn, identityId, _b, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;
      var _this = this;
      return __generator9(this, function(_c) {
        switch (_c.label) {
          case 0:
            logger12.debug("setting credentials for guest");
            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;
            if (mandatorySignIn) {
              return [2, Promise.reject("cannot get guest credentials when mandatory signin enabled")];
            }
            if (!identityPoolId) {
              logger12.debug("No Cognito Identity pool provided for unauthenticated access");
              return [2, Promise.reject("No Cognito Identity pool provided for unauthenticated access")];
            }
            if (!region) {
              logger12.debug("region is not configured for getting the credentials");
              return [2, Promise.reject("region is not configured for getting the credentials")];
            }
            _b = this;
            return [4, this._getGuestIdentityId()];
          case 1:
            identityId = _b._identityId = _c.sent();
            cognitoClient = createCognitoIdentityClient({
              region
            });
            credentials = void 0;
            if (identityId) {
              cognitoIdentityParams = {
                identityId,
                client: cognitoClient
              };
              credentials = fromCognitoIdentity(cognitoIdentityParams)();
            } else {
              credentialsProvider = function() {
                return __awaiter9(_this, void 0, void 0, function() {
                  var IdentityId, cognitoIdentityParams2, credentialsFromCognitoIdentity;
                  return __generator9(this, function(_a2) {
                    switch (_a2.label) {
                      case 0:
                        return [4, cognitoClient.send(new GetIdCommand({
                          IdentityPoolId: identityPoolId
                        }))];
                      case 1:
                        IdentityId = _a2.sent().IdentityId;
                        this._identityId = IdentityId;
                        cognitoIdentityParams2 = {
                          client: cognitoClient,
                          identityId: IdentityId
                        };
                        credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams2);
                        return [2, credentialsFromCognitoIdentity()];
                    }
                  });
                });
              };
              credentials = credentialsProvider().catch(function(err) {
                return __awaiter9(_this, void 0, void 0, function() {
                  return __generator9(this, function(_a2) {
                    throw err;
                  });
                });
              });
            }
            return [2, this._loadCredentials(credentials, "guest", false, null).then(function(res) {
              return res;
            }).catch(function(e) {
              return __awaiter9(_this, void 0, void 0, function() {
                var credentialsProvider2;
                var _this2 = this;
                return __generator9(this, function(_a2) {
                  switch (_a2.label) {
                    case 0:
                      if (!(e.name === "ResourceNotFoundException" && e.message === "Identity '" + identityId + "' not found."))
                        return [3, 2];
                      logger12.debug("Failed to load guest credentials");
                      return [4, this._removeGuestIdentityId()];
                    case 1:
                      _a2.sent();
                      credentialsProvider2 = function() {
                        return __awaiter9(_this2, void 0, void 0, function() {
                          var IdentityId, cognitoIdentityParams2, credentialsFromCognitoIdentity;
                          return __generator9(this, function(_a3) {
                            switch (_a3.label) {
                              case 0:
                                return [4, cognitoClient.send(new GetIdCommand({
                                  IdentityPoolId: identityPoolId
                                }))];
                              case 1:
                                IdentityId = _a3.sent().IdentityId;
                                this._identityId = IdentityId;
                                cognitoIdentityParams2 = {
                                  client: cognitoClient,
                                  identityId: IdentityId
                                };
                                credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams2);
                                return [2, credentialsFromCognitoIdentity()];
                            }
                          });
                        });
                      };
                      credentials = credentialsProvider2().catch(function(err) {
                        return __awaiter9(_this2, void 0, void 0, function() {
                          return __generator9(this, function(_a3) {
                            throw err;
                          });
                        });
                      });
                      return [2, this._loadCredentials(credentials, "guest", false, null)];
                    case 2:
                      return [2, e];
                  }
                });
              });
            })];
        }
      });
    });
  };
  CredentialsClass2.prototype._setCredentialsFromFederation = function(params) {
    var provider = params.provider, token = params.token, identity_id = params.identity_id;
    var domains = {
      google: "accounts.google.com",
      facebook: "graph.facebook.com",
      amazon: "www.amazon.com",
      developer: "cognito-identity.amazonaws.com"
    };
    var domain = domains[provider] || provider;
    if (!domain) {
      return Promise.reject("You must specify a federated provider");
    }
    var logins = {};
    logins[domain] = token;
    var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;
    if (!identityPoolId) {
      logger12.debug("No Cognito Federated Identity pool provided");
      return Promise.reject("No Cognito Federated Identity pool provided");
    }
    if (!region) {
      logger12.debug("region is not configured for getting the credentials");
      return Promise.reject("region is not configured for getting the credentials");
    }
    var cognitoClient = createCognitoIdentityClient({
      region
    });
    var credentials = void 0;
    if (identity_id) {
      var cognitoIdentityParams = {
        identityId: identity_id,
        logins,
        client: cognitoClient
      };
      credentials = fromCognitoIdentity(cognitoIdentityParams)();
    } else {
      var cognitoIdentityParams = {
        logins,
        identityPoolId,
        client: cognitoClient
      };
      credentials = fromCognitoIdentityPool(cognitoIdentityParams)();
    }
    return this._loadCredentials(credentials, "federated", true, params);
  };
  CredentialsClass2.prototype._setCredentialsFromSession = function(session) {
    var _this = this;
    logger12.debug("set credentials from session");
    var idToken = session.getIdToken().getJwtToken();
    var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId;
    if (!identityPoolId) {
      logger12.debug("No Cognito Federated Identity pool provided");
      return Promise.reject("No Cognito Federated Identity pool provided");
    }
    if (!region) {
      logger12.debug("region is not configured for getting the credentials");
      return Promise.reject("region is not configured for getting the credentials");
    }
    var key = "cognito-idp." + region + ".amazonaws.com/" + userPoolId;
    var logins = {};
    logins[key] = idToken;
    var cognitoClient = createCognitoIdentityClient({
      region
    });
    var credentialsProvider = function() {
      return __awaiter9(_this, void 0, void 0, function() {
        var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a2, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;
        return __generator9(this, function(_c) {
          switch (_c.label) {
            case 0:
              return [4, this._getGuestIdentityId()];
            case 1:
              guestIdentityId = _c.sent();
              if (!!guestIdentityId)
                return [3, 3];
              return [4, cognitoClient.send(new GetIdCommand({
                IdentityPoolId: identityPoolId,
                Logins: logins
              }))];
            case 2:
              IdentityId = _c.sent().IdentityId;
              generatedOrRetrievedIdentityId = IdentityId;
              _c.label = 3;
            case 3:
              return [4, cognitoClient.send(new GetCredentialsForIdentityCommand({
                IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,
                Logins: logins
              }))];
            case 4:
              _a2 = _c.sent(), _b = _a2.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a2.IdentityId;
              this._identityId = primaryIdentityId;
              if (!guestIdentityId)
                return [3, 6];
              logger12.debug("The guest identity " + guestIdentityId + " has been successfully linked to the logins");
              if (guestIdentityId === primaryIdentityId) {
                logger12.debug("The guest identity " + guestIdentityId + " has become the primary identity");
              }
              return [4, this._removeGuestIdentityId()];
            case 5:
              _c.sent();
              _c.label = 6;
            case 6:
              return [2, {
                accessKeyId: AccessKeyId,
                secretAccessKey: SecretKey,
                sessionToken: SessionToken,
                expiration: Expiration,
                identityId: primaryIdentityId
              }];
          }
        });
      });
    };
    var credentials = credentialsProvider().catch(function(err) {
      return __awaiter9(_this, void 0, void 0, function() {
        return __generator9(this, function(_a2) {
          throw err;
        });
      });
    });
    return this._loadCredentials(credentials, "userPool", true, null);
  };
  CredentialsClass2.prototype._loadCredentials = function(credentials, source, authenticated, info) {
    var _this = this;
    var that = this;
    return new Promise(function(res, rej) {
      credentials.then(function(credentials2) {
        return __awaiter9(_this, void 0, void 0, function() {
          var user, provider, token, expires_at, identity_id;
          return __generator9(this, function(_a) {
            switch (_a.label) {
              case 0:
                logger12.debug("Load credentials successfully", credentials2);
                if (this._identityId && !credentials2.identityId) {
                  credentials2["identityId"] = this._identityId;
                }
                that._credentials = credentials2;
                that._credentials.authenticated = authenticated;
                that._credentials_source = source;
                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;
                if (source === "federated") {
                  user = Object.assign({ id: this._credentials.identityId }, info.user);
                  provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;
                  try {
                    this._storage.setItem("aws-amplify-federatedInfo", JSON.stringify({
                      provider,
                      token,
                      user,
                      expires_at,
                      identity_id
                    }));
                  } catch (e) {
                    logger12.debug("Failed to put federated info into auth storage", e);
                  }
                }
                if (!(source === "guest"))
                  return [3, 2];
                return [4, this._setGuestIdentityId(credentials2.identityId)];
              case 1:
                _a.sent();
                _a.label = 2;
              case 2:
                res(that._credentials);
                return [2];
            }
          });
        });
      }).catch(function(err) {
        if (err) {
          logger12.debug("Failed to load credentials", credentials);
          logger12.debug("Error loading credentials", err);
          rej(err);
          return;
        }
      });
    });
  };
  CredentialsClass2.prototype.set = function(params, source) {
    if (source === "session") {
      return this._setCredentialsFromSession(params);
    } else if (source === "federation") {
      return this._setCredentialsFromFederation(params);
    } else if (source === "guest") {
      return this._setCredentialsForGuest();
    } else {
      logger12.debug("no source specified for setting credentials");
      return Promise.reject("invalid source");
    }
  };
  CredentialsClass2.prototype.clear = function() {
    return __awaiter9(this, void 0, void 0, function() {
      return __generator9(this, function(_a) {
        this._credentials = null;
        this._credentials_source = null;
        logger12.debug("removing aws-amplify-federatedInfo from storage");
        this._storage.removeItem("aws-amplify-federatedInfo");
        return [2];
      });
    });
  };
  CredentialsClass2.prototype._getGuestIdentityId = function() {
    return __awaiter9(this, void 0, void 0, function() {
      var identityPoolId, e_1;
      return __generator9(this, function(_a) {
        switch (_a.label) {
          case 0:
            identityPoolId = this._config.identityPoolId;
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [4, this._storageSync];
          case 2:
            _a.sent();
            return [2, this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];
          case 3:
            e_1 = _a.sent();
            logger12.debug("Failed to get the cached guest identityId", e_1);
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  CredentialsClass2.prototype._setGuestIdentityId = function(identityId) {
    return __awaiter9(this, void 0, void 0, function() {
      var identityPoolId, e_2;
      return __generator9(this, function(_a) {
        switch (_a.label) {
          case 0:
            identityPoolId = this._config.identityPoolId;
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [4, this._storageSync];
          case 2:
            _a.sent();
            this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);
            return [3, 4];
          case 3:
            e_2 = _a.sent();
            logger12.debug("Failed to cache guest identityId", e_2);
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  CredentialsClass2.prototype._removeGuestIdentityId = function() {
    return __awaiter9(this, void 0, void 0, function() {
      var identityPoolId;
      return __generator9(this, function(_a) {
        identityPoolId = this._config.identityPoolId;
        logger12.debug("removing " + this._getCognitoIdentityIdStorageKey(identityPoolId) + " from storage");
        this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));
        return [2];
      });
    });
  };
  CredentialsClass2.prototype.shear = function(credentials) {
    return {
      accessKeyId: credentials.accessKeyId,
      sessionToken: credentials.sessionToken,
      secretAccessKey: credentials.secretAccessKey,
      identityId: credentials.identityId,
      authenticated: credentials.authenticated
    };
  };
  return CredentialsClass2;
}();
var Credentials = new CredentialsClass(null);
Amplify.register(Credentials);

// node_modules/@aws-amplify/core/lib-esm/ServiceWorker/ServiceWorker.js
var ServiceWorkerClass = function() {
  function ServiceWorkerClass2() {
    this._logger = new ConsoleLogger("ServiceWorker");
  }
  Object.defineProperty(ServiceWorkerClass2.prototype, "serviceWorker", {
    get: function() {
      return this._serviceWorker;
    },
    enumerable: true,
    configurable: true
  });
  ServiceWorkerClass2.prototype.register = function(filePath, scope) {
    var _this = this;
    if (filePath === void 0) {
      filePath = "/service-worker.js";
    }
    if (scope === void 0) {
      scope = "/";
    }
    this._logger.debug("registering " + filePath);
    this._logger.debug("registering service worker with scope " + scope);
    return new Promise(function(resolve, reject) {
      if (navigator && "serviceWorker" in navigator) {
        navigator.serviceWorker.register(filePath, {
          scope
        }).then(function(registration) {
          if (registration.installing) {
            _this._serviceWorker = registration.installing;
          } else if (registration.waiting) {
            _this._serviceWorker = registration.waiting;
          } else if (registration.active) {
            _this._serviceWorker = registration.active;
          }
          _this._registration = registration;
          _this._setupListeners();
          _this._logger.debug("Service Worker Registration Success: " + registration);
          return resolve(registration);
        }).catch(function(error) {
          _this._logger.debug("Service Worker Registration Failed " + error);
          return reject(error);
        });
      } else {
        return reject(new Error("Service Worker not available"));
      }
    });
  };
  ServiceWorkerClass2.prototype.enablePush = function(publicKey) {
    var _this = this;
    if (!this._registration)
      throw new Error("Service Worker not registered");
    this._publicKey = publicKey;
    return new Promise(function(resolve, reject) {
      if (browserOrNode().isBrowser) {
        _this._registration.pushManager.getSubscription().then(function(subscription) {
          if (subscription) {
            _this._subscription = subscription;
            _this._logger.debug("User is subscribed to push: " + JSON.stringify(subscription));
            resolve(subscription);
          } else {
            _this._logger.debug("User is NOT subscribed to push");
            return _this._registration.pushManager.subscribe({
              userVisibleOnly: true,
              applicationServerKey: _this._urlB64ToUint8Array(publicKey)
            }).then(function(subscription2) {
              _this._subscription = subscription2;
              _this._logger.debug("User subscribed: " + JSON.stringify(subscription2));
              resolve(subscription2);
            }).catch(function(error) {
              _this._logger.error(error);
            });
          }
        });
      } else {
        return reject(new Error("Service Worker not available"));
      }
    });
  };
  ServiceWorkerClass2.prototype._urlB64ToUint8Array = function(base64String) {
    var padding = "=".repeat((4 - base64String.length % 4) % 4);
    var base64 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/");
    var rawData = window.atob(base64);
    var outputArray = new Uint8Array(rawData.length);
    for (var i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  };
  ServiceWorkerClass2.prototype.send = function(message) {
    if (this._serviceWorker) {
      this._serviceWorker.postMessage(typeof message === "object" ? JSON.stringify(message) : message);
    }
  };
  ServiceWorkerClass2.prototype._setupListeners = function() {
    var _this = this;
    this._serviceWorker.addEventListener("statechange", function(event) {
      var currentState = _this._serviceWorker.state;
      _this._logger.debug("ServiceWorker statechange: " + currentState);
      if (Amplify.Analytics && typeof Amplify.Analytics.record === "function") {
        Amplify.Analytics.record({
          name: "ServiceWorker",
          attributes: {
            state: currentState
          }
        });
      }
    });
    this._serviceWorker.addEventListener("message", function(event) {
      _this._logger.debug("ServiceWorker message event: " + event);
    });
  };
  return ServiceWorkerClass2;
}();

// node_modules/universal-cookie/es6/Cookies.js
var cookie2 = __toESM(require_cookie());

// node_modules/universal-cookie/es6/utils.js
var cookie = __toESM(require_cookie());
function hasDocumentCookie() {
  return typeof document === "object" && typeof document.cookie === "string";
}
function parseCookies(cookies, options) {
  if (typeof cookies === "string") {
    return cookie.parse(cookies, options);
  } else if (typeof cookies === "object" && cookies !== null) {
    return cookies;
  } else {
    return {};
  }
}
function isParsingCookie(value, doNotParse) {
  if (typeof doNotParse === "undefined") {
    doNotParse = !value || value[0] !== "{" && value[0] !== "[" && value[0] !== '"';
  }
  return !doNotParse;
}
function readCookie(value, options) {
  if (options === void 0) {
    options = {};
  }
  var cleanValue = cleanupCookieValue(value);
  if (isParsingCookie(cleanValue, options.doNotParse)) {
    try {
      return JSON.parse(cleanValue);
    } catch (e) {
    }
  }
  return value;
}
function cleanupCookieValue(value) {
  if (value && value[0] === "j" && value[1] === ":") {
    return value.substr(2);
  }
  return value;
}

// node_modules/universal-cookie/es6/Cookies.js
var __assign9 = function() {
  __assign9 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign9.apply(this, arguments);
};
var Cookies = function() {
  function Cookies2(cookies, options) {
    var _this = this;
    this.changeListeners = [];
    this.HAS_DOCUMENT_COOKIE = false;
    this.cookies = parseCookies(cookies, options);
    new Promise(function() {
      _this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();
    }).catch(function() {
    });
  }
  Cookies2.prototype._updateBrowserValues = function(parseOptions) {
    if (!this.HAS_DOCUMENT_COOKIE) {
      return;
    }
    this.cookies = cookie2.parse(document.cookie, parseOptions);
  };
  Cookies2.prototype._emitChange = function(params) {
    for (var i = 0; i < this.changeListeners.length; ++i) {
      this.changeListeners[i](params);
    }
  };
  Cookies2.prototype.get = function(name, options, parseOptions) {
    if (options === void 0) {
      options = {};
    }
    this._updateBrowserValues(parseOptions);
    return readCookie(this.cookies[name], options);
  };
  Cookies2.prototype.getAll = function(options, parseOptions) {
    if (options === void 0) {
      options = {};
    }
    this._updateBrowserValues(parseOptions);
    var result = {};
    for (var name_1 in this.cookies) {
      result[name_1] = readCookie(this.cookies[name_1], options);
    }
    return result;
  };
  Cookies2.prototype.set = function(name, value, options) {
    var _a;
    if (typeof value === "object") {
      value = JSON.stringify(value);
    }
    this.cookies = __assign9(__assign9({}, this.cookies), (_a = {}, _a[name] = value, _a));
    if (this.HAS_DOCUMENT_COOKIE) {
      document.cookie = cookie2.serialize(name, value, options);
    }
    this._emitChange({ name, value, options });
  };
  Cookies2.prototype.remove = function(name, options) {
    var finalOptions = options = __assign9(__assign9({}, options), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 });
    this.cookies = __assign9({}, this.cookies);
    delete this.cookies[name];
    if (this.HAS_DOCUMENT_COOKIE) {
      document.cookie = cookie2.serialize(name, "", finalOptions);
    }
    this._emitChange({ name, value: void 0, options });
  };
  Cookies2.prototype.addChangeListener = function(callback) {
    this.changeListeners.push(callback);
  };
  Cookies2.prototype.removeChangeListener = function(callback) {
    var idx = this.changeListeners.indexOf(callback);
    if (idx >= 0) {
      this.changeListeners.splice(idx, 1);
    }
  };
  return Cookies2;
}();
var Cookies_default = Cookies;

// node_modules/universal-cookie/es6/index.js
var es6_default = Cookies_default;

// node_modules/@aws-amplify/core/lib-esm/UniversalStorage/index.js
var isBrowser = browserOrNode().isBrowser;
var UniversalStorage = function() {
  function UniversalStorage2(context) {
    if (context === void 0) {
      context = {};
    }
    this.cookies = new es6_default();
    this.store = isBrowser ? window.localStorage : /* @__PURE__ */ Object.create(null);
    this.cookies = context.req ? new es6_default(context.req.headers.cookie) : new es6_default();
    Object.assign(this.store, this.cookies.getAll());
  }
  Object.defineProperty(UniversalStorage2.prototype, "length", {
    get: function() {
      return Object.entries(this.store).length;
    },
    enumerable: true,
    configurable: true
  });
  UniversalStorage2.prototype.clear = function() {
    var _this = this;
    Array.from(new Array(this.length)).map(function(_, i) {
      return _this.key(i);
    }).forEach(function(key) {
      return _this.removeItem(key);
    });
  };
  UniversalStorage2.prototype.getItem = function(key) {
    return this.getLocalItem(key);
  };
  UniversalStorage2.prototype.getLocalItem = function(key) {
    return Object.prototype.hasOwnProperty.call(this.store, key) ? this.store[key] : null;
  };
  UniversalStorage2.prototype.getUniversalItem = function(key) {
    return this.cookies.get(key);
  };
  UniversalStorage2.prototype.key = function(index) {
    return Object.keys(this.store)[index];
  };
  UniversalStorage2.prototype.removeItem = function(key) {
    this.removeLocalItem(key);
    this.removeUniversalItem(key);
  };
  UniversalStorage2.prototype.removeLocalItem = function(key) {
    delete this.store[key];
  };
  UniversalStorage2.prototype.removeUniversalItem = function(key) {
    this.cookies.remove(key, {
      path: "/"
    });
  };
  UniversalStorage2.prototype.setItem = function(key, value) {
    this.setLocalItem(key, value);
    var tokenType = key.split(".").pop();
    switch (tokenType) {
      case "LastAuthUser":
      case "accessToken":
      case "refreshToken":
      case "idToken":
        isBrowser ? this.setUniversalItem(key, value) : this.setLocalItem(key, value);
    }
  };
  UniversalStorage2.prototype.setLocalItem = function(key, value) {
    this.store[key] = value;
  };
  UniversalStorage2.prototype.setUniversalItem = function(key, value) {
    this.cookies.set(key, value, {
      path: "/",
      sameSite: true,
      secure: window.location.hostname === "localhost" ? false : true
    });
  };
  return UniversalStorage2;
}();

// node_modules/@aws-amplify/core/lib-esm/constants.js
var hasSymbol = typeof Symbol !== "undefined" && typeof Symbol.for === "function";
var INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER = hasSymbol ? Symbol.for("INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER") : "@@INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER";
var INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER = hasSymbol ? Symbol.for("INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER") : "@@INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER";
var USER_AGENT_HEADER = "x-amz-user-agent";

// node_modules/@aws-amplify/core/lib-esm/index.js
var Constants = {
  userAgent: Platform.userAgent
};
var lib_esm_default = Amplify;

export {
  AWS_CLOUDWATCH_BASE_BUFFER_SIZE,
  AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE,
  AWS_CLOUDWATCH_MAX_EVENT_SIZE,
  AWS_CLOUDWATCH_CATEGORY,
  AWS_CLOUDWATCH_PROVIDER_NAME,
  NO_CREDS_ERROR_STRING,
  RETRY_ERROR_CODES,
  ConsoleLogger,
  AmplifyClass,
  Amplify,
  Platform,
  getAmplifyUserAgent,
  ClientDevice,
  missingConfig,
  invalidParameter,
  Hub,
  I18n2 as I18n,
  isEmpty,
  sortByField,
  objectLessAttributes,
  filenameToContentType,
  isTextFile,
  generateRandomString,
  makeQuerablePromise,
  isWebWorker,
  browserOrNode,
  transferKeyToLowerCase,
  transferKeyToUpperCase,
  isStrictObject,
  JS,
  require_tslib,
  fromHex,
  toHex,
  require_url,
  NonRetryableError,
  retry,
  jitteredBackoff,
  jitteredExponentialRetry,
  Mutex_default,
  bundle_esm_default,
  Reachability_default,
  DateUtils,
  urlSafeEncode,
  urlSafeDecode,
  BackgroundProcessManager,
  BackgroundManagerNotOpenError,
  BackgroundProcessManagerState,
  Signer,
  parseMobileHubConfig,
  Parser,
  fromUtf86 as fromUtf8,
  toUtf86 as toUtf8,
  es_exports2 as es_exports,
  init_es2 as init_es,
  dist_es_exports,
  init_dist_es,
  require_build2 as require_build,
  require_build6 as require_build2,
  __assign5 as __assign,
  __rest2 as __rest,
  __awaiter4 as __awaiter,
  __generator4 as __generator,
  __values4 as __values,
  __read7 as __read,
  __await,
  __asyncGenerator,
  __asyncValues,
  HttpResponse,
  HttpRequest,
  buildQueryString,
  FetchHttpHandler,
  fromBase64,
  toBase64,
  streamCollector,
  invalidProvider,
  getRetryPlugin,
  DEFAULT_MAX_ATTEMPTS,
  resolveRetryConfig,
  calculateBodyLength,
  bowser_default,
  defaultUserAgent,
  parseUrl,
  resolveEndpointsConfig,
  resolveRegionConfig,
  getContentLengthPlugin,
  resolveHostHeaderConfig,
  getHostHeaderPlugin,
  getLoggerPlugin,
  isArrayBuffer,
  SignatureV4,
  resolveAwsAuthConfig,
  getAwsAuthPlugin,
  resolveUserAgentConfig,
  getUserAgentPlugin,
  Client,
  Command,
  extendedEncodeURIComponent,
  getArrayIfSingleItem,
  getValueFromTextNode,
  LazyJsonString,
  dateToUtcString,
  SENSITIVE_STRING,
  getSerdePlugin,
  AWSCloudWatchProvider,
  GoogleOAuth2 as GoogleOAuth,
  FacebookOAuth2 as FacebookOAuth,
  MemoryStorage,
  StorageHelper,
  Linking,
  AppState,
  AsyncStorage,
  CredentialsClass,
  Credentials,
  ServiceWorkerClass,
  UniversalStorage,
  INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER,
  INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER,
  USER_AGENT_HEADER,
  Constants,
  lib_esm_default
};
/*!
 * Bowser - a browser detector
 * https://github.com/lancedikson/bowser
 * MIT License | (c) Dustin Diaz 2012-2015
 * MIT License | (c) Denis Demchenko 2015-2019
 */
/*!
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! https://mths.be/punycode v1.4.1 by @mathias */
//# sourceMappingURL=chunk-XMOQMHJF.js.map
